[{"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\index.js":"1","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\App.js":"2","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\serviceWorker.js":"3","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Registeration\\RegisterType.js":"4","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\config\\firebase.js":"5","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Registeration\\Register.js":"6","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\LinkPreview.js":"7","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Login.js":"8","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Registeration\\Pujoregister.js":"9","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Registeration\\Individualregister.js":"10","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Tabs\\CommunityTab.js":"11","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Tabs\\PeopleTab.js":"12","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Tabs\\ClipsTab.js":"13","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Tabs\\Home.js":"14","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Static\\ContactUs.js":"15","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Static\\AboutUs.js":"16","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Posts\\PostPage.js":"17","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Posts\\HashtagFilteredPosts.js":"18","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Posts\\Createpost.js":"19","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Translate\\SetLanguage.js":"20","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Profile\\Profile.js":"21","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Notification\\AllNotifications.js":"22","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Notification\\addNotification.js":"23","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\InvalidPage\\InvalidPage.js":"24","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\SplashScreen\\SplashScreen.js":"25","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\onboarding\\src\\MainHome.js":"26","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Posts\\Posts.js":"27","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Notification\\Notification.js":"28","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Others\\Preloader.js":"29","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Sidebars\\Sidebar_1.js":"30","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Nav\\nav.js":"31","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Sidebars\\Sidebar_2.js":"32","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Others\\Trending_hashtags.js":"33","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Utilities\\checkUser.js":"34","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Translate\\Translate.js":"35","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Sidebars\\UpvotePujoRow.js":"36","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\data\\states.js":"37","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\data\\cities.js":"38","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Posts\\Post.js":"39","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Notification\\SidebarNotification.js":"40","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Others\\UpvoteFollowList.js":"41","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Profile\\ProfileClips.js":"42","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Profile\\Grid.js":"43","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Profile\\EditProfile.js":"44","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Posts\\ImageUpload.js":"45","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Translate\\Dictionary.js":"46","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Translate\\ModalSetLanguage.js":"47","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Posts\\Comments.js":"48","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Posts\\LikeList.js":"49","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Posts\\Editpost.js":"50","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Posts\\Carouselpost.js":"51","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Profile\\GridView.js":"52","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Utilities\\timeFunction.js":"53","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Posts\\Replies.js":"54","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Carousel\\Carousel.js":"55"},{"size":506,"mtime":1619714277983,"results":"56","hashOfConfig":"57"},{"size":5670,"mtime":1619714277897,"results":"58","hashOfConfig":"57"},{"size":5086,"mtime":1619714278039,"results":"59","hashOfConfig":"57"},{"size":1568,"mtime":1619714280048,"results":"60","hashOfConfig":"57"},{"size":854,"mtime":1619714280994,"results":"61","hashOfConfig":"57"},{"size":2978,"mtime":1619714280023,"results":"62","hashOfConfig":"57"},{"size":550,"mtime":1619714277940,"results":"63","hashOfConfig":"57"},{"size":8129,"mtime":1619714278566,"results":"64","hashOfConfig":"57"},{"size":18578,"mtime":1619714279989,"results":"65","hashOfConfig":"57"},{"size":17130,"mtime":1619714279954,"results":"66","hashOfConfig":"57"},{"size":6488,"mtime":1619714280583,"results":"67","hashOfConfig":"57"},{"size":1190,"mtime":1619714280634,"results":"68","hashOfConfig":"57"},{"size":1230,"mtime":1619714280552,"results":"69","hashOfConfig":"57"},{"size":4484,"mtime":1619714280613,"results":"70","hashOfConfig":"57"},{"size":1826,"mtime":1619714280440,"results":"71","hashOfConfig":"57"},{"size":1257,"mtime":1619714280418,"results":"72","hashOfConfig":"57"},{"size":6607,"mtime":1619714279373,"results":"73","hashOfConfig":"57"},{"size":4484,"mtime":1619714279263,"results":"74","hashOfConfig":"57"},{"size":17134,"mtime":1619714279208,"results":"75","hashOfConfig":"57"},{"size":2263,"mtime":1619714280820,"results":"76","hashOfConfig":"57"},{"size":25954,"mtime":1619714279773,"results":"77","hashOfConfig":"57"},{"size":11166,"mtime":1619714278856,"results":"78","hashOfConfig":"57"},{"size":1117,"mtime":1619714278946,"results":"79","hashOfConfig":"57"},{"size":1112,"mtime":1619714278704,"results":"80","hashOfConfig":"57"},{"size":846,"mtime":1619714280393,"results":"81","hashOfConfig":"57"},{"size":17375,"mtime":1619714281669,"results":"82","hashOfConfig":"57"},{"size":4800,"mtime":1619714279397,"results":"83","hashOfConfig":"57"},{"size":4018,"mtime":1619714278901,"results":"84","hashOfConfig":"57"},{"size":325,"mtime":1619714278997,"results":"85","hashOfConfig":"57"},{"size":5681,"mtime":1619714280248,"results":"86","hashOfConfig":"57"},{"size":19842,"mtime":1619714278743,"results":"87","hashOfConfig":"57"},{"size":7855,"mtime":1619714280271,"results":"88","hashOfConfig":"57"},{"size":747,"mtime":1619714279019,"results":"89","hashOfConfig":"57"},{"size":256,"mtime":1619714280925,"results":"90","hashOfConfig":"57"},{"size":953,"mtime":1619714280840,"results":"91","hashOfConfig":"57"},{"size":2748,"mtime":1619714280293,"results":"92","hashOfConfig":"57"},{"size":1073,"mtime":1619714281097,"results":"93","hashOfConfig":"57"},{"size":34058,"mtime":1619714281053,"results":"94","hashOfConfig":"57"},{"size":29697,"mtime":1619714279350,"results":"95","hashOfConfig":"57"},{"size":3986,"mtime":1619714278923,"results":"96","hashOfConfig":"57"},{"size":3527,"mtime":1619714279042,"results":"97","hashOfConfig":"57"},{"size":3481,"mtime":1619714279800,"results":"98","hashOfConfig":"57"},{"size":2002,"mtime":1619714279709,"results":"99","hashOfConfig":"57"},{"size":13748,"mtime":1619714279684,"results":"100","hashOfConfig":"57"},{"size":17539,"mtime":1619714279294,"results":"101","hashOfConfig":"57"},{"size":296,"mtime":1619714280753,"results":"102","hashOfConfig":"57"},{"size":1765,"mtime":1619714280797,"results":"103","hashOfConfig":"57"},{"size":16636,"mtime":1619714279175,"results":"104","hashOfConfig":"57"},{"size":3959,"mtime":1619714279316,"results":"105","hashOfConfig":"57"},{"size":12996,"mtime":1619714279237,"results":"106","hashOfConfig":"57"},{"size":5393,"mtime":1619714279143,"results":"107","hashOfConfig":"57"},{"size":747,"mtime":1619714279731,"results":"108","hashOfConfig":"57"},{"size":1912,"mtime":1619714280970,"results":"109","hashOfConfig":"57"},{"size":12719,"mtime":1619714279426,"results":"110","hashOfConfig":"57"},{"size":2339,"mtime":1619714278592,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"c4qsre",{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"244","messages":"245","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\index.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\App.js",["251"],"import React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Login from './components/Login';\nimport MainHome from './components/onboarding/src/MainHome';\nimport Register from './components/Registeration/Register.js';\nimport RegisterType from './components/Registeration/RegisterType.js';\nimport IndividualRegister from './components/Registeration/Individualregister';\nimport PujoRegister from './components/Registeration/Pujoregister';\nimport People from './components/Tabs/PeopleTab';\nimport Community from './components/Tabs/CommunityTab';\nimport Clips from './components/Tabs/ClipsTab';\nimport './App.css';\nimport { auth, db } from './components/config/firebase.js';\nimport AboutUs from './components/Static/AboutUs';\nimport ContactUs from './components/Static/ContactUs';\nimport Home from './components/Tabs/Home';\nimport HashtagFilteredPosts from './components/Posts/HashtagFilteredPosts';\n\nimport Createpost from './components/Posts/Createpost';\n\n//import Editpost from './components/Posts/Editpost';\n//import EditProfile from './components/Profile/EditProfile';\n\nimport { Redirect } from 'react-router-dom';\n//aos for animation\n//You must have aos installed to use it if not installed install using \"npm install aos --save\"\n//For more information visit https://github.com/michalsnik/aos\nimport AOS from 'aos';\nimport 'aos/dist/aos.css';\nimport Profile from './components/Profile/Profile';\n\nimport PostPage from './components/Posts/PostPage';\n\nimport AllNotifications from './components/Notification/AllNotifications';\nimport SetLanguage from './components/Translate/SetLanguage';\nimport LinkPreview from './LinkPreview';\nimport AddNotification from './components/Notification/addNotification';\nimport SplashScreen from './components/SplashScreen/SplashScreen';\nimport InvalidPage from './components/InvalidPage/InvalidPage';\n\n\n//For Animation\nAOS.init({\n  offset: 100,\n  duration: 1000,\n});\n\n\n\nfunction App() {\n\n  const [user, setuser] = useState([]);\n  const lang = localStorage.getItem(\"utsavlang\");\n  useEffect(() => {\n\n    if (user && user.uid !== '' && localStorage.getItem(\"Username\") === null) {\n      db.collection(\"Users\").doc(user.uid).get()\n        .then((doc) => {\n          if (doc.exists) {\n            const data = doc.data();\n            \n            localStorage.setItem('Username', data.name);\n            localStorage.setItem('Dp', data.dp);\n            localStorage.setItem('type', data.type);\n            if (data.type === 'indi')\n              localStorage.setItem('gender', data.gender);\n            if (data.type === 'com')\n              localStorage.setItem('upvotes',data.upvotes);\n            localStorage.setItem('city', data.city);\n            localStorage.setItem('visits',data.visits);\n            localStorage.setItem('follows',data.follows);\n          }\n        });\n    }\n  }, [user], []);\n\n  auth.onAuthStateChanged((authUser) => {\n    //console.log(authUser);\n    if (authUser) {\n      setuser(authUser);\n    } else {\n      setuser(false);\n    }\n  });\n\n  return (\n    <div className=\"app\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/onboarding\">\n            <MainHome />\n          </Route> \n          <Route exact path=\"/login\">\n            <Login />\n          </Route>\n          <Route exact path=\"/register\">\n            <Register />\n          </Route>\n          <Route exact path=\"/\">\n            <SplashScreen />\n          </Route>\n          <Route exact path=\"/home\">\n            <Home user={user} lang={lang}/>\n          </Route>\n          <Route exact path=\"/registerpage\">\n            <RegisterType /> {/*  SELECTING USER TYPE*/}\n          </Route>\n          <Route exact path=\"/individualregister\">\n            <IndividualRegister user={user} />\n          </Route>\n          <Route exact path=\"/pujoregister\">\n            <PujoRegister user={user} />\n          </Route>\n          <Route exact path=\"/profile/:id\">\n            <Profile user={user} />\n          </Route>\n          <Route exact path=\"/aboutus\">\n            <AboutUs />\n          </Route>\n          <Route exact path=\"/contactus\" >\n            <ContactUs />\n          </Route>\n          <Route exact path=\"/people\" >\n            <People user={user} lang={lang}/>\n          </Route>\n          <Route exact path=\"/community\" >\n            <Community user={user} lang={lang}/>\n          </Route>\n          <Route exact path=\"/clips\" >\n            <Clips user={user} lang={lang}/>\n          </Route>\n          <Route exact path=\"/posts/:clip/:postid\" component={PostPage}>\n          </Route>\n          <Route exact path=\"/hashtag/:hashtag\">\n            <HashtagFilteredPosts user={user} lang={lang} />\n          </Route>\n          <Route exact path=\"/createpost\">\n            <Createpost user={user} />\n          </Route>\n          <Route exact path=\"/notifications\">\n            <AllNotifications user={user} lang={lang}/>\n          </Route>\n          <Route exact path=\"/addnotif\">\n            <AddNotification user={user} lang={lang}/>\n          </Route>\n          \n          {/* <Route exact path=\"/editpost\" children={<Editpost user={user} />}>\n          </Route> */}\n          {/* <Route exact path=\"/editprofile\" children={<EditProfile user={user} />}>\n          </Route> */}\n          \n          <Route exact path=\"/languagesettings\" children={<SetLanguage user={user} />}>\n          </Route>\n\n          <Route exact path=\"/linkpreview\">\n            <LinkPreview/>\n          </Route>\n          <Route exact path=\"*\">\n            <InvalidPage user={user}/>\n          </Route>\n          \n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\serviceWorker.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Registeration\\RegisterType.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\config\\firebase.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Registeration\\Register.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\LinkPreview.js",["252"],"import React from 'react'\nimport { getLinkPreview, getPreviewFromContent } from 'link-preview-js';\nexport default function LinkPreviews() {\n    getLinkPreview('https://www.youtube.com/watch?v=MejbOFk7H6c')\n  .then((data) => console.debug(data));\n  var express = require('express')\n  var cors = require('cors')\n  var app = express()\n   \n  app.use(cors())\n   \n  app.get('/products/:id', function (req, res, next) {\n    res.json({msg: 'This is CORS-enabled for all origins!'})\n  })\n   \n    return (\n        <div>\n           hello\n        </div>\n    )\n}\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Login.js",["253","254","255","256","257","258","259","260"],"import React, { useState } from 'react'\nimport './styles/Login.css';\nimport { Link } from 'react-router-dom';\nimport { auth, db } from \"./config/firebase.js\";\nimport { useHistory } from 'react-router-dom';\nimport logo from './images/logo.png';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\n//import Footer from '../Footer/Footer';\nimport google_icon from './images/google_icon.svg';\nimport firebase from 'firebase';\nimport visibility_icon from '@material-ui/icons/Visibility'\n\n\nimport swal from 'sweetalert';\n\n//cards\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport harsh from './images/harsh.png'; //This is a Test image. Remove this after DB Connection of recent-login\nimport mehul from './images/mehul_bhai.png'; ////This is a Test image. Remove this after DB Connection of recent-login\n\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 140,\n        position: 'relative',\n        margin: '0 5px',\n        flexGrow: 1\n    },\n    media: {\n        maxWidth: 140,\n        height: '9rem',\n\n    },\n    close: {\n        position: 'absolute',\n        right: '5px',\n        top: '5px',\n    }\n});\n\nfunction recent_login(e) {\n    //console.log(e.target.attributes.uid.value);\n    //alert(\"login\");\n}\n\nfunction remove_card(e) {\n    //console.log(e);\n    //alert(\"remove\");\n}\n\nconst LoginCard = (props) => {\n    const classes = useStyles();\n    return (\n        <Card className={classes.root} data-aos=\"flip-left\" data-aos-delay=\"400\">\n            <CardActionArea>\n                <CancelIcon fontSize=\"inherit\" aria-label=\"remove\" className={classes.close} onClick={remove_card} />\n                <CardMedia\n                    className={classes.media}\n                    image={props.imgsrc}\n                    title={props.title}\n                    onClick={recent_login}\n                    uid={props.uid}\n                />\n                <Typography gutterBottom variant=\"body2\" component=\"p\" style={{ textAlign: 'center', fontWeight: 'bold' }}>\n                    {props.title}\n                </Typography>\n            </CardActionArea>\n        </Card>\n    );\n}\n\nfunction Login() {\n    const [email, setEmail] = useState('');\n    const history = useHistory('');\n    const [password, setPassword] = useState('');\n\n    const provider = new firebase.auth.GoogleAuthProvider();\n\n    async function google_login() {\n        const res = await firebase.auth().signInWithPopup(provider);\n\n        const check = await db.collection(\"Users\").doc(res.user.uid).get();\n\n        if (!check.exists) {\n            swal(\"Oops!\",\"No such account exists\",\"error\");\n            auth.signOut();\n            history.replace(\"/login\");\n        }\n        else {\n            history.replace({pathname:\"/\", state:{googleSignin: true}});\n        }\n\n    }\n\n    const login = (event) => {\n        event.preventDefault();\n\n        auth.signInWithEmailAndPassword(email, password)\n            .then((auth) => {\n                //console.log(auth);\n                history.replace({pathname:\"/\", state:{googleSignin: false}});\n            })\n            .catch((e) => {\n                if (\n                    e.message ===\n                    \"The password is invalid or the user does not have a password.\"\n                ) {\n                    swal(\"Oops!\", \"Please check your Password again\", \"error\");\n                } else if (\n                    e.message ===\n                    \"There is no user record corresponding to this identifier. The user may have been deleted.\"\n                ) {\n                    swal(\"Oops!\", \"No such account exists\", \"error\");\n                    history.replace(\"/login\");\n                    window.scrollTo({\n                        top: document.body.scrollHeight,\n                        left: 0,\n                        behavior: \"smooth\",\n                    });\n                } else {\n                    swal(\"Oops!\", e.message, \"error\");\n                }\n            })\n    }\n\n    return (\n        <>\n            <div className=\"container-fluid login-page\">\n                {/* <div className=\"container login-main\"> */}\n                    {/* <div className=\"row\"> */}\n                        {/* <div className=\"col-lg-5\" data-aos=\"fade-right\">\n                            <h1 className=\"login-main-heading\">\n                                <img src={logo} alt=\"logo\" className=\"logo\" /> Utsav\n                            </h1>\n                            <h4 style={{ color: \"grey\" }}>Recent logins</h4>\n                            <p style={{ color: \"grey\" }}>Click your picture or add an account</p>\n                            <div className=\"recent-login\"> */}\n                                {/*max two login cards can be added. Don't add more than 2 login cards.\n                            Fetch the data from database and add profile pic path in \"imgsrc\" and name in \"title\".\n                            And the link in \"link\"*/}\n                                {/* <LoginCard imgsrc={harsh} title=\"Harsh Gohil\" uid=\"0001\" />\n                                <LoginCard imgsrc={mehul} title=\"Mehul Bhai\" uid=\"0002\" />\n                                <div className=\"add-account\">\n                                    <a href=\"/register\">\n                                        <AddCircleIcon fontSize=\"large\" />\n                                    </a>\n                                    <Link to=\"/register\">\n                                        <p className=\"add-account-text\">Add account</p>\n                                    </Link>\n                                </div>\n                            </div>\n                        </div> */}\n                        {/* <div className=\"col-lg-2\">\n                            <br />\n                        </div> */}\n                        \n                        <div data-aos=\"flip-right\">\n                            <div className=\"login\">\n                                \n                                <div className=\"login__container\">\n                                    <img src={logo} id=\"flogo\"/>\n                                    <p id=\"fname\">UTSAV</p>\n                                    <p id=\"ftext\">Let's explore more of India</p>\n                                    <br/>\n                                    <p id=\"fjoin\">Join the <span id=\"tagging\">UTSAV</span></p>\n                                    \n                                    <input className=\"email\" onChange={(e) => setEmail(e.target.value)} type=\"text\" placeholder=\"Enter your Email\" />\n                                \n                                \n                                    <input className=\"pass\" onChange={(e) => setPassword(e.target.value)} type=\"password\" placeholder=\"Enter Password\" />\n                                    <a href=\"/\" style={{color:\"#cdcdcd\"}} id=\"forgot\">Forgot password?</a>\n                                \n                                \n                                    <button type=\"submit\" onClick={login} className=\"login__login btn btn-warning\">Login</button>\n                                    <p id=\"foption\">Or</p>\n                                    <button type=\"button\" class=\"btn btn-warning \" id=\"fgoogle\" onClick={google_login}>Login with <img src={google_icon} id=\"g_icon\"/></button>\n                                    <div id=\"no_ac1\"><p id=\"no_ac\">Don't have account? <a href=\"/register\">Signup</a></p></div>\n                                                                        \n                                </div>\n                            </div>\n                        </div>\n                        {/* <div className=\"col-lg-1\">\n                            <br />\n                        </div>\n                    </div> */}\n                {/* </div> */}\n                {/* <Footer /> */}\n            </div>\n        </>\n    )\n}\n\nexport default Login\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Registeration\\Pujoregister.js",["261","262"],"import React, { useState, useCallback, useRef, useEffect } from \"react\";\nimport ReactCrop from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\nimport \"./styles/pujoregister.css\";\nimport { storage, db } from \"../config/firebase.js\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport Modal from \"@material-ui/core/Modal\";\nimport styles from \"../Utilities/editimage.module.css\";\nimport swal from \"sweetalert\";\nimport logo from \"../images/logo.png\";\nimport cities from \"../data/cities\";\n\nimport states from \"../data/states\";\nimport { useHistory } from \"react-router\";\n\nfunction option_state(currentvalue) {\n  return (\n    <option key={currentvalue.id} value={currentvalue.name}>\n      {currentvalue.name}\n    </option>\n  );\n}\nfunction option_city(currentvalue) {\n  return (\n    <option key={currentvalue.id} value={currentvalue.name}>\n      {currentvalue.name}\n    </option>\n  );\n}\n// function option_city(currentvalue) {\n//     return (\n//         <option key={currentvalue.id} value={currentvalue.name}>{currentvalue.name}</option>\n//     );\n// }\nfunction PujoRegister(props) {\n  const history = useHistory();\n  const googleSignin =\n    history.location.state === undefined || history.location.state === null\n      ? null\n      : history.location.state.googleSignin;\n\n  const [name, setName] = useState(\"\");\n  const type = \"com\";\n  const email = props.user.email;\n  const [category, setCategory] = useState();\n  const [description, setDescription] = useState(\"\");\n  const [addressline, setAddress] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [pincode, setPincode] = useState(\"\");\n  const [contact, setContact] = useState(\"\");\n  const [state, setState] = useState(\"\");\n  const [dp, setDp] = useState(\n    \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png\"\n  );\n  const coverpic =\n    \"https://firebasestorage.googleapis.com/v0/b/utsav-def1e.appspot.com/o/images%2Fcover.png?alt=media&token=ff48d550-0bb4-4b52-90c2-faf0fe72282d\";\n  const [small_city, setSmallCity] = useState(\"\");\n  const [small_state, setSmallState] = useState(\"\");\n  const [small_name, setSmallName] = useState(\"\");\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const [upImg, setUpImg] = useState();\n  const [openEditModal, setOpenEditModal] = useState(false);\n  const [filename, setFilename] = useState(\"\");\n  const [progress, setProgress] = useState(0);\n  const [showProgress, setShowProgress] = useState(false);\n\n  const startCrop = (file) => {\n    if (file) {\n      const reader = new FileReader();\n      reader.addEventListener(\"load\", () => setUpImg(reader.result));\n      reader.readAsDataURL(file);\n    }\n  };\n\n  function EditModal() {\n    const imgRef = useRef(null);\n    const previewCanvasRef = useRef(null);\n    const [crop, setCrop] = useState({ unit: \"%\", width: 30, aspect: 1 });\n    const [completedCrop, setCompletedCrop] = useState(null);\n\n    const onLoad = useCallback((img) => {\n      imgRef.current = img;\n    }, []);\n\n    useEffect(() => {\n      if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n        return;\n      }\n\n      const image = imgRef.current;\n      const canvas = previewCanvasRef.current;\n      const crop = completedCrop;\n\n      const scaleX = image.naturalWidth / image.width;\n      const scaleY = image.naturalHeight / image.height;\n      const ctx = canvas.getContext(\"2d\");\n      const pixelRatio = window.devicePixelRatio;\n\n      canvas.width = crop.width * pixelRatio;\n      canvas.height = crop.height * pixelRatio;\n\n      ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n      ctx.imageSmoothingQuality = \"high\";\n\n      ctx.drawImage(\n        image,\n        crop.x * scaleX,\n        crop.y * scaleY,\n        crop.width * scaleX,\n        crop.height * scaleY,\n        0,\n        0,\n        crop.width,\n        crop.height\n      );\n    }, [completedCrop]);\n\n    function finishCrop() {\n      setOpenEditModal(false);\n      handleImageUpload(previewCanvasRef.current);\n    }\n\n    return (\n      <>\n        <Modal open={openEditModal}>\n          <>\n            <div className={styles.main}>\n              <div className={styles.cropper}>\n                <h5>Edit Image</h5>\n\n                <ReactCrop\n                  src={upImg}\n                  onImageLoaded={onLoad}\n                  crop={crop}\n                  keepSelection={true}\n                  onChange={(c) => setCrop(c)}\n                  onComplete={(c) => setCompletedCrop(c)}\n                  style={{\n                    maxWidth: \"60vw\",\n                    maxHeight: \"60vh\",\n                    overflow: \"scroll\",\n                  }}\n                />\n\n                <div className={styles.buttons}>\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-success\"\n                    disabled={!completedCrop?.width || !completedCrop?.height}\n                    onClick={finishCrop}\n                  >\n                    Done\n                  </button>\n                  <button\n                    className=\"btn btn-warning ml-4\"\n                    onClick={() => setOpenEditModal(false)}\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div className={styles.canvas}>\n              <canvas\n                ref={previewCanvasRef}\n                // Rounding is important so the canvas width and height matches/is a multiple for sharpness.\n                style={{\n                  width: Math.round(completedCrop?.width ?? 0),\n                  height: Math.round(completedCrop?.height ?? 0),\n                }}\n              />\n            </div>\n          </>\n        </Modal>\n      </>\n    );\n  }\n\n  function Progress() {\n    return (\n      <Modal open={showProgress}>\n        <div className={styles.progress}>\n          <div className={styles.progressBarContainer}>\n            <progress\n              value={progress}\n              max=\"100\"\n              className={styles.progressBar}\n            />\n            <p>Uploading...</p>\n          </div>\n        </div>\n      </Modal>\n    );\n  }\n\n  function getImageData(canvas, fileName) {\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(\n        (blob) => {\n          blob.name = fileName;\n          resolve(blob);\n        },\n        \"image/jpeg\",\n        1\n      );\n    });\n  }\n\n  const handleImageUpload = async (canvas) => {\n    const file = await getImageData(canvas, filename);\n\n    if (filename && file) {\n      const uploadTask = storage.ref(`images/${filename}`).put(file);\n      setProgress(0);\n      setShowProgress(true);\n      uploadTask.on(\n        \"state_changed\",\n        (snapshot) => {\n          const progress = Math.round(\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n          );\n          setProgress(progress);\n        },\n        (error) => {\n          console.log(error);\n          alert(error.message);\n        },\n        () => {\n          storage\n            .ref(\"images\")\n            .child(filename)\n            .getDownloadURL()\n            .then((url) => {\n              setDp(url);\n              setShowProgress(false);\n            });\n        }\n      );\n    }\n  };\n\n  const handleChange = (e) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const fname = e.target.files[0].name;\n      if (\n        fname.endsWith(\".jpg\") ||\n        fname.endsWith(\".jpeg\") ||\n        fname.endsWith(\".png\")\n      ) {\n        let name = e.target.files[0].name;\n        name = name.substring(0, name.lastIndexOf(\".\")) + \".png\";\n        //console.log(name);\n        startCrop(e.target.files[0]);\n        setOpenEditModal(true);\n        setFilename(name);\n      } else {\n        swal(\"Oops!\", \"Invalid format!\", \"error\");\n      }\n    }\n  };\n\n  const handleEditPicture = () => {\n    const fileInput = document.getElementById(\"input\");\n    fileInput.value = \"\";\n    fileInput.click();\n  };\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n\n    db.collection(\"Users\")\n      .doc(props.user.uid)\n      .set({\n        name: name,\n        email: email,\n        category: category,\n        description: description,\n        addressline: addressline,\n        city: city,\n        pincode: pincode,\n        contact: contact,\n        state: state,\n        dp: dp,\n        coverpic: coverpic,\n        type: type,\n        upvotes: 0,\n        follows: 0,\n        small_city: small_city,\n        small_name: small_name,\n        small_state: small_state,\n        visits: 0,\n        lastVisitTime: null,\n      })\n      .then(function () {\n        history.replace({\n          pathname: \"/\",\n          state: { googleSignin: googleSignin },\n        });\n      })\n      .catch(function (error) {\n        console.error(\"Error writing document: \", error);\n      });\n  };\n\n  return (\n    <div className=\"pujo-register\">\n      <div id=\"pujo_register_label\"></div>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div\n            className=\"prn_form\"\n            data-aos=\"fade-in\"\n            style={{ marginBottom: \"40px\" }}\n          >\n            <div id=\"pr_form_inside\">\n              <div id=\"pr_form_head_logo\">\n                <img src={logo} id=\"pform_logo\" alt=\"form-logo\" />\n                <div id=\"pform_name\">\n                  <p id=\"pform_logo_name\">Utsav</p>\n                  <p id=\"pr_explore_line\">Let's Explore more of India</p>\n                </div>\n              </div>\n              <form\n                onSubmit={submitHandler}\n                className=\"community-register-form\"\n              >\n                <br />\n                <div id=\"pform_main\">\n                  <div id=\"pform_fl_right\">\n                    <div className=\"prn_img-holder\">\n                      <img src={dp} alt=\"\" id=\"img\" className=\"pr_img\" />\n                    </div>\n                    <input\n                      className=\"input-outline-disable\"\n                      type=\"file\"\n                      accept=\"image/*\"\n                      name=\"image-upload\"\n                      id=\"input\"\n                      hidden=\"hidden\"\n                      onChange={handleChange}\n                    />\n                    <center id=\"prform_tool\">\n                      {\" \"}\n                      <Tooltip title=\"Edit profile picture\" placement=\"top\">\n                        <IconButton onClick={handleEditPicture} className=\"\">\n                          <EditIcon />\n                        </IconButton>\n                      </Tooltip>\n                    </center>\n                  </div>\n                  <div id=\"pform_fl_left\">\n                    <p id=\"pform_title\">Pujo Registration</p>\n                    <input\n                      placeholder=\"Committee Name\"\n                      value={name}\n                      type=\"text\"\n                      onChange={(e) => {\n                        setName(e.target.value);\n                        setSmallName(e.target.value.toLowerCase());\n                      }}\n                      id=\"name\"\n                      className=\"pform_fname input-outline-disable\"\n                      required\n                    />\n\n                    <input\n                      placeholder={email}\n                      readOnly={true}\n                      className=\"prform_femail input-outline-disable\"\n                    />\n\n                    <br />\n                    <textarea\n                      name=\"description\"\n                      value={description}\n                      className=\"pform_fabout\"\n                      onChange={(e) => setDescription(e.target.value)}\n                      placeholder=\"Tell us about yourself.\"\n                    ></textarea>\n                    <br />\n                    <div id=\"pform_div_fstate\">\n                      <select\n                        name=\"state\"\n                        value={state}\n                        className=\"pform_fstate\"\n                        onChange={(e) => {\n                          setState(e.target.value);\n                          setSmallState(e.target.value.toLowerCase());\n                        }}\n                      >\n                        <option value=\"\" id=\"pr_optional\" disabled selected>\n                          Choose State\n                        </option>\n                        {states.map(option_state)}\n                      </select>\n                    </div>\n\n                    <div id=\"pform_div_fcity\">\n                      <select\n                        name=\"city\"\n                        className=\"pform_fcity\"\n                        onChange={(e) => {\n                          setCity(e.target.value);\n                          setSmallCity(e.target.value.toLowerCase());\n                          console.log(e.target.value);\n                        }}\n                        required\n                      >\n                        <input\n                          className=\"input-outline-disable\"\n                          type=\"text\"\n                          placeholder=\"Choose city\"\n                          onChange={(event) => {\n                            setSearchTerm(event.target.value);\n                          }}\n                        />\n                        {/* <option value=\"\">City</option> */}\n                        <option value=\"\" id=\"pr_optional\" disabled selected>\n                          Choose City\n                        </option>\n                        {cities\n                          .filter((val) => {\n                            if (searchTerm == \"\") {\n                              return val;\n                            } else if (\n                              val.name\n                                .toLowerCase()\n                                .includes(searchTerm.toLowerCase())\n                            ) {\n                              return val;\n                            }\n                          })\n                          .map(option_city)}\n                      </select>\n                    </div>\n\n                    <input\n                      type=\"text\"\n                      placeholder=\"Address line\"\n                      value={addressline}\n                      className=\"pform_faddress input-outline-disable\"\n                      onChange={(e) => setAddress(e.target.value)}\n                      required\n                    />\n\n                    <input\n                      placeholder=\"Pincode\"\n                      name=\"pincode\"\n                      value={pincode}\n                      className=\"pform_fpin input-outline-disable\"\n                      type=\"text\"\n                      onChange={(e) => setPincode(e.target.value)}\n                      id=\"pincode\"\n                    />\n                    <input\n                      placeholder=\"Contact Number\"\n                      className=\"pform_fcontact input-outline-disable\"\n                      value={contact}\n                      type=\"text\"\n                      onChange={(e) => setContact(e.target.value)}\n                      required\n                    />\n                    <div id=\"prn_form_register\">\n                      <b id=\"prn_bold\">Select Category : </b>\n                      <div className=\"prn_register__radiocontainer\">\n                        <div id=\"radio_container_left\">\n                          <div>\n                            <input\n                              type=\"radio\"\n                              name=\"category\"\n                              value=\"Sarbojonin\"\n                              onChange={(e) => setCategory(e.target.value)}\n                              required\n                            />{\" \"}\n                            Sarbojonin{\" \"}\n                          </div>\n                          <div>\n                            <input\n                              type=\"radio\"\n                              name=\"category\"\n                              value=\"Bonedi Bari\"\n                              onChange={(e) => setCategory(e.target.value)}\n                            />{\" \"}\n                            Bonedi Bari{\" \"}\n                          </div>\n                          <div>\n                            <input\n                              type=\"radio\"\n                              name=\"category\"\n                              value=\"Housing Complex\"\n                              onChange={(e) => setCategory(e.target.value)}\n                            />{\" \"}\n                            Housing Complex{\" \"}\n                          </div>\n                        </div>\n                        <div id=\"radio_container_right\">\n                          <div>\n                            <input\n                              type=\"radio\"\n                              name=\"category\"\n                              value=\"Math/ Mission\"\n                              onChange={(e) => setCategory(e.target.value)}\n                            />{\" \"}\n                            Math/ Mission{\" \"}\n                          </div>\n                          <div>\n                            <input\n                              type=\"radio\"\n                              name=\"category\"\n                              value=\"Prabashi\"\n                              onChange={(e) => setCategory(e.target.value)}\n                            />{\" \"}\n                            Prabashi{\" \"}\n                          </div>\n                          <div>\n                            <input\n                              type=\"radio\"\n                              name=\"category\"\n                              value=\"Others\"\n                              onChange={(e) => setCategory(e.target.value)}\n                            />{\" \"}\n                            Others{\" \"}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div id=\"prn_button_form\">\n                    <button\n                      type=\"submit\"\n                      className=\"btn btn-outline-success pform_fbutton\"\n                    >\n                      Register\n                    </button>\n                  </div>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n      <EditModal />\n      <Progress />\n    </div>\n  );\n}\n\nexport default PujoRegister;\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Registeration\\Individualregister.js",["263","264","265","266"],"import React, { useState, useCallback, useRef, useEffect } from \"react\";\nimport ReactCrop from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\nimport \"./styles/individualregister.css\";\nimport { storage, db } from \"../config/firebase.js\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport logo from \"../images/logo.png\";\nimport swal from \"sweetalert\";\nimport Modal from \"@material-ui/core/Modal\";\nimport styles from \"../Utilities/editimage.module.css\";\nimport cities from \"../data/cities\";\nimport states from \"../data/states\";\nimport { useHistory } from \"react-router\";\n\nfunction option_state(currentvalue) {\n  return (\n    <option key={currentvalue.id} value={currentvalue.name}>\n      {currentvalue.name}\n    </option>\n  );\n}\nvar id_fetch = 1;\n\nfunction IndividualRegister(props) {\n  const history = useHistory();\n  const googleSignin =\n    history.location.state === undefined || history.location.state === null\n      ? null\n      : history.location.state.googleSignin;\n\n  const [name, setName] = useState(\"\");\n  const type = \"indi\";\n  const email = props.user.email;\n  const [gender, setGender] = useState(\"\");\n  const [about, setAbout] = useState(\"\");\n  const [addressline, setAddress] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [pincode, setPincode] = useState(\"\");\n  const [contact, setContact] = useState(\"\");\n  const [state, setState] = useState(\"\");\n  const [dp, setDp] = useState(\n    \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png\"\n  );\n  const coverpic =\n    \"https://firebasestorage.googleapis.com/v0/b/utsav-def1e.appspot.com/o/images%2Fcover.png?alt=media&token=ff48d550-0bb4-4b52-90c2-faf0fe72282d\";\n  const [small_city, setSmallCity] = useState(\"\");\n  const [small_state, setSmallState] = useState(\"\");\n  const [small_name, setSmallName] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const [upImg, setUpImg] = useState();\n  const [openEditModal, setOpenEditModal] = useState(false);\n  const [filename, setFilename] = useState(\"\");\n  const [progress, setProgress] = useState(0);\n  const [showProgress, setShowProgress] = useState(false);\n\n  const startCrop = (file) => {\n    if (file) {\n      const reader = new FileReader();\n      reader.addEventListener(\"load\", () => setUpImg(reader.result));\n      reader.readAsDataURL(file);\n    }\n  };\n\n  function EditModal() {\n    const imgRef = useRef(null);\n    const previewCanvasRef = useRef(null);\n    const [crop, setCrop] = useState({ unit: \"%\", width: 30, aspect: 1 });\n    const [completedCrop, setCompletedCrop] = useState(null);\n\n    const onLoad = useCallback((img) => {\n      imgRef.current = img;\n    }, []);\n\n    useEffect(() => {\n      if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n        return;\n      }\n\n      const image = imgRef.current;\n      const canvas = previewCanvasRef.current;\n      const crop = completedCrop;\n\n      const scaleX = image.naturalWidth / image.width;\n      const scaleY = image.naturalHeight / image.height;\n      const ctx = canvas.getContext(\"2d\");\n      const pixelRatio = window.devicePixelRatio;\n\n      canvas.width = crop.width * pixelRatio;\n      canvas.height = crop.height * pixelRatio;\n\n      ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n      ctx.imageSmoothingQuality = \"high\";\n\n      ctx.drawImage(\n        image,\n        crop.x * scaleX,\n        crop.y * scaleY,\n        crop.width * scaleX,\n        crop.height * scaleY,\n        0,\n        0,\n        crop.width,\n        crop.height\n      );\n    }, [completedCrop]);\n\n    function finishCrop() {\n      setOpenEditModal(false);\n      handleImageUpload(previewCanvasRef.current);\n    }\n\n    return (\n      <>\n        <Modal open={openEditModal}>\n          <>\n            <div className={styles.main}>\n              <div className={styles.cropper}>\n                <h5>Edit Image</h5>\n\n                <ReactCrop\n                  src={upImg}\n                  onImageLoaded={onLoad}\n                  crop={crop}\n                  keepSelection={true}\n                  onChange={(c) => setCrop(c)}\n                  onComplete={(c) => setCompletedCrop(c)}\n                  style={{\n                    maxWidth: \"60vw\",\n                    maxHeight: \"60vh\",\n                    overflow: \"scroll\",\n                  }}\n                />\n\n                <div className={styles.buttons}>\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-success\"\n                    disabled={!completedCrop?.width || !completedCrop?.height}\n                    onClick={finishCrop}\n                  >\n                    Done\n                  </button>\n                  <button\n                    className=\"btn btn-warning ml-4\"\n                    onClick={() => setOpenEditModal(false)}\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div className={styles.canvas}>\n              <canvas\n                ref={previewCanvasRef}\n                // Rounding is important so the canvas width and height matches/is a multiple for sharpness.\n                style={{\n                  width: Math.round(completedCrop?.width ?? 0),\n                  height: Math.round(completedCrop?.height ?? 0),\n                }}\n              />\n            </div>\n          </>\n        </Modal>\n      </>\n    );\n  }\n\n  function Progress() {\n    return (\n      <Modal open={showProgress}>\n        <div className={styles.progress}>\n          <div className={styles.progressBarContainer}>\n            <progress\n              value={progress}\n              max=\"100\"\n              className={styles.progressBar}\n            />\n            <p>Uploading...</p>\n          </div>\n        </div>\n      </Modal>\n    );\n  }\n\n  function getImageData(canvas, fileName) {\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(\n        (blob) => {\n          blob.name = fileName;\n          resolve(blob);\n        },\n        \"image/jpeg\",\n        1\n      );\n    });\n  }\n\n  const handleImageUpload = async (canvas) => {\n    const file = await getImageData(canvas, filename);\n\n    if (filename && file) {\n      const uploadTask = storage.ref(`images/${filename}`).put(file);\n      setProgress(0);\n      setShowProgress(true);\n      uploadTask.on(\n        \"state_changed\",\n        (snapshot) => {\n          const progress = Math.round(\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n          );\n          setProgress(progress);\n        },\n        (error) => {\n          console.log(error);\n          alert(error.message);\n        },\n        () => {\n          storage\n            .ref(\"images\")\n            .child(filename)\n            .getDownloadURL()\n            .then((url) => {\n              setDp(url);\n              setShowProgress(false);\n            });\n        }\n      );\n    }\n  };\n\n  const handleChange = (e) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const fname = e.target.files[0].name;\n      if (\n        fname.endsWith(\".jpg\") ||\n        fname.endsWith(\".jpeg\") ||\n        fname.endsWith(\".png\")\n      ) {\n        let name = e.target.files[0].name;\n        name = name.substring(0, name.lastIndexOf(\".\")) + \".png\";\n        //console.log(name);\n        startCrop(e.target.files[0]);\n        setOpenEditModal(true);\n        setFilename(name);\n      } else {\n        swal(\"Oops!\", \"Invalid format!\", \"error\");\n      }\n    }\n  };\n\n  const handleEditPicture = () => {\n    const fileInput = document.getElementById(\"input\");\n    fileInput.value = \"\";\n    fileInput.click();\n  };\n\n  function current_index(e) {\n    states.forEach((item) => {\n      if (item.name === e.target.value) {\n        id_fetch = item.id;\n      }\n    });\n\n    setState(e.target.value);\n    setSmallState(e.target.value.toLowerCase());\n  }\n  // var dis=`dist${id_fetch}`;\n  function option_city(currentvalue) {\n    return (\n      <option key={currentvalue.id} value={currentvalue.name}>\n        {currentvalue.name}\n      </option>\n    );\n  }\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n\n    db.collection(\"Users\")\n      .doc(props.user.uid)\n      .set({\n        name: name,\n        email: email,\n        gender: gender,\n        about: about,\n        addressline: addressline,\n        city: city,\n        pincode: pincode,\n        contact: contact,\n        state: state,\n        dp: dp,\n        coverpic: coverpic,\n        type: type,\n        small_city: small_city,\n        small_name: small_name,\n        small_state: small_state,\n        follows: 0,\n        visits: 0,\n        lastVisitTime: null,\n      })\n      .then(function () {\n        history.replace({\n          pathname: \"/\",\n          state: { googleSignin: googleSignin },\n        });\n      })\n      .catch(function (error) {\n        console.error(\"Error writing document: \", error);\n      });\n  };\n\n  return (\n    <div className=\"individual-register\">\n      <div id=\"ir_register_label\"></div>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div\n            className=\"ir_form\"\n            data-aos=\"fade-in\"\n            style={{ marginBottom: \"40px\" }}\n          >\n            <div id=\"ir_form_inside\">\n              <div id=\"ir_form_head_logo\">\n                <img src={logo} id=\"form_logo\" />\n                <div id=\"form_name\">\n                  <p id=\"form_logo_name\">Utsav</p>\n                  <p id=\"r_explore_line\">Let's Explore more of India</p>\n                </div>\n              </div>\n\n              <form\n                onSubmit={submitHandler}\n                className=\"individual-register-form\"\n              >\n                <div id=\"form_main\">\n                  <div id=\"form_fl_right\">\n                    <div className=\"img-holder\">\n                      <img src={dp} alt=\"\" id=\"img\" className=\"ir_img\" />\n                      <center id=\"irform_tool\">\n                        {\" \"}\n                        <Tooltip title=\"Edit profile picture\" placement=\"top\">\n                          <IconButton onClick={handleEditPicture} className=\"\">\n                            <EditIcon />\n                          </IconButton>\n                        </Tooltip>\n                      </center>\n                    </div>\n                    <input\n                      type=\"file\"\n                      accept=\"image/*\"\n                      name=\"image-upload\"\n                      id=\"input\"\n                      hidden=\"hidden\"\n                      onChange={handleChange}\n                    />\n                  </div>\n                  <div id=\"form_fl_left\">\n                    <p id=\"ir_form_title\">Join the Devin Comunity</p>\n                    <input\n                      placeholder=\"Full Name\"\n                      value={name}\n                      type=\"text\"\n                      onChange={(e) => {\n                        setName(e.target.value);\n                        setSmallName(e.target.value.toLowerCase());\n                      }}\n                      id=\"name\"\n                      className=\"form_fname input-outline-disable\"\n                      required\n                    />\n                    <br />\n\n                    <input\n                      placeholder={email}\n                      className=\"form_femail input-outline-disable\"\n                      readOnly={true}\n                    />\n\n                    <div className=\"form-group\">\n                      <div className=\"register__radiocontainer\">\n                        <span>\n                          <b id=\"irn_bold\">Gender : </b>\n                        </span>\n                        <span id=\"register__radiocontainer_span\">\n                          <input\n                            type=\"radio\"\n                            name=\"gender\"\n                            value=\"Male\"\n                            onChange={(e) => setGender(e.target.value)}\n                            required\n                          />{\" \"}\n                          Male\n                        </span>\n                        <span id=\"register__radiocontainer_span\">\n                          <input\n                            type=\"radio\"\n                            name=\"gender\"\n                            value=\"Female\"\n                            onChange={(e) => setGender(e.target.value)}\n                          />{\" \"}\n                          Female\n                        </span>\n                        <span id=\"register__radiocontainer_span\">\n                          <input\n                            type=\"radio\"\n                            name=\"gender\"\n                            value=\"Other\"\n                            onChange={(e) => setGender(e.target.value)}\n                          />{\" \"}\n                          Other\n                        </span>\n                      </div>\n                    </div>\n                    <textarea\n                      name=\"about\"\n                      value={about}\n                      placeholder=\"Tell us about yourself.\"\n                      className=\"form_fabout\"\n                      onChange={(e) => setAbout(e.target.value)}\n                    ></textarea>\n                    <br />\n                    <div id=\"form_div_fstate\">\n                      <select\n                        name=\"state\"\n                        value={state}\n                        className=\"form_fstate\"\n                        onChange={current_index}\n                      >\n                        <option value=\"\" id=\"ir_optional\" disabled selected>\n                          Choose State\n                        </option>\n                        {states.map(option_state)}\n                      </select>\n                    </div>\n\n                    <div id=\"form_div_fcity\">\n                      <select\n                        name=\"city\"\n                        className=\"form_fcity\"\n                        onChange={(e) => {\n                          setCity(e.target.value);\n                          setSmallCity(e.target.value.toLowerCase());\n                          console.log(e.target.value);\n                        }}\n                        required\n                      >\n                        <input\n                          type=\"text\"\n                          placeholder=\"Choose city\"\n                          onChange={(event) => {\n                            setSearchTerm(event.target.value);\n                          }}\n                        ></input>\n                        {/* <option value=\"\">City</option> */}\n                        <option value=\"\" id=\"ir_optional\" disabled selected>\n                          Choose City\n                        </option>\n                        {cities\n                          .filter((val) => {\n                            if (searchTerm == \"\") {\n                              return val;\n                            } else if (\n                              val.name\n                                .toLowerCase()\n                                .includes(searchTerm.toLowerCase())\n                            ) {\n                              return val;\n                            }\n                          })\n                          .map(option_city)}\n                      </select>\n                    </div>\n                    <br />\n                    <input\n                      type=\"text\"\n                      placeholder=\"Address line\"\n                      className=\"form_faddress input-outline-disable\"\n                      value={addressline}\n                      onChange={(e) => setAddress(e.target.value)}\n                      required\n                    />\n                    <input\n                      placeholder=\"Pincode\"\n                      name=\"pincode\"\n                      className=\"form_fpin input-outline-disable\"\n                      value={pincode}\n                      type=\"text\"\n                      onChange={(e) => setPincode(e.target.value)}\n                      id=\"pincode\"\n                    />\n                    <input\n                      placeholder=\"Contact\"\n                      value={contact}\n                      type=\"text\"\n                      className=\"form_fcontact input-outline-disable\"\n                      onChange={(e) => setContact(e.target.value)}\n                      required\n                    />\n                  </div>\n\n                  <div id=\"irn_button_form\">\n                    <button\n                      type=\"submit\"\n                      className=\"btn btn-outline-success form_fbutton\"\n                    >\n                      Register\n                    </button>\n                  </div>\n                </div>\n              </form>\n            </div>\n            {/* <div className=\"col-lg-2\"></div> */}\n          </div>\n        </div>\n        <EditModal />\n        <Progress />\n      </div>\n    </div>\n  );\n}\n\nexport default IndividualRegister;\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Tabs\\CommunityTab.js",["267"],"import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { db } from \"../config/firebase.js\";\nimport { checkUser } from '../Utilities/checkUser';\n\n/* Components */\nimport Navbar from '../Nav/nav.js';\nimport Sidebar1 from '../Sidebars//Sidebar_1.js';\nimport Trending from '../Others/Trending_hashtags.js';\nimport Sidebar2 from '../Sidebars/Sidebar_2.js';\nimport classes from './styles/communitytab.module.css';\n\n\nfunction CommunityTab(props) {\n    const user = props.user;\n    const history = useHistory('');\n    const [communitties, setCommunitties] = useState([]);\n    const [search, setSearch] = useState('');\n    const [searchOption, setSearchOption] = useState('small_name');\n    const [message, setMessage] = useState('');\n    const [showMoreCommunity, setShowMoreCommunity] = useState(true);\n    \n    const lang = props.lang;\n    useEffect(() => {\n        db.collection(\"Users\").where('type', '==', 'com').orderBy(searchOption).limit(12).onSnapshot((snapshot) => {\n            setCommunitties(snapshot.docs.map(doc => ({\n                id: doc.id,\n                data: doc.data(),\n            })));\n        })\n    }, [user, searchOption]);\n\n    if (checkUser(user) === false)\n        history.replace('/login');\n\n    function community(currentValue) {\n\n        if (user.length === 0)\n            return '';\n        else {\n            return (\n                <div key={currentValue.id} className=\"col-lg-4 col-6 p-1\">\n                    <div className={classes.community} onClick={() => viewProfile(currentValue.id)}>\n                        <img src={currentValue.data.coverpic} alt={currentValue.data.name} className={classes.coverPic} />\n                        <div className={classes.title}>\n                            <p>{currentValue.data.name}</p>\n                        </div>\n                        <div>\n                            <img src={currentValue.data.dp} alt=\"dp\" className={classes.dp} />\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n    }\n\n    function viewProfile(uid) {\n        history.push(\"/profile/\" + uid)\n    }\n\n    function SearchOptions(e) {\n        setSearchOption(e.target.attributes.value.value);\n    }\n\n    function SearchFunction(e) {\n        setSearch(e.target.value);\n        setShowMoreCommunity(true);\n    }\n\n    function updateCommunityTab() {\n\n        let last = '';\n        if (searchOption === 'small_name')\n            last = communitties[communitties.length - 1].data.small_name;\n        if (searchOption === 'small_city')\n            last = communitties[communitties.length - 1].data.small_city;\n        if (searchOption === 'small_state')\n            last = communitties[communitties.length - 1].data.small_state;\n\n        setShowMoreCommunity(false);\n        setMessage(\"Loading...\");\n\n        db.collection(\"Users\").where('type', '==', 'com').orderBy(searchOption, 'asc').startAfter(last).limit(6).get()\n            .then((snapshot) => {\n                const array = snapshot.docs.map(doc => ({\n                    id: doc.id,\n                    data: doc.data(),\n                }));\n                if (array.length === 0) {\n                    setMessage('No more community to show.')\n                }\n                else {\n                    setCommunitties([...communitties, ...array]);\n                    setMessage('');\n                    setShowMoreCommunity(true);\n                }\n            });\n    }\n\n    function showMore(entries) {\n\n        if (entries[0] && entries[0].isIntersecting) {\n\n            if (communitties[0])\n                updateCommunityTab();\n        }\n    }\n\n    let options = {\n        rootMargin: '0px',\n        threshold: 0.5\n    }\n\n    const element = document.getElementById('showMoreCommunity');\n    if (element) {\n        let observer = new IntersectionObserver(showMore, options);\n        observer.observe(element);\n    }\n\n    if (communitties) {\n\n        return (\n            <div className={`container-fluid ${classes.communitytab}`}>\n                <Navbar />\n                <div className={classes.main}>\n                    <Sidebar1 user={user} lang={lang}/>\n                    {/* <Trending /> */}\n                    <div className={`container ${classes.communitties}`} >\n                        <div className={classes.searchbar}>\n                            <input type=\"text\" placeholder=\"Search...\" value={search} onChange={SearchFunction} />\n\n                            <div>\n                                <span className={searchOption === \"small_name\" ? classes.active : ''} value=\"small_name\" onClick={SearchOptions}>Name</span>\n                                <span className={searchOption === \"small_city\" ? classes.active : ''} value=\"small_city\" onClick={SearchOptions}>City/District</span>\n                                <span className={searchOption === \"small_state\" ? classes.active : ''} value=\"small_state\" onClick={SearchOptions}>State</span>\n                            </div>\n                        </div>\n                        <hr style={{ margin: 0 }} />\n                        <div className=\"row\">\n                            {communitties.filter((val) => {\n                                if (search === '')\n                                    return val;\n                                else if (searchOption === \"small_name\" && val.data.small_name.includes(search.toLowerCase())) {\n                                    return val;\n                                }\n                                else if (searchOption === \"small_city\" && val.data.small_city.includes(search.toLowerCase())) {\n                                    return val;\n                                }\n                                else if (searchOption === \"small_state\" && val.data.small_state.includes(search.toLowerCase())) {\n                                    return val;\n                                }\n                                return null;\n                            })\n                                .map(community)}\n                        </div>\n                    </div>\n                    <Sidebar2 user={user} lang={lang}/>\n                </div>\n                {showMoreCommunity && <div id='showMoreCommunity'></div>}\n                {message !== '' ? <p>{message}</p> : ''}\n            </div>\n        );\n    }\n    else {\n        return <p className=\"text-center\">Loading...</p>;\n    }\n}\n\nexport default CommunityTab;\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Tabs\\PeopleTab.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Tabs\\ClipsTab.js",["268"],"import React from 'react';\nimport { checkUser } from '../Utilities/checkUser';\n\n/* Components */\nimport Posts from '../Posts/Posts.js';\nimport Navbar from '../Nav/nav.js';\nimport Sidebar1 from '../Sidebars/Sidebar_1.js';\nimport Trending from '../Others/Trending_hashtags.js';\nimport Sidebar2 from '../Sidebars/Sidebar_2.js';\nimport classes from './styles/clipstab.module.css';\nimport { useHistory } from 'react-router';\n\nfunction ClipsTab(props) {\n\n    const history = useHistory();\n    const user = props.user;\n    const lang = props.lang;\n    if (checkUser(user) === false)\n        history.replace('/login');\n\n    if (user.length === 0)\n        return '';\n    else {\n        return (\n            <div className={`container-fluid ${classes.clipstab}`}>\n                <Navbar />\n                <div className={classes.main}>\n                    <Sidebar1 user={user} lang={lang} />\n                    {/* <Trending /> */}\n                    <div className={classes.posts}>\n                        <Posts user={user} posttype=\"\" clips={true} lang={lang}/>\n                    </div>\n                    <Sidebar2 user={user} lang={lang}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ClipsTab;\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Tabs\\Home.js",["269","270","271"],"import React, { useState, useEffect, Component } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { db } from '../config/firebase.js';\nimport { checkUser } from '../Utilities/checkUser';   \n/* Components */\nimport Posts from '../Posts/Posts.js';\nimport Navbar from '../Nav/nav.js';\nimport Sidebar1 from '../Sidebars/Sidebar_1.js';\nimport Trending from '../Others/Trending_hashtags.js';\nimport Sidebar2 from '../Sidebars/Sidebar_2.js';\nimport Carousel from '../Carousel//Carousel.js';\nimport Preloader from '../Others/Preloader';\nimport './styles/Home.css';\n\nfunction Home(props) {\n\n    const [user, setUser] = useState(props.user);\n    const [splashVisible, setSplashVisible] = useState(true);\n    const [username, setUsername] = useState(localStorage.getItem(\"Username\"));\n    const history = useHistory();\n    const flag = (history.location.state === undefined || history.location.state === null) ? null : history.location.state.googleSignin;\n    const lang = props.lang;\n    // console.log(user);\n    // console.log(localStorage.getItem(\"Username\"));\n    function Hide_Splash_Screen() {  \n       setSplashVisible(false); \n      }  \n    useEffect(() => {\n\n        setUser(props.user);\n    }, [props.user]);\n    useEffect(() => {\n        setTimeout(function(){  \n         Hide_Splash_Screen();  \n          }, 5000);  \n    })\n    useEffect(() => {\n\n        if (user && user.uid !== '' && localStorage.getItem(\"Username\") === null) {\n            db.collection(\"Users\").doc(user.uid).get()\n                .then((doc) => {\n                    if (doc.exists) {\n                        const data = doc.data();\n\n                        localStorage.setItem('Username', data.name);\n                        localStorage.setItem('Dp', data.dp);\n                        localStorage.setItem('type', data.type);\n                        if (data.type === 'indi')\n                            localStorage.setItem('gender', data.gender);\n                        if (data.type === 'com')\n                            localStorage.setItem('upvotes', data.upvotes);\n                        localStorage.setItem('city', data.city);\n                        localStorage.setItem('visits', data.visits);\n                        localStorage.setItem('follows', data.follows);\n                        setUsername(data.name);\n                    }\n                });\n        }\n    }, [user]);\n    \n    if (user && username) {\n\n        window.history.pushState(null, null, window.location.href);\n        window.onpopstate = function (event) {\n            history.go(1);\n        };\n\n        return (\n            <>\n            \n            <div className=\"container-fluid home\">\n                <Navbar user={user} />\n                <div className=\"home-main\">\n                    <Sidebar1 user={user} lang={lang} />\n                    <div className=\"app__posts\">\n                        {/* <Carousel /> */}\n                        <Posts user={user} posttype=\"com\" clips={false} lang={lang} />\n                    </div>\n                    <Sidebar2 user={user} lang={lang} />\n                </div>\n            </div>\n            </>\n            \n        );\n    }\n\n    if (flag === null && user.length === 0) {\n        history.replace('/onboarding');\n        return \"\"\n    }\n    else if (flag) {\n        if (checkUser(user) === false)\n            history.replace('/onboarding');\n\n        if (user.length === 0)\n            return '';\n        else {\n\n            window.history.pushState(null, null, window.location.href);\n            window.onpopstate = function (event) {\n                history.go(1);\n            };\n\n            return (\n                <>\n                 \n                <div className=\"container-fluid home\">\n                    <Navbar user={user} />\n\n                    <div className=\"home-main\">\n                        <Sidebar1 user={user} lang={lang} />\n                        <Trending lang={lang} />\n\n                        <div className=\"app__posts\">\n                            {/* <Carousel /> */}\n                            <Posts user={user} posttype=\"com\" clips={false} lang={lang} />\n                        </div>\n                        <Sidebar2 user={user} lang={lang} />\n                    </div>\n                </div>\n                </>\n            );\n        }\n    }\n    else if (!user || username === null) {\n        return (\n            <>\n            <Preloader />\n            </>\n        );\n    }\n}\n\nexport default Home;\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Static\\ContactUs.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Static\\AboutUs.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Posts\\PostPage.js",["272","273","274","275","276","277"],"import React, { useEffect, useState } from 'react';\nimport { auth, db } from \"../config/firebase.js\";\nimport { getPreviewFromContent, getLinkPreview } from 'link-preview-js';\n\nimport Post from './Post';\nimport { useHistory } from 'react-router';\nconst axios = require('axios');\n\n\nexport default function PostPage(props) {\n  //console.log(JSON.stringify(props)+\"<-props\")\n  const history = useHistory();\n  const notifid = props.location.state ? history.location.state.notifid : \"\";\n  const [user, setuser] = useState('');\n  const origusername = localStorage.getItem('Username');\n  const origuserdp = localStorage.getItem('Dp');\n  const type = localStorage.getItem('type');\n \n  const [postImg, setPostImg] = useState([]);\n  const [postvideo, setPostvideo] = useState('');\n  const [postUserId, setPostUserId] = useState(\"\");\n  const [postTxt, setPostTxt] = useState(\"\");\n  const [ts, setTs] = useState(0);\n  const [postlikecount, setPostlikecount] = useState([]);\n  const [commentcount, setCommentcount] = useState(0);\n  const [postUserAbout, setPostUserAbout] = useState(\"\");\n  const [postUserName, setPostUserName] = useState(\"\");\n  const [postUserDp, setPostUserDp] = useState('');\n  const [message, setMessage] = useState('Loading...');\n\n  const postid = props.match.params.postid;\n  const clip = props.match.params.clip;\n  const clips = clip === 'true' ? true : false;\n\n  const collection = clips ? 'Clips' : 'Feeds';\n  useEffect(() => {\n    if(notifid !== \"\")\n    {\n      db.collection(\"Users\").doc(\"rMUtQ61U22OrVA2Aw9FP37ASqUc2\").collection(\"notifications\").doc(notifid).update({\n        seen:\"yes\"\n    });\n    }\n  })\n  useEffect(() => {\n    async function getData() {\n      const postdata = await db.collection(collection).doc(postid).get();\n      if (postdata.exists) {\n        let data = postdata.data();\n        if (clips)\n          setPostvideo(data.video);\n        else\n          setPostImg(data.img);\n\n        setPostTxt(data.txt);\n        setPostUserId(data.uid);\n        setPostlikecount(data.likecount);\n        setCommentcount(data.cmtNo);\n        setPostUserName(data.username);\n        setPostUserDp(data.userdp);\n        setTs(data.ts);\n        setMessage('');\n      }\n      else {\n        setMessage('No such post exists');\n      }\n      if (postdata != null && postUserId !== \"\") {\n        const userdata = await db.collection(\"Users\").doc(postUserId).get()\n\n        if (userdata.exists) {\n          let data = userdata.data()\n          setPostUserAbout(data.about);\n        }\n\n      }\n    }\n    getData();\n  }, [postid, postUserId, clips, collection]);\n\n  auth.onAuthStateChanged((authUser) => {\n    if (authUser) {\n      setuser(authUser)\n    } else {\n      setuser(false);\n    }\n  })\n\n  var titlecount = 0, descriptioncount = 0, urlcount = 0, imgcount = 0;\n  //og:title,og:description,og:url,og:image,og:image:secure_url\n\n  if (titlecount === 0 && postUserName !== \"\" && postUserAbout !== \"\") {\n    var metatitle = document.createElement(\"meta\");\n    var propertytitle = document.createAttribute(\"property\");\n    propertytitle.value = \"og:title\";\n    metatitle.setAttributeNode(propertytitle);\n    var contenttitle = document.createAttribute(\"content\");\n    contenttitle.value = postUserName + \" on applex.in #\" + postUserAbout;\n    metatitle.setAttributeNode(contenttitle);\n    document.getElementsByTagName('head')[0].prepend(metatitle);\n    titlecount = 1;\n  }\n  if (imgcount === 0 && postImg !== \"\") {\n    var metaimg = document.createElement(\"meta\");\n    var propertyimg = document.createAttribute(\"property\");\n    propertyimg.value = \"og:image\";\n    metaimg.setAttributeNode(propertyimg);\n    var contentimg = document.createAttribute(\"content\");\n    contentimg.value = postImg;\n    metaimg.setAttributeNode(contentimg);\n    document.getElementsByTagName('head')[0].prepend(metaimg);\n    imgcount = 1;\n  }\n  if (urlcount === 0 && postid !== \"\") {\n    var metaurl = document.createElement(\"meta\");\n    var propertyurl = document.createAttribute(\"property\");\n    propertyurl.value = \"og:url\";\n    metaurl.setAttributeNode(propertyurl);\n    var contenturl = document.createAttribute(\"content\");\n    contenturl.value = document.location;\n    metaurl.setAttributeNode(contenturl);\n    document.getElementsByTagName('head')[0].prepend(metaurl);\n    urlcount = 1;\n  }\n  //alert(postData.txt);\n  if (descriptioncount === 0 && postTxt !== \"\") {\n\n    var metadesc = document.createElement(\"meta\");\n    var propertydesc = document.createAttribute(\"property\");\n    propertydesc.value = \"og:description\";\n    metadesc.setAttributeNode(propertydesc);\n    var contentdesc = document.createAttribute(\"content\");\n    contentdesc.value = postTxt\n    metadesc.setAttributeNode(contentdesc);\n    document.getElementsByTagName('head')[0].prepend(metadesc);\n    descriptioncount = 1\n  }\n\n  function Test(text) {\n    const detectedUrl = text.match(/(http|https)\\:\\/\\/[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}(\\/\\S*)?/g);\n    //console.log(detectedUrl);\n    // axios.get(\"https://youtu.be/Az-mGR-CehY\").then((res)=>{\n    //   console.log(res);\n    // })\n\n    // if(detectedUrl.length > 0){\n    //   getLinkPreview(\"https://youtu.be/Az-mGR-CehY\", {\n    //     imagesPropertyType: \"og\", // fetches only open-graph images\n    //     headers: {\n    //     \"Access-Control-Allow-Origin\": \"https://youtu.be\"\n    //     }\n    // }).then(data => console.log(data));\n    // }\n  }\n\n  if (message === '') {\n\n    Test(postTxt);\n\n    return (\n\n      <>\n        <Post\n          postId={postid}\n          origuid={user.uid}\n          origusername={origusername}\n          origuserdp={origuserdp}\n          origusertype={type}\n          userId={postUserId}\n          postusername={postUserName}\n          postuserdp={postUserDp}\n          txt={postTxt}\n          img={postImg}\n          ts={ts}\n          video={postvideo}\n          clips={clips}\n          likecount={postlikecount}\n          commentcount={commentcount}\n          viewSinglePost={true}\n        />\n      </>\n    )\n  }\n  else {\n    return (<p className=\"text-center m-4\">{message}</p>)\n  }\n}\n\n/*\n<div>\n      <h1>Details for Link preview for individual post</h1><br></br>\n      <b>Post id:</b>{props.match.params.postid}<br></br>\n      <b>Post image:</b>{postImg}<br></br>\n      <b>Post Text:</b>{postTxt}<br></br>\n      <b>Posted user about:</b>{postUserAbout}<br></br>\n      <b>Posted user name:</b>{postUserName}<br></br>\n      <b>Taken Reference:</b><a href=\"https://andrejgajdos.com/how-to-create-a-link-preview/\">Documentation for Link preview.</a><br></br>\n      <strong>For testing:</strong>Download open graph tool debugger chrome extension\n    </div>\n*/\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Posts\\HashtagFilteredPosts.js",["278"],"import React, { useState, useEffect } from 'react';\nimport { db } from \"../config/firebase.js\";\nimport { useHistory, useParams } from 'react-router-dom';\nimport { checkUser } from '../Utilities/checkUser';\n\nimport Post from '../Posts/Post.js';\nimport Navbar from '../Nav/nav.js';\nimport Sidebar1 from '../Sidebars/Sidebar_1.js';\nimport Sidebar2 from '../Sidebars/Sidebar_2.js';\n\nimport classes from '../Tabs/styles/peopletab.module.css';\n\n\nfunction Posts({ userId, hashtag }) {\n    const [Feeds, setFeeds] = useState([]);\n    const uid = userId;\n    const name = localStorage.getItem(\"Username\");\n    const dp = localStorage.getItem(\"Dp\");\n    const type = localStorage.getItem(\"type\");\n    const [message, setMessage] = useState('');\n    const [showMorePost, setShowMorePost] = useState(true);\n\n\n    // the max. post limit is 4. It need to be changed to 10.\n    useEffect(() => {\n\n        db.collection('Feeds').where(\"tagList\", \"array-contains\", hashtag).orderBy('ts', 'desc').limit(4).onSnapshot(snapshot => {\n            setFeeds(snapshot.docs.map(doc => ({\n                id: doc.id,\n                post: doc.data(),\n            })));\n            setShowMorePost(true);\n        });\n\n    }, []);\n\n    function showMore(entries) {\n\n        if (entries[0] && entries[0].isIntersecting) {\n\n            if (Feeds[0])\n                updateFeeds();\n        }\n    }\n\n    let options = {\n        rootMargin: '0px',\n        threshold: 0.2\n    }\n\n    const element = document.getElementById('showMorePost');\n    if (element) {\n        let observer = new IntersectionObserver(showMore, options);\n        observer.observe(element);\n    }\n\n    function updateFeeds() {\n        const last = Feeds[Feeds.length - 1].post.ts;\n        setShowMorePost(false);\n        //setMessage(\"Loading...\");\n\n        db.collection('Feeds').where(\"tagList\", \"array-contains\", hashtag).orderBy('ts', 'desc').startAfter(last).limit(4).get()\n            .then((snapshot) => {\n                const array = snapshot.docs.map(doc => ({\n                    id: doc.id,\n                    post: doc.data(),\n                }));\n                if (array.length === 0) {\n                    setMessage('No more posts to show.')\n                }\n                else {\n                    setFeeds([...Feeds, ...array]);\n                    setMessage('');\n                    setShowMorePost(true);\n                }\n            });\n    }\n\n\n    if (Feeds[0] && name && dp) {\n        return (\n            <div className=\"Feeds\">\n\n                {\n                    Feeds.map(({ id, post }) => (\n                        <Post\n                            key={id}\n                            postId={id}\n                            origuid={uid}\n                            origusertype={type}\n                            origusername={name}\n                            origuserdp={dp}\n                            userId={post.uid}\n                            postusername={post.username}\n                            postuserdp={post.userdp}\n                            txt={post.txt}\n                            img={post.img}\n                            video={post.video}\n                            clips={false}\n                            likecount={post.likecount}\n                            commentcount={post.cmtNo}\n                        />\n                    ))\n                }\n                <div>\n                    {showMorePost && <div id='showMorePost'>Loading...</div>}\n                    {message !== '' ? <p>{message}</p> : ''}\n                </div>\n            </div>\n        )\n    }\n    else {\n        return (<p>Loading...</p>);\n    }\n}\n\nfunction HashtagFilteredPosts({ user, lang }) {\n\n    const history = useHistory();\n    const { hashtag } = useParams();\n    if (checkUser(user) === false)\n        history.replace('/login');\n\n    if (user.length === 0)\n        return '';\n    else {\n        return (\n            <div className={`container-fluid ${classes.peopletab}`}>\n                <Navbar />\n                <div className={classes.main}>\n                    <Sidebar1 user={user} lang={lang} />\n                    <div className={classes.posts}>\n                        <h5 className=\"hashtagHeading\">{\"#\" + hashtag}</h5>\n                        <Posts userId={user.uid} hashtag={hashtag} />\n                    </div>\n                    <Sidebar2 user={user} lang={lang} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default HashtagFilteredPosts;","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Posts\\Createpost.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Translate\\SetLanguage.js",["279"],"import React from \"react\";\nimport Navbar from \"../Nav/nav\";\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nclass SetLanguage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      language: \"English\",\n      value:null\n    };\n    if (localStorage.getItem(\"utsavlang\") === \"None\") {\n      localStorage.setItem(\"utsavlang\", \"en\");\n      this.state = {\n        language: \"English\",\n      };\n    }\n    this.handleLangChange = this.handleLangChange.bind(this);\n  }\n\n  handleLangChange(evt) {\n  \n    this.setState({value:evt.target.value});\n    localStorage.setItem(\"utsavlang\", evt.target.value);\n    this.setState({ language: evt.target.value });\n    alert(\"Changes saved successfully\");\n    window.location.href = \"/\";\n  }\n\n  render() {\n    return (\n      <>\n        <Navbar />\n        <br></br>\n        <br></br>\n        <center>\n        <b>Switch to another language: </b>\n          <div style={{marginBottom: \"50px\",width:\"30%\",border:\"1px solid black\",borderRadius:\"5px\"}}>\n            \n            <br></br>\n            {/* <select\n              value={this.state.language}\n              style={{ width: \"200px\", padding: \"1rem\" }}\n              onChange={this.handleLangChange}\n            >\n              <option value=\"en\">Change Language</option>\n              <option value=\"en\">English</option>\n              <option value=\"hi\">Hindi</option>\n              <option value=\"bn\">Bengali</option>\n            </select> */}\n            <FormControl component=\"fieldset\" >\n              <RadioGroup aria-label=\"language\" name=\"language\" value={this.state.language} onChange={this.handleLangChange}>\n                 <FormControlLabel value=\"en\" control={<Radio />} label=\"English\" />\n                 <FormControlLabel value=\"hi\" control={<Radio />} label=\"Hindi\" />\n                 <FormControlLabel value=\"bn\" control={<Radio />} label=\"Bengali\" />\n              </RadioGroup>\n            </FormControl>\n          </div>\n        </center>\n      </>\n    );\n  }\n}\n\nexport default SetLanguage;\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Profile\\Profile.js",["280"],"import React, { useState, useCallback, useRef, useEffect } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { db, storage } from \"../config/firebase.js\";\nimport { checkUser } from \"../Utilities/checkUser\";\nimport firebase from \"firebase\";\nimport \"./styles/Profile.css\";\nimport FullViewclasses from \"../Posts/styles/carouselpost.module.css\";\nimport EditProfile from \"./EditProfile\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport PhoneIcon from \"@material-ui/icons/Phone\";\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\n\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport HowToVoteIcon from \"@material-ui/icons/HowToVote\";\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\nimport DoneAllIcon from \"@material-ui/icons/DoneAll\";\nimport ThumbUpIcon from \"@material-ui/icons/ThumbUp\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\n//import AssignmentTurnedInIcon from \"@material-ui/icons/AssignmentTurnedIn\";\nimport Grid from \"./Grid\";\nimport ProfileClips from \"./ProfileClips\";\nimport ReactCrop from \"react-image-crop\";\nimport Modal from \"@material-ui/core/Modal\";\nimport styles from \"../Utilities/editimage.module.css\";\nimport upvotefollowListClasses from \"../Others/styles/upvoteFollowList.module.css\";\nimport \"react-image-crop/dist/ReactCrop.css\";\nimport { upvotePujo } from \"../Sidebars/UpvotePujoRow\";\nimport UpvoteFollowList from \"../Others/UpvoteFollowList\";\nimport swal from \"sweetalert\";\nimport defaultcoverpic from \"../images/cover.png\";\n\nimport { RWebShare } from \"react-web-share\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport {\n  EventNoteOutlined,\n  GroupAddOutlined,\n  HomeOutlined,\n  ShareOutlined,\n} from \"@material-ui/icons\";\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\nimport ZoomInIcon from \"@material-ui/icons/ZoomIn\";\nimport ZoomOutIcon from \"@material-ui/icons/ZoomOut\";\n\nconst pic =\n  \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png\";\n\nfunction TabPanel(props) {\n  const { value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    ></div>\n  );\n}\n\nTabPanel.propTypes = {\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  };\n}\n\n// const useStyles = makeStyles((theme) => ({\n//   indicator: {\n//     backgroundColor: \"purple\",\n//   },\n// }));\n\nconst followPujo = (uid, userId, AddorRemove) => {\n  const batch = db.batch();\n  const user_ref = db.collection(\"Users\").doc(uid);\n\n  const username = localStorage.getItem(\"Username\");\n  const dp = localStorage.getItem(\"Dp\");\n  const type = localStorage.getItem(\"type\");\n\n  if (AddorRemove === \"add\") {\n    const followers_ref = user_ref.collection(\"Followers\").doc(userId);\n    batch.update(user_ref, {\n      follows: firebase.firestore.FieldValue.increment(1),\n    });\n    batch.set(followers_ref, {\n      userID: uid,\n      ts: Date.now(),\n      uid: userId,\n      type: type,\n      username: username,\n      userdp: dp,\n    });\n  } else if (AddorRemove === \"remove\") {\n    batch.update(user_ref, {\n      follows: firebase.firestore.FieldValue.increment(-1),\n    });\n    const followers_ref = user_ref.collection(\"Followers\").doc(userId);\n    batch.delete(followers_ref);\n  }\n  batch.commit();\n};\n\nfunction Profile(props) {\n  //user is loged in user\n  //uid is the uid of the user whose profile is to be shown\n  const history = useHistory();\n\n  const { id } = useParams();\n  // const uid = history.location.state ? history.location.state.id : \"\";\n  const uid = id;\n  const userId = props.user.uid;\n\n  const [value, setValue] = useState(0);\n  const [username, setUsername] = useState(\"\");\n  const [gender, setGender] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [about, setAbout] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [state, setState] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [pincode, setPincode] = useState(\"\");\n  const [contact, setContact] = useState(\"\");\n  const [profile_pic, setPic] = useState(pic);\n  const [cover_pic, setCoverpic] = useState(defaultcoverpic);\n  const [type, setType] = useState(\"\");\n  const [follows, setFollows] = useState(0);\n  const [upvotes, setUpvotes] = useState(0);\n  const [upvote_check, set_upvote_check] = useState(false);\n  const [follow_check, set_follow_check] = useState(false);\n  const [showUpvotersList, setShowUpvotersList] = useState(false);\n  const [showFollowersList, setShowFollowersList] = useState(false);\n\n  const [upImg, setUpImg] = useState();\n  const [openEditModal, setOpenEditModal] = useState(false);\n  const [profilePicUpload, setProfilePicUpload] = useState(null);\n  const [filename, setFilename] = useState(\"\");\n  const [progress, setProgress] = useState(0);\n  const [showProgress, setShowProgress] = useState(false);\n  const [showEditProfile, setShowEditProfile] = useState(false);\n\n  const [open, setOpen] = useState(false);\n  const [viewImage, setViewImage] = useState(\"\");\n\n  useEffect(() => {\n    function getData() {\n      if (uid) {\n        db.collection(\"Users\")\n          .doc(uid)\n          .get()\n          .then((doc) => {\n            // console.log(doc.id, \" => \", doc.data());\n            const dt = doc.data();\n            //console.log(\"k\"+dt);\n\n            setUsername(dt.name);\n            setPincode(dt.pincode);\n            setContact(dt.contact);\n            setCity(dt.city);\n            setState(dt.state);\n            setAddress(dt.addressline);\n            setContact(dt.contact);\n            setPic(dt.dp);\n            setType(dt.type);\n            setFollows(dt.follows);\n            setCoverpic(dt.coverpic);\n            if (dt.type === \"indi\") {\n              setAbout(dt.about);\n              setGender(dt.gender);\n            } else {\n              setUpvotes(dt.upvotes);\n              setAbout(dt.description);\n              setCategory(dt.category);\n            }\n          });\n      }\n    }\n    //console.log(userId);\n    //console.log(uid);\n\n    getData();\n  }, [uid]);\n\n  useEffect(() => {\n    if (uid && type === \"com\") {\n      db.collection(\"Users\")\n        .doc(uid)\n        .collection(\"Upvoters\")\n        .doc(userId)\n        .get()\n        .then((doc) => {\n          if (doc.exists) set_upvote_check(true);\n        });\n    }\n  }, [uid, userId, type]);\n\n  useEffect(() => {\n    if (uid && type === \"com\") {\n      db.collection(\"Users\")\n        .doc(uid)\n        .collection(\"Followers\")\n        .doc(userId)\n        .get()\n        .then((doc) => {\n          if (doc.exists) set_follow_check(true);\n        });\n    }\n  }, [uid, userId, type]);\n\n  if (checkUser(props.user) === false) history.replace(\"/login\");\n\n  const startCrop = (file) => {\n    if (file) {\n      const reader = new FileReader();\n      reader.addEventListener(\"load\", () => setUpImg(reader.result));\n      reader.readAsDataURL(file);\n    }\n  };\n\n  function EditModal() {\n    const imgRef = useRef(null);\n    const previewCanvasRef = useRef(null);\n    const [crop, setCrop] = useState({\n      unit: \"%\",\n      width: 30,\n      aspect: profilePicUpload ? 1 : 3,\n    });\n    const [completedCrop, setCompletedCrop] = useState(null);\n\n    const onLoad = useCallback((img) => {\n      imgRef.current = img;\n    }, []);\n\n    useEffect(() => {\n      if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n        return;\n      }\n\n      const image = imgRef.current;\n      const canvas = previewCanvasRef.current;\n      const crop = completedCrop;\n\n      const scaleX = image.naturalWidth / image.width;\n      const scaleY = image.naturalHeight / image.height;\n      const ctx = canvas.getContext(\"2d\");\n      const pixelRatio = window.devicePixelRatio;\n\n      canvas.width = crop.width * pixelRatio;\n      canvas.height = crop.height * pixelRatio;\n\n      ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n      ctx.imageSmoothingQuality = \"high\";\n\n      ctx.drawImage(\n        image,\n        crop.x * scaleX,\n        crop.y * scaleY,\n        crop.width * scaleX,\n        crop.height * scaleY,\n        0,\n        0,\n        crop.width,\n        crop.height\n      );\n    }, [completedCrop]);\n\n    function finishCrop() {\n      setOpenEditModal(false);\n      handleImageUpload(previewCanvasRef.current);\n    }\n\n    return (\n      <>\n        <Modal open={openEditModal}>\n          <>\n            <div className={styles.main}>\n              <div className={styles.cropper}>\n                <h5>Edit Image</h5>\n\n                <ReactCrop\n                  src={upImg}\n                  onImageLoaded={onLoad}\n                  crop={crop}\n                  keepSelection={true}\n                  onChange={(c) => setCrop(c)}\n                  onComplete={(c) => setCompletedCrop(c)}\n                  style={{\n                    maxWidth: \"60vw\",\n                    maxHeight: \"60vh\",\n                    overflow: \"scroll\",\n                  }}\n                />\n\n                <div className={styles.buttons}>\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-success\"\n                    disabled={!completedCrop?.width || !completedCrop?.height}\n                    onClick={finishCrop}\n                  >\n                    Done\n                  </button>\n                  <button\n                    className=\"btn btn-warning ml-4\"\n                    onClick={() => setOpenEditModal(false)}\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div className={styles.canvas}>\n              <canvas\n                ref={previewCanvasRef}\n                // Rounding is important so the canvas width and height matches/is a multiple for sharpness.\n                style={{\n                  width: Math.round(completedCrop?.width ?? 0),\n                  height: Math.round(completedCrop?.height ?? 0),\n                }}\n              />\n            </div>\n          </>\n        </Modal>\n      </>\n    );\n  }\n\n  function Progress() {\n    return (\n      <Modal open={showProgress}>\n        <div className={styles.progress}>\n          <div className={styles.progressBarContainer}>\n            <progress\n              value={progress}\n              max=\"100\"\n              className={styles.progressBar}\n            />\n            <p>Uploading...</p>\n          </div>\n        </div>\n      </Modal>\n    );\n  }\n\n  const FullscreenViewHandler = () => {\n    return (\n      <Modal open={open} onClose={() => setOpen(false)}>\n        <div className={FullViewclasses.fullViewContainer}>\n          <CancelIcon\n            className={FullViewclasses.closeFullView}\n            onClick={() => setOpen(false)}\n          />\n          <TransformWrapper\n            defaultScale={1}\n            defaultPositionX={1}\n            defaultPositionY={1}\n          >\n            {({ zoomIn, zoomOut, ...rest }) => (\n              <>\n                <TransformComponent>\n                  <img\n                    src={viewImage}\n                    alt=\"fullviewImage\"\n                    className={FullViewclasses.fullViewImg}\n                  />\n                </TransformComponent>\n                <div className={FullViewclasses.fullViewButtons}>\n                  <span\n                    onClick={zoomIn}\n                    style={{\n                      cursor: \"pointer\",\n                      color: \"white\",\n                      marginRight: \"15px\",\n                    }}\n                  >\n                    <ZoomInIcon fontSize=\"large\" />\n                    <small>ZoomIn</small>\n                  </span>\n                  <span\n                    onClick={zoomOut}\n                    style={{ color: \"white\", cursor: \"pointer\" }}\n                  >\n                    <ZoomOutIcon fontSize=\"large\" /> <small>ZoomOut</small>\n                  </span>\n                </div>\n              </>\n            )}\n          </TransformWrapper>\n        </div>\n      </Modal>\n    );\n  };\n\n  function viewFullImage(imgsrc) {\n    setViewImage(imgsrc);\n    setOpen(true);\n  }\n\n  function getImageData(canvas, fileName) {\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(\n        (blob) => {\n          blob.name = fileName;\n          resolve(blob);\n        },\n        \"image/jpeg\",\n        1\n      );\n    });\n  }\n\n  const handleImageUpload = async (canvas) => {\n    const file = await getImageData(canvas, filename);\n\n    if (filename && file) {\n      const uploadTask = storage.ref(`images/${filename}`).put(file);\n      setProgress(0);\n      setShowProgress(true);\n      uploadTask.on(\n        \"state_changed\",\n        (snapshot) => {\n          const progress = Math.round(\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n          );\n          setProgress(progress);\n        },\n        (error) => {\n          console.log(error);\n          alert(error.message);\n        },\n        () => {\n          storage\n            .ref(\"images\")\n            .child(filename)\n            .getDownloadURL()\n            .then((url) => {\n              if (profilePicUpload) updateprofilepicdata(url);\n              else updatecoverpicdata(url);\n              setShowProgress(false);\n              setProfilePicUpload(null);\n            });\n        }\n      );\n    }\n  };\n\n  const handleImageChange = (e) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const fname = e.target.files[0].name;\n      if (\n        fname.endsWith(\".jpg\") ||\n        fname.endsWith(\".jpeg\") ||\n        fname.endsWith(\".png\")\n      ) {\n        let name = e.target.files[0].name;\n        name = name.substring(0, name.lastIndexOf(\".\")) + \".png\";\n        //console.log(name);\n        startCrop(e.target.files[0]);\n        setOpenEditModal(true);\n        setFilename(name);\n      } else {\n        swal(\"Oops!\", \"Invalid format!\", \"error\");\n      }\n    }\n  };\n\n  const uploadProfilePicture = (e) => {\n    if (e.target.files[0]) {\n      setProfilePicUpload(true);\n      handleImageChange(e);\n    }\n  };\n\n  const uploadCoverPicture = (e) => {\n    if (e.target.files[0]) {\n      setProfilePicUpload(false);\n      handleImageChange(e);\n    }\n  };\n\n  function changeProfilePicture() {\n    const a = document.getElementById(\"profile-picture-file-input\");\n    a.value = \"\";\n    a.click();\n  }\n\n  function changeCoverPicture() {\n    const b = document.getElementById(\"cover-picture-file-input\");\n    b.value = \"\";\n    b.click();\n  }\n\n  async function updateprofilepicdata(link) {\n    setPic(link);\n    localStorage.setItem(\"Dp\", link);\n    const ref = db.collection(\"Users\").doc(uid);\n    await ref.update({ dp: link });\n  }\n\n  async function updatecoverpicdata(link) {\n    setCoverpic(link);\n    const ref = db.collection(\"Users\").doc(uid);\n    await ref.update({ coverpic: link });\n  }\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const EditProfileModal = () => {\n    function closeModal() {\n      setShowEditProfile(false);\n    }\n\n    return (\n      <Modal open={showEditProfile}>\n        <div className=\"editProfile-overlay\">\n          <div className=\"editProfile\">\n            <EditProfile\n              uid={uid}\n              name={username}\n              type={type}\n              about={about}\n              city={city}\n              state={state}\n              pincode={pincode}\n              address={address}\n              gender={gender}\n              category={category}\n              contact={contact}\n              close={closeModal}\n            />\n          </div>\n        </div>\n      </Modal>\n    );\n  };\n\n  const upvoteClickHandler = () => {\n    if (upvote_check) {\n      upvotePujo(uid, userId, \"remove\");\n    } else {\n      upvotePujo(uid, userId, \"add\");\n    }\n    set_upvote_check(!upvote_check);\n  };\n\n  const followClickHandler = () => {\n    if (follow_check) {\n      followPujo(uid, userId, \"remove\");\n    } else {\n      followPujo(uid, userId, \"add\");\n    }\n    set_follow_check(!follow_check);\n  };\n\n  function openUpvoteListModal() {\n    if (upvotes > 0) setShowUpvotersList(true);\n  }\n\n  function openFollowListModal() {\n    if (follows > 0) setShowFollowersList(true);\n  }\n\n  if (props.user.length === 0) {\n    return \"\";\n  } else {\n    return (\n      <>\n        <span onClick={() => history.goBack()} className=\"back-btn\">\n          <ArrowBackIcon />\n        </span>\n        <div className=\"container-fluid profile\">\n          <div className=\"container profile-display\">\n            <div className=\"profile-display__cover\">\n              <img\n                src={cover_pic}\n                alt=\"cover\"\n                id=\"coverPicture\"\n                className=\"profile-display__cover-img\"\n                onClick={() => viewFullImage(cover_pic)}\n              />\n              <input\n                type=\"file\"\n                accept=\"image/*\"\n                id=\"cover-picture-file-input\"\n                hidden=\"hidden\"\n                onChange={uploadCoverPicture}\n              />\n              {userId === uid ? (\n                <Tooltip title=\"Edit Cover picture\" placement=\"bottom\">\n                  <button\n                    className=\"btn btn-sm  profile-display__cover-edit\"\n                    onClick={changeCoverPicture}\n                  >\n                    {/* <span>Edit picture</span> */}\n                    <EditOutlinedIcon fontSize=\"small\" />\n                  </button>\n                </Tooltip>\n              ) : null}\n            </div>\n            <div className=\"profile-display__about\">\n              <div className=\"profile-display__about--imgC\">\n                <img\n                  src={profile_pic}\n                  alt=\"profile\"\n                  className=\"profile-display__about--img\"\n                  onClick={() => viewFullImage(profile_pic)}\n                />\n                <input\n                  type=\"file\"\n                  accept=\"image/*\"\n                  id=\"profile-picture-file-input\"\n                  hidden=\"hidden\"\n                  onChange={uploadProfilePicture}\n                />\n                {userId === uid ? (\n                  <Tooltip title=\"Edit Profile Picture\" placement=\"right\">\n                    <button\n                      className=\"btn profile-display__about--img-edit\"\n                      onClick={changeProfilePicture}\n                    >\n                      <EditIcon />\n                    </button>\n                  </Tooltip>\n                ) : null}\n              </div>\n              {userId === uid ? (\n                <Tooltip title=\"Edit Profile\" placement=\"right\">\n                  <button\n                    className=\"btn profile-display__about--profile-edit\"\n                    onClick={() => setShowEditProfile(true)}\n                  >\n                    Edit Profile\n                    <EditOutlinedIcon />\n                  </button>\n                </Tooltip>\n              ) : null}\n\n              <div className=\"profile-display__about-user\">\n                <div className=\"profile-display__about-user--name\">\n                  {username}\n                </div>\n                <div className=\"profile-display__about-user--all\">\n                  <HomeOutlined />\n                  {`${address}, ${state}`}\n                </div>\n                {about !== \"\" ? (\n                  <div className=\"profile-display__about-user--all\">\n                    <EventNoteOutlined />\n                    {about}\n                  </div>\n                ) : null}\n                {/* <div className=\"profile-display__about-user--all\">\n                  {address}\n                </div> */}\n                <div className=\"profile-display__about-user--all\">\n                  <PhoneIcon />\n                  {contact}\n                </div>\n                <div className=\"group-span\">\n                  {follows > 0 ? (\n                    <div\n                      className=\"profile-display__about-user--span\"\n                      onClick={openFollowListModal}\n                    >\n                      <GroupAddOutlined />\n                      &nbsp;{follows} Followers{\" \"}\n                    </div>\n                  ) : null}\n                  {type === \"com\" && upvotes > 0 ? (\n                    <div\n                      className=\"profile-display__about-user--span\"\n                      onClick={openUpvoteListModal}\n                    >\n                      <ThumbUpIcon />\n                      {upvotes + \"  \"}people upvoted this\n                    </div>\n                  ) : null}\n                </div>\n              </div>\n              <div className=\"profile-display__about-com\">\n                {type === \"com\" && userId !== uid ? (\n                  <>\n                    <div className=\"profile-display__about-com--part\">\n                      <button\n                        className=\"btn btn-upvote-profile\"\n                        onClick={upvoteClickHandler}\n                      >\n                        {upvote_check ? (\n                          <HowToVoteIcon\n                            style={{\n                              marginBottom: \"2px\",\n                              paddingRight: \"4px\",\n                            }}\n                          />\n                        ) : null}\n                        {upvote_check ? \" Upvoted\" : \"Upvote\"}\n                      </button>\n                    </div>\n                    <div className=\"profile-display__about-com--part\">\n                      <button className=\"btn btn-locate-profile\">\n                        <LocationOnIcon\n                          style={{ marginBottom: \"2px\", paddingRight: \"4px\" }}\n                        />\n                        Locate\n                      </button>\n                    </div>\n                  </>\n                ) : null}\n                {userId !== uid ? (\n                  <div className=\"profile-display__about-com--part\">\n                    <button\n                      className=\"btn btn-follow-profile\"\n                      onClick={followClickHandler}\n                    >\n                      {follow_check ? (\n                        <DoneAllIcon\n                          style={{ marginBottom: \"2px\", paddingRight: \"4px\" }}\n                        />\n                      ) : null}\n                      {follow_check ? \"  Following\" : \"Follow\"}\n                    </button>\n                  </div>\n                ) : null}\n              </div>\n              <RWebShare\n                data={{\n                  text: \"Check out the profile on Utsav!\",\n                  url: window.location.href,\n                  title: \"Utsav\",\n                }}\n                className=\"profile-display__about--share\"\n              >\n                <button className=\"btn profile-display__about--share\">\n                  <ShareOutlined />\n                </button>\n              </RWebShare>\n            </div>\n          </div>\n          <div className=\"container profile-tabs\">\n            <div>\n              <Tabs\n                value={value}\n                onChange={handleChange}\n                aria-label=\"simple tabs example\"\n              >\n                <Tab\n                  label=\"POSTS\"\n                  {...a11yProps(0)}\n                  style={{ outline: \"none\" }}\n                />\n                <Tab\n                  label=\"CLIPS\"\n                  {...a11yProps(1)}\n                  style={{ outline: \"none\" }}\n                />\n              </Tabs>\n            </div>\n            <TabPanel value={value} index={0}>\n              <Grid userId={uid} username={username} dp={profile_pic} />\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n              <ProfileClips userId={userId} uid={uid} />\n            </TabPanel>\n          </div>\n        </div>\n        <FullscreenViewHandler src={viewImage} />\n        <EditModal />\n        <Progress />\n        <EditProfileModal />\n        {type === \"com\" ? (\n          <Modal open={showUpvotersList}>\n            <div className={upvotefollowListClasses.main}>\n              <div>\n                <div className={upvotefollowListClasses.heading}>\n                  <h6>Upvoters</h6>\n                  <CancelIcon\n                    className={upvotefollowListClasses.closeBtn}\n                    onClick={() => setShowUpvotersList(false)}\n                  />\n                </div>\n                <UpvoteFollowList for=\"upvote\" userid={uid} />\n              </div>\n            </div>\n          </Modal>\n        ) : null}\n        <Modal open={showFollowersList}>\n          <div className={upvotefollowListClasses.main}>\n            <div>\n              <div className={upvotefollowListClasses.heading}>\n                <h6>Followers</h6>\n                <CancelIcon\n                  className={upvotefollowListClasses.closeBtn}\n                  onClick={() => setShowFollowersList(false)}\n                />\n              </div>\n              <UpvoteFollowList for=\"follow\" userid={uid} />\n            </div>\n          </div>\n        </Modal>\n      </>\n      // <>\n\n      //       <div className=\"profile\">\n      //         <div className=\"profile-picture\">\n\n      //           <div className=\"profile-name\">\n      //\n      //\n      //           </div>\n      //         </div>\n      //       </div>\n      //       <hr />\n      //       <div className=\"details\">\n      //         <h5>About</h5>\n      //\n      //         <h6>Address : </h6>\n      //\n\n      //       <hr />\n      //\n      //     </div>\n      //   </div>\n      // </>\n    );\n  }\n}\n\nexport default Profile;\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Notification\\AllNotifications.js",["281","282","283","284","285","286","287","288"],"import React from 'react'\nimport { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport {  db } from \"../config/firebase.js\";\nimport Navbar from \"../Nav/nav.js\";\nimport Trending from '../Others/Trending_hashtags.js';\nimport Sidebar1 from '../Sidebars/Sidebar_1.js';\nimport SingleNotification from './Notification.js';\n\nimport UpvotePujoRow from '../Sidebars/UpvotePujoRow';\n\n\nimport Translate from \"../Translate/Translate\";\nimport './styles/Notifications.css';\nimport Preloader from '../Others/Preloader.js';\nimport NoNotifImage from '../images/no-notif.png';\n\nimport Logo from \"../images/logo.png\";\nimport SplashScreen from '../SplashScreen/SplashScreen.js';\nexport default function AllNotifications(props) {\n    const user = props.user;\n    const uid = user.uid;\n    const history = useHistory('');\n    const [communitties, setCommitties] = useState([]);\n    const [message, setMessage] = useState('');\n    const [showMoreNotif, setShowMoreNotif] = useState(true);\n    const lang = props.lang;\n    if (user === false) {\n        history.push(\"/login\")\n    }\n    const [notifs,setNotifs] = useState([]);\n    const [loading,setLoading] = useState(true);\n    const [firstNotif,setFirstNotif] = useState(false);\n    const [noNotif,setNoNotif] = useState(NoNotifImage);\n    const [logo,setLogo] = useState(Logo);\n//     const querySnapshot = admin.firestore().collection('users').doc('uid').collection('sub-collection').limit(1).get()\n// if (querySnapshot.empty) {console.log('sub-collection not existed')}\n    useEffect(() => {\n            //alert(uid);\n    db.collection(\"Users\").doc(uid).collection(\"notifications\").get().then((snap) => {\n        if(snap.empty){\n            //alert(\"not exists\");\n            setLoading(false);\n            setFirstNotif(true);\n        }\n        else {\n        //alert(\"42.\")\n        db.collection(\"Users\").doc(uid).collection(\"notifications\").orderBy(\"datenotif\",\"desc\").limit(6).onSnapshot((snapshot) => {\n                \n           setNotifs(snapshot.docs.map(doc => ({\n                   id: doc.id,\n                   notif: doc.data(),\n               })));\n               setShowMoreNotif(true)\n             });\n             setLoading(false);\n             setFirstNotif(false);\n       }\n    })\n        \n    },[uid])\n    useEffect(() => {\n        db.collection(\"Users\").where('type', '==', 'com').onSnapshot((snapshot) => {\n            setCommitties(snapshot.docs.map(doc => ({\n                id: doc.id,\n                data: doc.data(),\n            })));\n        })\n    }, []);\n    function showMore(entries) {\n    //console.log(\"hello\");\n        if (entries[0] && entries[0].isIntersecting && notifs[0]) {\n                updateNotifs();\n        }\n    }\n    \n    let options = {\n        rootMargin: '0px',\n        threshold: 0.1\n    }\n    \n    const element = document.getElementById('showMoreNotif');\n    if (element) {\n        let observer = new IntersectionObserver(showMore, options);\n        observer.observe(element);\n    }\n\n    function updateNotifs() {\n        const last = notifs[notifs.length - 1].notif.datenotif;\n        //console.log(\"last\"+last)\n        \n        setShowMoreNotif(false);\n        setMessage(\"Loading...\");\n        db.collection(\"Users\").doc(uid).collection(\"notifications\").orderBy(\"datePost\",\"desc\").startAfter(last).limit(4).get()\n                .then((snapshot) => {\n                    const array = snapshot.docs.map(doc => ({\n                        id: doc.id,\n                        notif: doc.data(),\n                    }));\n                   // console.log(\"added\"+array);\n                    if (array.length === 0) {\n                        setMessage('No more notifications to show.')\n                    }\n                    else {\n                        setNotifs([...notifs,...array]);\n                        setMessage('');\n                        setShowMoreNotif(true);\n                    }\n                });\n    }\n    const NotificationRow = (props) => {\n        //alert(props.time);\n        return (\n            <>\n                \n                {props.seen === \"yes\" && (\n                    <div className=\"full-notification\">\n                    <span className=\"notification-time\" style={{padding:\"5px\",color:\"darkgrey\"}}>{time_ago(props.time)}</span>\n                                  \n                          <SingleNotification\n                          imgsrc={props.imgsrc}\n                          userid={props.userid}\n                          origuid={uid}\n                          username={props.username}\n                          type={props.type}\n                          comment={props.comment}\n                          postid = {props.postId}\n                          time={time_ago(props.time)}\n                          notifid={props.notifid}\n                          />        \n                    </div>\n                )}\n                {props.seen === \"no\" && (\n                    <div className=\"full-notification\" style={{backgroundImage: \"linear-gradient(to bottom right,rgb(255,255,224,0),rgb(255, 255, 224,1))\"}}>\n                    <span className=\"notification-time\"  style={{padding:\"5px\",color:\"darkgrey\"}}>{time_ago(props.time)}</span>\n                                  \n                          <SingleNotification\n                          imgsrc={props.imgsrc}\n                          userid={props.userid}\n                          origuid={uid}\n                          username={props.username}\n                          type={props.type}\n                          comment={props.comment}\n                          postid = {props.postId}\n                          time={time_ago(props.time)}\n                          notifid={props.notifid}\n                          />        \n                    </div>\n                )}\n                \n            </>\n        );\n    }\n\n    const Notification = (notifdata) => {\n        const notifData = notifdata.notif;\n\n        return (\n            <NotificationRow\n                key={notifdata.id}\n                notifid={notifdata.id}\n                username={notifData.username}\n                userid={notifData.userid}\n                imgsrc={notifData.imgsrc}\n                time={notifData.datenotif}\n                postId={notifData.postid}\n                type={notifData.type}\n                comment={notifData.commenttext}\n                seen={notifData.seen}\n                />\n        );\n\n    }\n    function time_ago(time) {\n\n        switch (typeof time) {\n            case 'number':\n                break;\n            case 'string':\n                time = +new Date(time);\n                break;\n            case 'object':\n                if (time.constructor === Date) time = time.getTime();\n                break;\n            default:\n                time = +new Date();\n        }\n        var time_formats = [\n            [60, 's', 1], // 60\n            [120, '1 minute', '1 min from now'], // 60*2\n            [3600, 'minutes', 60], // 60*60, 60\n            [7200, '1 hour ', '1h from now'], // 60*60*2\n            [86400, 'hours', 3600], // 60*60*24, 60*60\n            [172800, 'yesterday', 'Tomorrow'], // 60*60*24*2\n            [604800, 'days', 86400], // 60*60*24*7, 60*60*24\n            [1209600, '1 week', 'Next week'], // 60*60*24*7*4*2\n            [2419200, 'weeks', 604800], // 60*60*24*7*4, 60*60*24*7\n            [4838400, '1 month', 'Next month'], // 60*60*24*7*4*2\n            [29030400, 'months', 2419200], // 60*60*24*7*4*12, 60*60*24*7*4\n            [58060800, '1 year', 'Next year'], // 60*60*24*7*4*12*2\n            [2903040000, 'years', 29030400], // 60*60*24*7*4*12*100, 60*60*24*7*4*12\n            [5806080000, '1 century', 'Next century'], // 60*60*24*7*4*12*100*2\n            [58060800000, 'centuries', 2903040000] // 60*60*24*7*4*12*100*20, 60*60*24*7*4*12*100\n        ];\n        var seconds = (+new Date() - time) / 1000,\n            token = 'ago',\n            list_choice = 1;\n    \n        if (seconds === 0) {\n            return 'Just now'\n        }\n        if (seconds < 0) {\n            seconds = Math.abs(seconds);\n            token = 'from now';\n            list_choice = 2;\n        }\n        var i = 0,\n            format;\n        while (format = time_formats[i++])\n            if (seconds < format[0]) {\n                if (typeof format[2] == 'string')\n                    return format[list_choice];\n                else\n                    return Math.floor(seconds / format[2]) + ' ' + format[1];\n            }\n        return time;\n    }\n    const UpvotePujo = (cvalue) => {\n        if (cvalue.id === uid) {\n            return \"\";\n        }\n        else {\n            return (\n                <UpvotePujoRow\n                    key={cvalue.id}\n                    id={cvalue.id}\n                    name={cvalue.data.name}\n                    imgsrc={cvalue.data.dp}\n                    uid={uid}\n                />\n            );\n        }\n    }\n    \n        return (\n            \n            <div className=\"container-fluid home\" >\n                <Navbar user={user} />\n               \n             <div className=\"home-main\" style={{minHeight:\"100%\"}} >\n             <Sidebar1 user={user} lang={lang}/>\n             <div className=\"app__notifs\" style={{marginTop:\"10px\"}}>\n             {/* {notifs.length === 0 && \n                 <center>\n                 <div style={{width:\"300px\"}}>\n                     <img alt=\"No Notifications\" src={noNotif} width=\"200\" height=\"200\"></img>\n                 </div>\n                 <div>No notifications yet!</div>\n                 </center>\n                 \n             } */}\n             {firstNotif && \n             <div id=\"notif-page-items\">\n                 <div className=\"full-notification\" >\n                                  \n                          <SingleNotification\n                          \n                          \n                          type=\"application\"\n                          />        \n                    </div>  \n             </div>\n             }\n             {!firstNotif && !loading && \n             <>\n             <div id=\"notif-page-items\" >\n             {\n             notifs.map(Notification)\n             }\n             </div>\n             <div>\n               {showMoreNotif && <div id='showMoreNotif' style={{borderBottom:\"none\"}}></div>}\n               {message !== '' ? <p>{message}</p> : ''}\n             </div>\n             </>\n             }\n             {!firstNotif && loading && \n                <div>Loading..</div>}\n            </div>\n                <div className=\"sidebar2\" >\n                <Trending lang={lang}/> \n                <div className=\"upvote-pujo\">\n                    <h5 className=\"upvote-pujo-heading\" data-aos=\"fade-left\" data-aos-offset=\"20\"><Translate lang={lang}>Upvote Pujo</Translate></h5>\n                    <div className=\"upvote-pujo-list\">\n                        {communitties.map(UpvotePujo)}\n                    </div>\n                </div>\n                </div>\n             </div> \n            </div>\n        )\n    \n}\n// {props.seen === \"yes\" ? <span id=\"seen\" style={{float:\"left\"}}></span> : \"\"}  \n                \n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Notification\\addNotification.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\InvalidPage\\InvalidPage.js",["289"],"import React from 'react'\nimport Navbar from '../Nav/nav'\n\nimport { Link } from \"react-router-dom\";\nimport { useState } from 'react';\nimport Candle from '../images/candle.gif';\nexport default function InvalidPage(props) {\n    const user = props.user;\n    const [candle,setCandle] = useState(Candle);\n    return (\n        <div className=\"container-fluid home\" >\n                <Navbar user={user} />\n                <div className=\"home-main\" style={{backgroundColor:\"black\",height:\"100vh\",width:\"100%\"}}>\n                    <div style={{textAlign:\"center\",color:\"white\",width:\"inherit\"}}>\n                         \n                        <img src={candle} alt=\"candle\" style={{width:\"256px\",height:\"256px\"}}></img>\n                       \n                       \n                        <h1>Oops! Page not found.</h1>\n                        <h3 style={{color:\"lightgray\"}}>We have searched everywhere <br></br>in this darkness..</h3>\n                        <p ><Link to=\"/\" style={{color:\"lightgray\"}}>Go to Utsav home</Link></p>\n                    </div>\n                </div>\n            </div>\n    )\n}\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\SplashScreen\\SplashScreen.js",["290"],"import React from 'react'\nimport { useState } from 'react';\nimport Logo from '../images/logo.png';\nimport '../SplashScreen/SplashScreen.css';\n// import Preloader from '../Others/Preloader.js';\nexport default function SplashScreen() {\n    const [logo,setLogo] = useState(Logo);\n    setTimeout(() => {\n    window.location.replace(\"/home\");\n    },3000)\n    return (\n        <div className=\"center\">\n            <center>\n            <table>\n               <tr>\n                   <td><img src={logo} className=\"splash-logo\" alt=\"logo\"></img></td>\n                   <td><span className=\"fade-in splash-brand\">Utsav</span></td>\n               </tr>\n           </table>\n           <p>Let's celebrate festivals together, virtually.</p>\n           <div class=\"loader\"></div>\n            </center>          \n        </div>\n              \n        \n    )\n}\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\onboarding\\src\\MainHome.js",["291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { auth, db } from \"../../config/firebase.js\";\r\nimport firebase from \"firebase\";\r\nimport \"./styles/MainHome.css\";\r\nimport \"react-dom\";\r\nimport AOS from \"aos\";\r\nimport \"aos/dist/aos.css\";\r\nimport translateIcon from \"./images/translate-icon.png\";\r\nimport applogo from \"./images/logo-removebg-preview.png\";\r\nimport applex from \"./images/OIP-removebg-preview 1.png\";\r\nimport explore from \".//images/imageedit_1_4694143777.png\";\r\nimport download from \"./images/iconfinder_logo_brand_brands_logos_playstore_google_2993672 1.png\";\r\nimport slices from \"./images/Rectangle 14.png\";\r\nimport s1 from \"./images/Screenshot_2021-03-02-16-38-57-075_com.applex 1.png\";\r\nimport s2 from \"./images/Screenshot_2021-03-02-16-38-46-848_com.applex 1.png\";\r\nimport s3 from \"./images/Screenshot_2021-03-02-16-38-52-123_com.applex 1.png\";\r\nimport useScrollSnap from \"react-use-scroll-snap\";\r\nimport Carousel from \"react-bootstrap/Carousel\";\r\nimport tirupati from \"./images/tirupati.jpg\";\r\nimport holi from \"./images/holi.jpg\";\r\nimport durgapuja from \"./images/durga-puja.jpg\";\r\nimport ganpati from \"./images/ganpati.jpg\";\r\nimport diwali from \"./images/diwali.jpg\";\r\nimport laptopImage from \"./images/laptopOver.png\";\r\nimport southIndianGirlImage from \"./images/southIndian.png\";\r\nimport demoImageBottom from \"./images/appDemoImage.png\";\r\nimport playStoreImage from \"./images/playStoreImage.png\";\r\nimport google_icon from \"../../images/google_icon.svg\";\r\nimport swal from \"sweetalert\";\r\n\r\nimport { Link, Redirect, useHistory } from \"react-router-dom\";\r\n\r\nfunction MainHome() {\r\n  useEffect(() => {\r\n    AOS.init({ duration: 2000 });\r\n  }, []);\r\n\r\n  function HandleClick() {\r\n    window.location.hash = \"#sec1\";\r\n    document.querySelector(\"#navbar\").classList.remove(\"navbar2\");\r\n  }\r\n  function HandleClick1() {\r\n    window.location.hash = \"#sec2\";\r\n    document.querySelector(\"#navbar\").classList.add(\"navbar2\");\r\n  }\r\n  function HandleClick2() {\r\n    window.location.hash = \"#sec3\";\r\n    document.querySelector(\"#navbar\").classList.remove(\"navbar2\");\r\n  }\r\n  function HandleClick3() {\r\n    window.location.hash = \"#sec4\";\r\n    document.querySelector(\"#navbar\").classList.add(\"navbar2\");\r\n  }\r\n  function HandleClick4() {\r\n    window.location.hash = \"#sec5\";\r\n    document.querySelector(\"#navbar\").classList.remove(\"navbar2\");\r\n  }\r\n  const history = useHistory(\"\");\r\n  function next_page() {\r\n    history.push(\"/login\");\r\n  }\r\n  function register_page() {\r\n    history.push(\"/register\");\r\n  }\r\n  const handleScroll = () => {\r\n    window.location.hash = \"\";\r\n    const main = document.querySelector(\".main\");\r\n\r\n    console.log(main.scrollTop, window.innerHeight);\r\n    if (main.scrollTop < window.innerHeight) {\r\n      document.querySelector(\"#navbar\").classList.remove(\"navbar2\");\r\n    }\r\n    if (\r\n      main.scrollTop >= 1 * window.innerHeight &&\r\n      main.scrollTop < 2 * window.innerHeight\r\n    ) {\r\n      document.querySelector(\"#navbar\").classList.add(\"navbar2\");\r\n    }\r\n\r\n    if (\r\n      main.scrollTop >= 2 * window.innerHeight &&\r\n      main.scrollTop < 3 * window.innerHeight\r\n    ) {\r\n      document.querySelector(\"#navbar\").classList.remove(\"navbar2\");\r\n    }\r\n\r\n    if (\r\n      main.scrollTop >= 3 * window.innerHeight &&\r\n      main.scrollTop < 4 * window.innerHeight\r\n    ) {\r\n      document.querySelector(\"#navbar\").classList.add(\"navbar2\");\r\n    }\r\n\r\n    if (main.scrollTop >= 4 * window.innerHeight) {\r\n      document.querySelector(\"#navbar\").classList.remove(\"navbar2\");\r\n    }\r\n  };\r\n\r\n  const handleLoginShrink = () => {\r\n    document.querySelector(\"#loginOverlay\").classList.toggle(\"shrink-down\");\r\n    let iT = document.querySelector(\"#logText\").innerText;\r\n    if (iT === \"Log-In\") {\r\n      document.querySelector(\"#logText\").innerText = \"Sign-Up\";\r\n    } else {\r\n      document.querySelector(\"#logText\").innerText = \"Log-In\";\r\n    }\r\n  };\r\n\r\n  const goToLogin = () => {\r\n    console.log(\"Login\");\r\n    window.location.hash = \"#sec5\";\r\n    document.querySelector(\"#loginOverlay\").classList.remove(\"shrink-down\");\r\n    document.querySelector(\"#logText\").innerText = \"Sign-Up\";\r\n  };\r\n\r\n  const goToSignUp = () => {\r\n    window.location.hash = \"#sec5\";\r\n    document.querySelector(\"#loginOverlay\").classList.add(\"shrink-down\");\r\n    document.querySelector(\"#logText\").innerText = \"Log-In\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.querySelector(\".main\").addEventListener(\"scroll\", handleScroll);\r\n\r\n    document\r\n      .querySelector(\"#loginShrink\")\r\n      .addEventListener(\"click\", handleLoginShrink);\r\n  }, []);\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n  const register = (event) => {\r\n    event.preventDefault();\r\n    auth\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then((s) => {\r\n        history.push({\r\n          pathname: \"/registerpage\",\r\n          state: { googleSignin: false },\r\n        });\r\n      })\r\n      .catch((e) => {\r\n        alert(e.message);\r\n      });\r\n  };\r\n\r\n  async function google_login(event) {\r\n    event.preventDefault();\r\n    const res = await firebase.auth().signInWithPopup(provider);\r\n\r\n    const check = await db.collection(\"Users\").doc(res.user.uid).get();\r\n\r\n    if (!check.exists) {\r\n      swal(\"Oops!\", \"No such account exists\", \"error\");\r\n      auth.signOut();\r\n      history.replace(\"/onboarding#sec5\");\r\n    } else {\r\n      history.replace({ pathname: \"/home\", state: { googleSignin: true } });\r\n    }\r\n  }\r\n\r\n  async function google_signin(event) {\r\n    event.preventDefault();\r\n\r\n    const res = await firebase.auth().signInWithPopup(provider);\r\n\r\n    // console.log(res.user.uid);\r\n    // const email = res.user.email;\r\n\r\n    const checkDoc = await db.collection(\"Users\").doc(res.user.uid).get();\r\n\r\n    // if (check.empty)\r\n    if (!checkDoc.exists)\r\n      history.push({\r\n        pathname: \"/registerpage\",\r\n        state: { googleSignin: true },\r\n      });\r\n    else {\r\n      alert(\"Account already exists!\");\r\n      auth.signOut();\r\n      // history.push(\"/onboarding#sec5\"); // redundant as user is already there\r\n    }\r\n  }\r\n\r\n  const login = (event) => {\r\n    event.preventDefault();\r\n\r\n    auth\r\n      .signInWithEmailAndPassword(email, password)\r\n      .then((auth) => {\r\n        //console.log(auth);\r\n        history.replace({ pathname: \"/home\", state: { googleSignin: false } });\r\n      })\r\n      .catch((e) => {\r\n        if (\r\n          e.message ===\r\n          \"The password is invalid or the user does not have a password.\"\r\n        ) {\r\n          swal(\"Oops!\", \"Please check your Password again\", \"error\");\r\n        } else if (\r\n          e.message ===\r\n          \"There is no user record corresponding to this identifier. The user may have been deleted.\"\r\n        ) {\r\n          swal(\"Oops!\", \"No such account exists\", \"error\");\r\n          history.replace(\"/onboarding#sec5\");\r\n          window.scrollTo({\r\n            top: document.body.scrollHeight,\r\n            left: 0,\r\n            behavior: \"smooth\",\r\n          });\r\n        } else {\r\n          swal(\"Oops!\", e.message, \"error\");\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button className=\"mbtn mbtn-tran\">\r\n        <img\r\n          src={translateIcon}\r\n          alt=\"\"\r\n          id=\"language\"\r\n          className=\"nav__menu-list__item-tran\"\r\n        />\r\n      </button>\r\n      <ul className=\"nav-dots\" id=\"js-dots\">\r\n        <li className=\"nav-dot\" onClick={HandleClick} />\r\n        <li className=\"nav-dot\" onClick={HandleClick1} />\r\n        <li className=\"nav-dot\" onClick={HandleClick2} />\r\n        <li className=\"nav-dot\" onClick={HandleClick3} />\r\n        <li className=\"nav-dot\" onClick={HandleClick4} />\r\n      </ul>\r\n      <div className=\"nav\" id=\"navbar\">\r\n        <div className=\"nav__logo\">\r\n          <img className=\"nav__logo--img\" src={applogo} alt=\"Utsav logo\" />\r\n        </div>\r\n        <ul className=\"clear nav__menu-list\">\r\n          <li className=\"nav__menu-list__item\">\r\n            <button type=\"button\" className=\"mbtn mbtn-log\" onClick={goToLogin}>\r\n              LOGIN\r\n            </button>\r\n          </li>\r\n          <li className=\"nav__menu-list__item\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"mbtn mbtn-sign\"\r\n              onClick={goToSignUp}\r\n            >\r\n              SIGN UP\r\n            </button>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div className=\"main\">\r\n        <section className=\"section section1\" id=\"sec1\">\r\n          <div className=\"section-bar\">\r\n            <header className=\"section1__head\">\r\n              <div className=\"section1__head--header\">Utsav</div>\r\n              <div className=\"section1__head--header-sub\">\r\n                Let's Explore more of india\r\n              </div>\r\n            </header>\r\n            <div className=\"section1__download\">\r\n              <a\r\n                href=\"https://play.google.com/store/apps/details?id=com.applex.utsav\"\r\n                className=\"section1__download--link\"\r\n                target=\"blank\"\r\n              >\r\n                <img\r\n                  src={playStoreImage}\r\n                  alt=\"\"\r\n                  className=\"section1__download--link-img\"\r\n                />\r\n              </a>\r\n            </div>\r\n          </div>\r\n          <div className=\"tandc\">\r\n            <a href=\"#\" alt=\"\" className=\"link\">\r\n              Terms\r\n            </a>\r\n            <a href=\"#\" alt=\"\" className=\"link\">\r\n              Privacy\r\n            </a>\r\n            <a href=\"#\" alt=\"\" className=\"link\">\r\n              Support\r\n            </a>\r\n          </div>\r\n        </section>\r\n        <section className=\"section section2\" id=\"sec2\">\r\n          <div className=\"section2__des-all\">\r\n            <div className=\"section2__des\">\r\n              <div className=\"section2__des-group\">\r\n                <div className=\"section2__des-group--head section2__main-head\">\r\n                  About Utsav\r\n                </div>\r\n                <div className=\"section2__des-group--head-sub section2__main-head-sub\">\r\n                  India is now at your fingertips.\r\n                </div>\r\n                <div className=\"section2__des-group--head-sub section2__main-head-sub\">\r\n                  Let's soak in the mood of celebration with Utsav.\r\n                </div>\r\n              </div>\r\n              <div className=\"section2__des-group\">\r\n                <div className=\"section2__des-group--head\">Explore</div>\r\n                <div className=\"section2__des-group--head-sub\">\r\n                  Utsav is here to let you virtually explore the diverse\r\n                  country.\r\n                </div>\r\n              </div>\r\n              <div className=\"section2__des-group\">\r\n                <div className=\"section2__des-group--head\">Experience</div>\r\n                <div className=\"section2__des-group--head-sub\">\r\n                  It's profuse culture, heritage and famous festivities.\r\n                </div>\r\n              </div>\r\n              <div className=\"section2__des-group\">\r\n                <div className=\"section2__des-group--head\">Expand</div>\r\n                <div className=\"section2__des-group--head-sub\">\r\n                  If you are a travel geek and want to explore more of the\r\n                  country.\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"section2__imgC\">\r\n              <div className=\"section2__imgC-area\">\r\n                <div className=\"section2__imgC-area--box\"></div>\r\n                <img\r\n                  src={laptopImage}\r\n                  alt=\"\"\r\n                  className=\"section2__imgC-area--laptop\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"tandc\">\r\n            <a href=\"#\" alt=\"\" className=\"blink\">\r\n              Terms\r\n            </a>\r\n            <a href=\"#\" alt=\"\" className=\"blink\">\r\n              Privacy\r\n            </a>\r\n            <a href=\"#\" alt=\"\" className=\"blink\">\r\n              Support\r\n            </a>\r\n          </div>\r\n        </section>\r\n        <section className=\"section section3\" id=\"sec3\">\r\n          <img src={southIndianGirlImage} alt=\"\" className=\"southIndian\" />\r\n          <div className=\"section3__overlay\"></div>\r\n        </section>\r\n        <section className=\"section section4\" id=\"sec4\">\r\n          <header className=\"section4__head\">\r\n            <div className=\"section4__head-main\">Utsav</div>\r\n            <div className=\"section4__head-sub\">\r\n              Click selfies or portraits with Indian heritage sites and\r\n              festivals!\r\n            </div>\r\n            <div className=\"section4__head-sub\">\r\n              Record a short video or express your mood with words!\r\n            </div>\r\n          </header>\r\n\r\n          <div className=\"section4__bottom-overlay\">\r\n            <img\r\n              src={demoImageBottom}\r\n              alt=\"\"\r\n              className=\"section4__bottom-overlay--img\"\r\n            />\r\n          </div>\r\n        </section>\r\n        <section className=\"section section5\" id=\"sec5\">\r\n          <div className=\"section5__back\"></div>\r\n          <div className=\"section5__box\">\r\n            <header className=\"section5__box-header\">\r\n              <div className=\"section5__box-header-logobox\">\r\n                <img\r\n                  src={applogo}\r\n                  alt=\"\"\r\n                  className=\"section5__box-header-logobox--img\"\r\n                />\r\n              </div>\r\n              <div className=\"section5__box--header-detbox\">\r\n                <div className=\"section5__box--header-detbox__head\">Utsav</div>\r\n                <div className=\"section5__box--header-detbox__head-sub\">\r\n                  Let's Explore more of India\r\n                </div>\r\n              </div>\r\n            </header>\r\n            <div className=\"section5__cover\">\r\n              <form className=\"section5__box-signup\">\r\n                <div className=\"section5__input-group\">\r\n                  <input\r\n                    type=\"email\"\r\n                    placeholder=\"Email address\"\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                    className=\"section5__input-group--input\"\r\n                  />\r\n                </div>\r\n                <div className=\"section5__input-group\">\r\n                  <input\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                    className=\"section5__input-group--input\"\r\n                  />\r\n                </div>\r\n                <div className=\"section5__input-group\">\r\n                  <button className=\"section5__btn\" onClick={register}>\r\n                    Sign Up\r\n                  </button>\r\n                </div>\r\n                <div className=\"section5__btn-divi\">- OR -</div>\r\n                <div className=\"section5__input-group\">\r\n                  <button\r\n                    className=\"section5__btn google-btn\"\r\n                    onClick={google_signin}\r\n                  >\r\n                    Sign Up with Google{\" \"}\r\n                    <img src={google_icon} alt=\"\" className=\"google-icon\" />\r\n                  </button>\r\n                </div>\r\n              </form>\r\n              <form\r\n                className=\"section5__box-signup section5__box-login shrink-down\"\r\n                id=\"loginOverlay\"\r\n              >\r\n                <div className=\"shrink-down-top\" id=\"loginShrink\">\r\n                  <span className=\"shrink-down-sm\">or</span>\r\n                  <span id=\"logText\">Log-In</span>\r\n                </div>\r\n                <div className=\"section5__input-group\">\r\n                  <input\r\n                    type=\"email\"\r\n                    placeholder=\"Email address\"\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                    className=\"section5__input-group--input\"\r\n                  />\r\n                </div>\r\n                <div className=\"section5__input-group\">\r\n                  <input\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                    className=\"section5__input-group--input\"\r\n                  />\r\n                </div>\r\n                <div className=\"section5__forgotPass\">\r\n                  <a href=\"/home\" id=\"forgot\">\r\n                    Forgot password?\r\n                  </a>\r\n                </div>\r\n                <div className=\"section5__input-group\">\r\n                  <button className=\"section5__btn\" onClick={login}>\r\n                    Log In\r\n                  </button>\r\n                </div>\r\n                <div className=\"section5__btn-divi\">- OR -</div>\r\n                <div className=\"section5__input-group\">\r\n                  <button\r\n                    className=\"section5__btn google-btn\"\r\n                    onClick={google_login}\r\n                  >\r\n                    Log In with Google{\" \"}\r\n                    <img src={google_icon} alt=\"\" className=\"google-icon\" />\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default MainHome;\r\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Posts\\Posts.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Notification\\Notification.js",["316","317","318","319","320","321","322","323","324"],"import React from 'react'\nimport { Avatar } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport { db } from \"../config/firebase.js\";\nimport Navbar from \"../Nav/nav.js\";\nimport Like from \"../images/like.png\";\nimport Chat from \"../images/chat.svg\";\n\nimport Logo from \"../images/logo.png\";\nimport Badge from '@material-ui/core/Badge';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\n\nconst StyledBadge = withStyles((theme) => ({\n  badge: {\n    backgroundColor: '#44b700',\n    color: '#44b700',\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n    '&::after': {\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      width: '100%',\n      height: '100%',\n      borderRadius: '50%',\n      animation: '$ripple 1.2s infinite ease-in-out',\n      border: '1px solid currentColor',\n      content: '\"\"',\n    },\n  },\n  '@keyframes ripple': {\n    '0%': {\n      transform: 'scale(.8)',\n      opacity: 1,\n    },\n    '100%': {\n      transform: 'scale(2.4)',\n      opacity: 0,\n    },\n  },\n}))(Badge);\n\nconst SmallAvatar = withStyles((theme) => ({\n  root: {\n    width: 22,\n    height: 22,\n\n  },\n}))(Avatar);\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\nexport default function SingleNotification(props) {\n  const [like_pic, setLikepic] = useState(Like);\n  const [chat_pic, setChatpic] = useState(Chat);\n\n  const history = useHistory();\n  const classes = useStyles();\n\n  const notifid = props.notifid;\n  //console.log(\"notifid single Notification\"+notifid);\n  const userId = props.userid;\n  const viewOnly = props.origuid === undefined ? true : false;\n  const [logo,setLogo] = useState(Logo);\n  //alert(\"here\"+props.origuid);\n  function viewProfile() {\n    //alert(\"but inside\")\n    // history.push({ pathname: \"/profile\", state: { id: userId } });\n    history.push(\"/profile/\" + userId);\n\n  }\n\n  function viewNotif() {\n    history.push({ pathname: \"/posts/false/\" + props.postid, state: { notifid: notifid } });\n  }\n  return (\n    <div className=\"notification-list-items profile-container\">\n      {props.type === \"like\" ? (<div className={classes.root}>\n        <Badge overlap=\"circle\" anchorOrigin={{ vertical: 'bottom', horizontal: 'right', }} badgeContent={<SmallAvatar src={like_pic} />}>\n          <Avatar alt={props.username} src={props.imgsrc} onClick={viewProfile} />\n        </Badge>\n      </div>) : props.type === \"comment\" ? (<div className={classes.root}>\n        <Badge overlap=\"circle\" anchorOrigin={{ vertical: 'bottom', horizontal: 'right', }} badgeContent={<SmallAvatar src={chat_pic} />}>\n          <Avatar alt={props.username} src={props.imgsrc} onClick={viewProfile} />\n        </Badge>\n      </div>) : props.type === \"application\" ? \n      \n      <div className={classes.root}>\n        <Avatar alt=\"Utsav\" src={logo}/>\n      </div>\n      :(<div className={classes.root}>\n\n        <Avatar alt={props.username} src={props.imgsrc} onClick={viewProfile} />\n\n      </div>)}\n      <div style={{textAlign:\"left\"}}>\n        {props.type === \"application\" ? \n        <span className=\"notification-user\">Utsav</span>\n        : <span className=\"notification-user\" onClick={viewProfile}>{props.username + \" \"}</span>}\n\n        {props.type === \"share\" ? <span onClick={viewNotif}>shared a post.</span> :\n          props.type === \"like\" ? <span onClick={viewNotif}>liked your post.</span> :\n          props.type === \"application\" ? <span> Welcome to Utsav start sharing, posting, browsing through various festivals.</span> :\n            props.type === \"comment\" ? <><span onClick={viewNotif}>commented on your post.</span>\n              <br></br><input readOnly type=\"text\" value={\" \" + props.comment.slice(0, 9)} style={{ border: \"none\", borderRadius: \"5px\", width: \"100%\", height: \"1.5rem\", backgroundColor: \"#f1f1f1\", marginBottom: \"5px\" }}></input><br></br></> : <p></p>}\n\n        \n      </div>\n    </div>\n  )\n}\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Others\\Preloader.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Sidebars\\Sidebar_1.js",["325","326","327","328","329"],"import React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { auth } from \"../config/firebase.js\";\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\n// import LanguageIcon from '@material-ui/icons/Language';\n// import InvertColorsIcon from '@material-ui/icons/InvertColors';\n// import ShareIcon from '@material-ui/icons/Share';\n// import PermContactCalendarIcon from '@material-ui/icons/PermContactCalendar';\n// import StarsIcon from '@material-ui/icons/Stars';\n// import InfoIcon from '@material-ui/icons/Info';\n// import SecurityIcon from '@material-ui/icons/Security';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\n// import TrendingUpIcon from '@material-ui/icons/TrendingUp';\n// import PhotoSizeSelectActualIcon from '@material-ui/icons/PhotoSizeSelectActual';\nimport './styles/Sidebar_1.css';\nimport Translate from '../Translate/Translate.js';\n\nconst close_sidebar = () => {\n    var sidebar = document.getElementById(\"side-menu\");\n    sidebar.style.left = \"-100%\";\n}\n\nconst Sidebar1 = (props) => {\n\n    const history = useHistory('');\n    const username = localStorage.getItem(\"Username\");\n    const dp = localStorage.getItem(\"Dp\");\n    const type = localStorage.getItem(\"type\")\n    const follows = localStorage.getItem(\"follows\");\n    const visits = localStorage.getItem(\"visits\");\n    let upvotes = null;\n    if( type === 'com')\n        upvotes = localStorage.getItem(\"upvotes\");\n    const lang = props.lang;\n\n\n    const logout = (event) => {\n        event.preventDefault();\n        auth.signOut();\n        localStorage.removeItem('Username');\n        localStorage.removeItem(\"Dp\");\n        localStorage.removeItem(\"city\");\n        if(type === 'indi')\n            localStorage.removeItem(\"gender\");\n        if (type === 'com')\n            localStorage.removeItem('upvotes');\n        localStorage.removeItem(\"type\");\n        localStorage.removeItem('visits');\n        localStorage.removeItem('follows');\n        history.push(\"/login\");\n    }\n\n    function viewProfile() {\n        history.push(\"/profile/\" + props.user.uid);\n    }\n\n    return (\n        <div className=\"sidebar\" id=\"side-menu\">\n            <div className=\"close-icon\">\n                <ArrowBackIosIcon onClick={close_sidebar} />\n            </div>\n            <div>\n                    \n                <div onClick={viewProfile}>\n                    <img src={dp} alt={username} className=\"profile-pic\" />\n                    <h5 className=\"username\">{username}</h5>\n                </div>\n            </div>\n            <div className=\"forTesting\">\n                <p>{follows + \"  Follows\"}</p>\n                {type === 'com' ? <p>{ upvotes + \"  Upvotes\"}</p> : null}\n                <p>{visits + \"  Visits\"}</p>\n            </div>\n            {/* <hr />\n            <ul>\n                <li className=\"sidebar-link-container\" key=\"1\" data-aos=\"slide-right\" data-aos-offset=\"10\">\n                    <LanguageIcon className=\"sidebar-icon\" fontSize=\"small\" />\n                    <Link to='#' className=\"sidebar-link\"> Select language</Link>\n                </li>\n                <li className=\"sidebar-link-container\" key=\"2\" data-aos=\"slide-right\" data-aos-offset=\"10\">\n                    <InvertColorsIcon className=\"sidebar-icon\" fontSize=\"small\" />\n                    <Link to=\"#\" className=\"sidebar-link\">Set Theme</Link>\n                </li>\n                <li className=\"sidebar-link-container trending-hashtag-sidebar\" key=\"3\" data-aos=\"slide-right\" data-aos-offset=\"10\">\n                    <TrendingUpIcon className=\"sidebar-icon\" fontSize=\"small\" />\n                    <Link to=\"#\" className=\"sidebar-link\">Trending hashtags</Link>\n                </li>\n            </ul>\n            <hr />\n            <h6>Communication</h6>\n            <ul>\n                <li className=\"sidebar-link-container\" key=\"1\" data-aos=\"slide-right\" data-aos-offset=\"10\">\n                    <ShareIcon className=\"sidebar-icon\" fontSize=\"small\" />\n                    <Link to=\"#\" className=\"sidebar-link\" >Share with friends</Link>\n                </li>\n                <li className=\"sidebar-link-container\" key=\"2\" data-aos=\"slide-right\" data-aos-offset=\"10\">\n                    <PermContactCalendarIcon className=\"sidebar-icon\" fontSize=\"small\" />\n                    <Link to=\"/contactus\" className=\"sidebar-link\">Contact us</Link>\n                </li>\n                <li className=\"sidebar-link-container\" key=\"3\" data-aos=\"slide-right\" data-aos-offset=\"10\">\n                    <StarsIcon className=\"sidebar-icon\" fontSize=\"small\" />\n                    <Link to=\"#\" className=\"sidebar-link\">Rate Us</Link>\n                </li>\n            </ul>\n            <hr />\n            <h6>Useful Information</h6>\n            <ul>\n                <li className=\"sidebar-link-container\" key=\"1\">\n                    <InfoIcon className=\"sidebar-icon\" fontSize=\"small\" />\n                    <Link to=\"/aboutus\" className=\"sidebar-link\">About Us</Link>\n                </li>\n                <li className=\"sidebar-link-container\" key=\"2\">\n                    <SecurityIcon className=\"sidebar-icon\" fontSize=\"small\" />\n                    <Link to=\"#\" className=\"sidebar-link\">Privacy</Link>\n                </li>\n            </ul>\n            \n                <li className=\"sidebar-link-container\" >\n                    <LanguageIcon className=\"sidebar-icon\" fontSize=\"small\"/>\n                    <Link to=\"/languagesettings\" className=\"sidebar-link\"><Translate lang={lang}>Change Language</Translate></Link>\n                </li>\n            <hr /> */}\n            {/* <h6>Account</h6> */}\n            \n        </div>\n    );\n}\n\nexport default Sidebar1;\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Nav\\nav.js",["330","331","332"],"import React from \"react\";\nimport { Link, NavLink, useHistory } from \"react-router-dom\";\nimport logo from \"../images/logo.png\";\nimport HomeIcon from \"@material-ui/icons/HomeOutlined\";\nimport PeopleIcon from \"@material-ui/icons/PeopleAltOutlined\";\nimport OndemandVideoIcon from \"@material-ui/icons/VideoLibraryOutlined\";\nimport NotificationsActiveIcon from \"@material-ui/icons/NotificationsActive\";\nimport PostAddIcon from \"@material-ui/icons/PostAdd\";\nimport HistoryIcon from \"@material-ui/icons/History\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport NotesIcon from \"@material-ui/icons/Notes\";\nimport Modal from \"@material-ui/core/Modal\";\nimport \"./styles/Nav.css\";\nimport \"./styles/Mainsearchbar.css\";\nimport { auth } from \"../config/firebase.js\";\n//import './styles/w3.css'\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { db } from \"../config/firebase.js\";\nimport cities from \"../data/cities\";\nimport states from \"../data/states\";\nimport PersonOutlineSharpIcon from \"@material-ui/icons/PersonOutlineSharp\";\nimport GTranslateSharpIcon from \"@material-ui/icons/GTranslateSharp\";\nimport NotificationsSharpIcon from \"@material-ui/icons/NotificationsSharp\";\nimport MoreVertSharpIcon from \"@material-ui/icons/MoreVertSharp\";\nimport ModalSetLanguage from \"../Translate/ModalSetLanguage\";\nimport Button from \"@material-ui/core/Button\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport Grow from \"@material-ui/core/Grow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Popper from \"@material-ui/core/Popper\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport MenuList from \"@material-ui/core/MenuList\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst open_sidebar = () => {\n  var sidebar = document.getElementById(\"side-menu\");\n  sidebar.style.left = 0;\n};\n\nconst Navbar = (props) => {\n  const history = useHistory();\n  //const user = props.user;\n  var storedNames = JSON.parse(localStorage.getItem(\"recentSearches\"));\n  const [search, setSearch] = useState(\"\");\n  const [filtervalues, setFilterValues] = useState([]);\n  const [searchResult, setSearchResult] = useState(\"\");\n  const [searchOption, setSearchOption] = useState(\"small_name\");\n  const [userList, setUserList] = useState([]);\n  const [showUserList, setShowUserList] = useState(false);\n  const [emptyCityStateList, setEmptyCityStateList] = useState(false);\n  const [showMoreResults, setShowMoreResults] = useState(false);\n  const [update, setUpdate] = useState(false);\n  const [recentSearches, setRecentSearches] = useState(\n    storedNames === null ? [] : storedNames\n  );\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    function getData() {\n      db.collection(\"Users\")\n        .orderBy(\"small_name\")\n        .startAt(search.toLowerCase())\n        .limit(6)\n        .onSnapshot((snapshot) => {\n          if (snapshot.empty) {\n            setSearchResult(\"No results\");\n          } else {\n            setFilterValues(\n              snapshot.docs.map((doc) => ({\n                id: doc.id,\n                data: doc.data(),\n              }))\n            );\n            setUpdate(false);\n            setShowMoreResults(true);\n          }\n        });\n    }\n\n    if (search !== \"\" && searchOption === \"small_name\") getData();\n  }, [search, searchOption]);\n\n  useEffect(() => {\n    if (update) {\n      const last = filtervalues[filtervalues.length - 1];\n      setShowMoreResults(false);\n      console.log(\"UseEffect\");\n\n      if (last !== undefined) {\n        db.collection(\"Users\")\n          .orderBy(searchOption)\n          .startAfter(last.data.small_name)\n          .limit(8)\n          .onSnapshot((snapshot) => {\n            if (!snapshot.empty) {\n              const array = snapshot.docs.map((doc) => ({\n                id: doc.id,\n                data: doc.data(),\n              }));\n\n              setFilterValues([...filtervalues, ...array]);\n              setShowMoreResults(true);\n            }\n          });\n      }\n    }\n  }, [update]);\n\n  useEffect(() => {\n    //checkForEmptyCityStateList\n    let result = [];\n    if (searchOption === \"small_city\") {\n      result = cities.filter((val) => {\n        if (search === \"\") return val;\n        else if (val.name.toLowerCase().includes(search.toLowerCase())) {\n          return val;\n        }\n        return null;\n      });\n    } else if (searchOption === \"small_state\") {\n      result = states.filter((val) => {\n        if (search === \"\") return val;\n        else if (val.name.toLowerCase().includes(search.toLowerCase())) {\n          return val;\n        }\n        return null;\n      });\n    }\n\n    if (result.length === 0) {\n      setEmptyCityStateList(true);\n    } else {\n      setEmptyCityStateList(false);\n    }\n  }, [searchOption, search]);\n\n  function myFunction() {\n    document.getElementById(\"myDropdown\").classList.add(\"show\");\n  }\n\n  const getUserData = (value) => {\n    setSearchResult(\"\");\n    db.collection(\"Users\")\n      .where(searchOption, \"==\", value.toLowerCase())\n      .get()\n      .then((snap) => {\n        // console.log(snap.docs);\n        if (snap.empty) setSearchResult(\"No Matches Found\");\n        const array = snap.docs.map((doc) => ({\n          id: doc.id,\n          data: doc.data(),\n        }));\n\n        setSearch(value);\n        setUserList([...array]);\n        setShowUserList(true);\n      });\n  };\n\n  function CityList(cvalue, index) {\n    return (\n      <p\n        className=\"CityStateListItem\"\n        key={index.toString()}\n        onClick={() => getUserData(cvalue.name)}\n      >\n        {cvalue.name}\n      </p>\n    );\n  }\n\n  function StateList(cvalue, index) {\n    return (\n      <p\n        className=\"CityStateListItem\"\n        key={index.toString()}\n        onClick={() => getUserData(cvalue.name)}\n      >\n        {cvalue.name}\n      </p>\n    );\n  }\n\n  function Recent(cvalue, index) {\n    return (\n      <p\n        key={index.toString()}\n        className=\"recentsearch\"\n        onClick={() => viewProfile(cvalue.id, cvalue.name)}\n      >\n        <HistoryIcon fontSize=\"small\" style={{ marginRight: 5 }} />\n        {cvalue.name}\n      </p>\n    );\n  }\n\n  function getUserList(currentValue, index) {\n    //alert(\"helo\");\n\n    return (\n      <div\n        key={index.toString()}\n        onClick={() => viewProfile(currentValue.id, currentValue.data.name)}\n        className=\"userRow\"\n      >\n        <table>\n          <tbody>\n            <tr>\n              <td>\n                {\" \"}\n                <img\n                  style={{ borderRadius: \"50%\", width: \"40px\", height: \"40px\" }}\n                  src={currentValue.data.dp}\n                  alt=\"dp\"\n                />\n              </td>\n              <td>\n                <option\n                  key={currentValue.id}\n                  data-icon={currentValue.data.dp}\n                  style={{ marginLeft: \"10px\", fontWeight: \"bold\" }}\n                >\n                  {currentValue.data.name}\n                </option>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  var myDropdown = document.getElementById(\"myDropdown\");\n  window.onclick = function (e) {\n    if (e.target.matches(\".closebtn\")) {\n      if (myDropdown.classList.contains(\"show\")) {\n        myDropdown.classList.remove(\"show\");\n      }\n    }\n  };\n\n  function typing(e) {\n    setSearch(e.target.value);\n    if (showUserList) setShowUserList(false);\n\n    if (e.target.value.length >= 3) {\n      myDropdown.classList.add(\"show\");\n      //console.log(filtervalues)\n    } else {\n      setFilterValues([]);\n      //myDropdown.classList.remove('show');\n    }\n  }\n\n  function closeDropdown() {\n    myDropdown.classList.remove(\"show\");\n    setSearch(\"\");\n  }\n\n  function SearchOptionHandle(e) {\n    setSearchOption(e.target.attributes.value.value);\n    setSearch(\"\");\n    setShowUserList(false);\n    setUserList([]);\n  }\n\n  const openLangModal = () => {\n    if (window.innerWidth > 750) setOpen(true);\n    else history.push(\"/createpost\");\n  };\n\n  function showMore(entries) {\n    if (entries[0] && entries[0].isIntersecting) {\n      if (filtervalues[0]) {\n        setUpdate(true);\n      }\n    }\n  }\n\n  let options = {\n    rootMargin: \"0px\",\n    threshold: 0.5,\n  };\n\n  const element = document.getElementById(\"showMoreResults\");\n  if (element) {\n    let observer = new IntersectionObserver(showMore, options);\n    observer.observe(element);\n  }\n\n  function viewProfile(userId, name) {\n    history.push(\"/profile/\" + userId);\n\n    let array = recentSearches;\n    const index = array.findIndex((cvalue) => {\n      return cvalue.id === userId;\n    });\n    if (index !== -1) array.splice(index, 1);\n    localStorage.setItem(\n      \"recentSearches\",\n      JSON.stringify([{ name: name, id: userId }, ...array])\n    );\n    if (array.length > 6) array.pop();\n\n    // localStorage.removeItem(\"recentSearches\");\n  }\n\n  const closeLangModal = () => {\n    setOpen(false);\n  };\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      display: \"flex\",\n    },\n    paper: {\n      marginRight: theme.spacing(2),\n    },\n  }));\n\n  function MenuListComposition() {\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n    const anchorRef = React.useRef(null);\n\n    const handleToggle = () => {\n      setOpen((prevOpen) => !prevOpen);\n    };\n\n    const handleClose = (event) => {\n      if (anchorRef.current && anchorRef.current.contains(event.target)) {\n        return;\n      }\n\n      setOpen(false);\n    };\n    const type = localStorage.getItem(\"type\");\n    const logout = (event) => {\n      event.preventDefault();\n      auth.signOut();\n      localStorage.removeItem(\"Username\");\n      localStorage.removeItem(\"Dp\");\n      localStorage.removeItem(\"city\");\n      if (type === \"indi\") localStorage.removeItem(\"gender\");\n      if (type === \"com\") localStorage.removeItem(\"upvotes\");\n      localStorage.removeItem(\"type\");\n      localStorage.removeItem(\"visits\");\n      localStorage.removeItem(\"follows\");\n      // history.push('/login')\n      history.push(\"/onboarding\");\n    };\n    function handleListKeyDown(event) {\n      if (event.key === \"Tab\") {\n        event.preventDefault();\n        setOpen(false);\n      }\n    }\n\n    // return focus to the button when we transitioned from !open -> open\n    const prevOpen = React.useRef(open);\n    React.useEffect(() => {\n      if (prevOpen.current === true && open === false) {\n        anchorRef.current.focus();\n      }\n\n      prevOpen.current = open;\n    }, [open]);\n\n    return (\n      <div className={classes.root}>\n        <div>\n          <span\n            ref={anchorRef}\n            aria-controls={open ? \"menu-list-grow\" : undefined}\n            aria-haspopup=\"true\"\n            onClick={handleToggle}\n            id=\"morevertical_nav\"\n          >\n            <MoreVertSharpIcon />\n          </span>\n          <Popper\n            open={open}\n            anchorEl={anchorRef.current}\n            role={undefined}\n            transition\n            disablePortal\n            style={{zIndex:\"8\"}}\n          >\n            {({ TransitionProps, placement }) => (\n              <Grow\n                {...TransitionProps}\n                style={{\n                  transformOrigin:\n                    placement === \"bottom\" ? \"center top\" : \"center bottom\",\n                }}\n              >\n                <Paper>\n                  <ClickAwayListener onClickAway={handleClose}>\n                    <MenuList\n                      autoFocusItem={open}\n                      id=\"menu-list-grow\"\n                      onKeyDown={handleListKeyDown}\n                    >\n                      <MenuItem onClick={handleClose}>Profile</MenuItem>\n                      <MenuItem onClick={handleClose}>My account</MenuItem>\n                      <MenuItem onClick={logout}>Logout</MenuItem>\n                    </MenuList>\n                  </ClickAwayListener>\n                </Paper>\n              </Grow>\n            )}\n          </Popper>\n        </div>\n      </div>\n    );\n  }\n  return (\n    <>\n      <div className=\"Nav\">\n        <div className=\"nav-top-sm\">\n          <div className=\"sidebar-btn\" onClick={open_sidebar}>\n            <NotesIcon\n              style={{ color: \"black\", fontSize: \"28px\", marginRight: \"10px\" }}\n            />\n          </div>\n          <Link to=\"/home\">\n            <img src={logo} alt=\"\" className=\"logo-sm\" />\n          </Link>\n          <span className=\"nav-brand-heading-sm\">Utsav</span>\n          <NavLink to=\"#\">\n            <SearchIcon style={{ color: \"white\", margin: \"0 10px\" }} />\n          </NavLink>\n          <NavLink to=\"/notifications\">\n            <NotificationsActiveIcon style={{ color: \"white\" }} />\n          </NavLink>\n        </div>\n\n        <div className=\"menu\">\n          <div id=\"nav_brandSearch\">\n            {\" \"}\n            <div className=\"nav-brand\">\n              <img src={logo} alt=\"logo\" className=\"logo\" />\n              {/* <span className=\"nav-brand-heading\">Utsav</span> */}\n            </div>\n            <div className=\"search\">\n              <div className=\"search-icon\">\n                <SearchIcon />\n              </div>\n              <div className=\"dropdown\">\n                <input\n                  type=\"text\"\n                  value={search}\n                  onClick={myFunction}\n                  autoComplete=\"off\"\n                  onChange={typing}\n                  className=\"searchbox dropbtn\"\n                />\n              </div>\n\n              <div className=\"dropdown-content\" id=\"myDropdown\">\n                <button className=\"closebtn\" onClick={closeDropdown}>\n                  &#10005;\n                </button>\n                <div className=\"searchOption\">\n                  <span\n                    className={searchOption === \"small_name\" ? \"active\" : \"\"}\n                    value=\"small_name\"\n                    onClick={SearchOptionHandle}\n                  >\n                    Name\n                  </span>\n                  <span\n                    className={searchOption === \"small_city\" ? \"active\" : \"\"}\n                    value=\"small_city\"\n                    onClick={SearchOptionHandle}\n                  >\n                    City/District\n                  </span>\n                  <span\n                    className={searchOption === \"small_state\" ? \"active\" : \"\"}\n                    value=\"small_state\"\n                    onClick={SearchOptionHandle}\n                  >\n                    State\n                  </span>\n                </div>\n                {search === \"\" &&\n                recentSearches.length > 0 &&\n                searchOption === \"small_name\" ? (\n                  <div>\n                    <p style={{ color: \"gray\", marginBottom: 0 }}>\n                      <small>Recent Searches</small>\n                    </p>\n                    {recentSearches.map(Recent)}\n                  </div>\n                ) : null}\n\n                {searchOption === \"small_name\" ? (\n                  <div className=\"searchResults\">\n                    {search && filtervalues.map(getUserList)}\n                    {search === \"\" ? \"\" : searchResult}\n                    {showMoreResults && <div id=\"showMoreResults\"></div>}\n                  </div>\n                ) : (\n                  <div className=\"searchResults\">\n                    {showUserList === false ? (\n                      <>\n                        {searchOption === \"small_city\"\n                          ? cities\n                              .filter((val) => {\n                                if (search === \"\") return val;\n                                else if (\n                                  val.name\n                                    .toLowerCase()\n                                    .includes(search.toLowerCase())\n                                ) {\n                                  return val;\n                                }\n                                return null;\n                              })\n                              .map(CityList)\n                          : states\n                              .filter((val) => {\n                                if (search === \"\") return val;\n                                else if (\n                                  val.name\n                                    .toLowerCase()\n                                    .includes(search.toLowerCase())\n                                ) {\n                                  return val;\n                                }\n                                return null;\n                              })\n                              .map(StateList)}\n                        {emptyCityStateList && (\n                          <p style={{ fontWeight: \"bold\", fontSize: 14 }}>\n                            No matches found\n                          </p>\n                        )}\n                      </>\n                    ) : (\n                      <div>\n                        <p>\n                          <small>\n                            Showing users filtered by{\" \"}\n                            {searchOption === \"small_city\"\n                              ? \" city \"\n                              : \" state \"}{\" \"}\n                            {search}\n                          </small>\n                        </p>\n                        {userList.map(getUserList)}\n                        {search === \"\" ? (\n                          \"\"\n                        ) : (\n                          <p style={{ fontWeight: \"bold\", fontSize: 14 }}>\n                            {searchResult}\n                          </p>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>{\" \"}\n        </div>\n        <div className=\"menu_a\">\n          <NavLink to=\"/home\" exact activeClassName=\"menu-active\">\n            <HomeIcon style={{ marginBottom: \"3px\" }} />\n          </NavLink>\n          <NavLink to=\"/people\" exact activeClassName=\"menu-active\">\n            <PeopleIcon style={{ marginBottom: \"3px\" }} />\n          </NavLink>\n          <NavLink to=\"/clips\" exact activeClassName=\"menu-active\">\n            <OndemandVideoIcon />\n          </NavLink>\n          <NavLink to=\"/community\" exact activeClassName=\"menu-active\">\n            <PostAddIcon />\n          </NavLink>\n        </div>\n\n        <div id=\"right_buttons_menu\">\n          <button id=\"menu_button_a\">Post</button>\n          <button onClick={openLangModal}>\n            <GTranslateSharpIcon />\n          </button>\n          <Link to=\"/notifications\">\n            <button>\n              <NotificationsSharpIcon />\n            </button>\n          </Link>\n          <button>\n            <PersonOutlineSharpIcon />\n          </button>\n          <button id=\"morevertical_nav\">\n            <MenuListComposition />\n          </button>\n        </div>\n      </div>\n\n      <Modal open={open} onClose={closeLangModal}>\n        <center style={{ transform: \"translate(0px, 20%)\" }}>\n          <div\n            style={{\n              backgroundColor: \"white\",\n              width: \"fit-content\",\n              height: \"250px\",\n              borderRadius: \"5px\",\n              padding: \"1rem\",\n              border: \"0.05rem solid lightgray\",\n            }}\n          >\n            <span\n              onClick={closeLangModal}\n              style={{\n                float: \"right\",\n                cursor: \"pointer\",\n                borderRadius: \"50%\",\n                background: \"rgba(0,0,0,0.07)\",\n                padding: \"5px 10px\",\n                color: \"rgba(0,0,0,0.7)\",\n              }}\n            >\n              &#10006;\n            </span>\n            <br></br>\n            <br></br>\n            <ModalSetLanguage />\n          </div>\n        </center>\n      </Modal>\n    </>\n  );\n};\n\nexport default Navbar;\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Sidebars\\Sidebar_2.js",["333","334","335","336"],"import React, { useEffect, useState } from 'react';\n// //import * as temp from 'moment';\n// import Avatar from '@material-ui/core/Avatar';\nimport './styles/Sidebar_2.css';\nimport { db } from \"../config/firebase.js\";\n//import upvote_pujo_data from \"./data/upvote_pujo\";\nimport { Link } from 'react-router-dom';\nimport UpvotePujoRow from './UpvotePujoRow';\nimport Trending from '../Others/Trending_hashtags';\n\n\nimport SidebarNotification from '../Notification/SidebarNotification.js';\nimport Translate from \"../Translate/Translate\";\n//const moment = temp[\"default\"];\nimport NoNotifImage from '../images/no-notif.png';\nfunction time_ago(time) {\n\n    switch (typeof time) {\n        case 'number':\n            break;\n        case 'string':\n            time = +new Date(time);\n            break;\n        case 'object':\n            if (time.constructor === Date) time = time.getTime();\n            break;\n        default:\n            time = +new Date();\n    }\n    var time_formats = [\n        [60, 'seconds', 1], // 60\n        [120, '1 minute', '1 minute from now'], // 60*2\n        [3600, 'minutes', 60], // 60*60, 60\n        [7200, '1 hour', '1 hour from now'], // 60*60*2\n        [86400, 'hours', 3600], // 60*60*24, 60*60\n        [172800, 'Yesterday', 'Tomorrow'], // 60*60*24*2\n        [604800, 'days', 86400], // 60*60*24*7, 60*60*24\n        [1209600, 'week', 'Next week'], // 60*60*24*7*4*2\n        [2419200, 'weeks', 604800], // 60*60*24*7*4, 60*60*24*7\n        [4838400, 'month', 'Next month'], // 60*60*24*7*4*2\n        [29030400, 'months', 2419200], // 60*60*24*7*4*12, 60*60*24*7*4\n        [58060800, 'year', 'Next year'], // 60*60*24*7*4*12*2\n        [2903040000, 'years', 29030400], // 60*60*24*7*4*12*100, 60*60*24*7*4*12\n        [5806080000, 'century', 'Next century'], // 60*60*24*7*4*12*100*2\n        [58060800000, 'centuries', 2903040000] // 60*60*24*7*4*12*100*20, 60*60*24*7*4*12*100\n    ];\n    var seconds = (+new Date() - time) / 1000,\n        token = 'ago',\n        list_choice = 1;\n\n    if (seconds === 0) {\n        return 'Just now'\n    }\n    if (seconds < 0) {\n        seconds = Math.abs(seconds);\n        token = 'from now';\n        list_choice = 2;\n    }\n    var i = 0,\n        format;\n    while (format = time_formats[i++])\n        if (seconds < format[0]) {\n            if (typeof format[2] == 'string')\n                return format[list_choice];\n            else\n                return Math.floor(seconds / format[2]) + ' ' + format[1] + ' ';\n        }\n    return time;\n}\n\nfunction Sidebar2({ user,lang }) {\n\n    const uid = user.uid;\n    //console.log(user.uid);\n    const [notifAll, setNotifAll] = useState([]);\n    const [noNotif,setNoNotif] = useState(NoNotifImage);\n    const [communitties, setCommitties] = useState([]);\n    \n\n    useEffect(() => {\n        async function getNotifData() {\n\n            db.collection(\"Users\").doc(\"rMUtQ61U22OrVA2Aw9FP37ASqUc2\").collection(\"notifications\").orderBy(\"datenotif\", \"desc\")\n                .onSnapshot((snapshot) => {\n                    setNotifAll(snapshot.docs.map((doc) => {\n                        return ({\n                            id: doc.id,\n                            data: doc.data(),\n                        });\n\n                    }\n                    ));\n                });\n\n        }\n\n        getNotifData();\n    }, []);\n\n    useEffect(() => {\n        db.collection(\"Users\").where('type', '==', 'com').onSnapshot((snapshot) => {\n            setCommitties(snapshot.docs.map(doc => ({\n                id: doc.id,\n                data: doc.data(),\n            })));\n        })\n    }, []);\n    \n\n    const NotificationRow = (props) => {\n        //alert(props.time);\n        return (\n            <>    \n            {props.seen === \"yes\" ? (\n                <li className=\"notification-list-item\" >\n                       \n                <SidebarNotification\n              imgsrc={props.imgsrc}\n              userid={props.userid}\n              origuid={uid}\n              username={props.username}\n              type={props.type}\n              comment={props.comment}\n              postid = {props.postId}\n              time = {time_ago(props.time)}\n              seen={props.seen}\n              notifid={props.notifid}\n              /> \n               \n            </li>\n            ):(\n                <li className=\"notification-list-item\" style={{backgroundImage: \"linear-gradient(to bottom right,rgb(255,255,224,0),rgb(255, 255, 224,1))\"}}>\n                       \n                        <SidebarNotification\n                      imgsrc={props.imgsrc}\n                      userid={props.userid}\n                      origuid={uid}\n                      username={props.username}\n                      type={props.type}\n                      comment={props.comment}\n                      postid = {props.postId}\n                      time = {time_ago(props.time)}\n                      seen={props.seen}\n                      notifid={props.notifid}\n                      /> \n                       \n                    </li>\n            )}\n                    \n                 \n                \n            </>\n        );\n    }\n\n    const Notification = (notifdata) => {\n        const notifData = notifdata.data;\n\n        return (\n            <NotificationRow\n                key={notifdata.id}\n                notifid={notifdata.id}\n                username={notifData.username}\n                userid={notifData.userid}\n                imgsrc={notifData.imgsrc}\n                time={notifData.datenotif}\n                postId={notifData.postid}\n                type={notifData.type}\n                comment={notifData.commenttext}\n                seen={notifData.seen}\n                 />\n        );\n\n    }\n\n\n    const UpvotePujo = (cvalue) => {\n        if (cvalue.id === uid) {\n            return \"\";\n        }\n        else {\n            return (\n                <UpvotePujoRow\n                    key={cvalue.id}\n                    id={cvalue.id}\n                    name={cvalue.data.name}\n                    imgsrc={cvalue.data.dp}\n                    uid={uid}\n                />\n            );\n        }\n    }\n    return (\n        <>\n            <div className=\"sidebar2\">\n                <div className=\"notification\">\n                    <h5 className=\"notification-heading\" data-aos=\"fade-left\" data-aos-offset=\"20\"><Translate lang={lang}>Notifications</Translate></h5>\n                    {notifAll.length === 0 && <div style={{textAlign:\"center\"}}>\n                        <div className=\"notification-list-item\" style={{backgroundColor:\"white\"}}>\n                        \n                        <SidebarNotification type=\"application\"/>\n                        </div>\n                    </div> }\n                    { <ul className=\"notification-list\" >\n                        {notifAll.length >= 4 ? notifAll.slice(0,4).map(Notification) \n                        : notifAll.map(Notification)}\n                        \n                        \n                        <li style={{textAlign:\"center\",padding:\"0\"}}><Link to=\"/notifications\"><br></br><button className=\"see-all-notif-button\" style={{margin:\"0\"}}>See All</button></Link></li>\n                    </ul>\n                    }\n                    \n                    \n                    \n                </div>\n                \n                    <Trending lang={lang}/>\n                \n                <div className=\"upvote-pujo\">\n                    <h5 className=\"upvote-pujo-heading\" data-aos=\"fade-left\" data-aos-offset=\"20\"><Translate lang={lang}>Upvote Pujo</Translate></h5>\n                    <div className=\"upvote-pujo-list\">\n                        {communitties.map(UpvotePujo)}\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n\n}\n\nexport default Sidebar2;\n\n// {props.seen === \"yes\" ? <span id=\"seen\"></span> : \"\"}\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Others\\Trending_hashtags.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Utilities\\checkUser.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Translate\\Translate.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Sidebars\\UpvotePujoRow.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\data\\states.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\data\\cities.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Posts\\Post.js",["337"],"import React, { useState, useEffect, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport './styles/Post.css';\nimport classes from './styles/viewPost.module.css';\nimport likeListClasses from './styles/likelist.module.css';\nimport { Avatar, Modal } from '@material-ui/core';\nimport { db } from \"../config/firebase.js\";\nimport FavoriteIcon from '@material-ui/icons/ThumbUp';\nimport ChatIcon from '@material-ui/icons/Chat';\nimport ShareIcon from '@material-ui/icons/Share';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport Carouselpost from './Carouselpost';\nimport WhatsAppIcon from '@material-ui/icons/WhatsApp';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport Comment from './Comments';\nimport LikeList from './LikeList';\nimport EditPost from \"./Editpost\";\nimport editpostClasses from './styles/editpost.module.css';\nimport firebase from \"firebase\";\nimport { time_ago } from \"./Comments\";\nimport ClearIcon from '@material-ui/icons/Clear';\nimport swal from 'sweetalert';\nimport { ThumbUp } from '@material-ui/icons';\nimport ReactHashtag from \"react-hashtag\";\n\nfunction Post({ postId, origuid, origusertype, origusername, origuserdp, userId, postusername, postuserdp, txt, img, ts, video, clips, likecount, commentcount, viewSinglePost }) {\n\n    const history = useHistory();\n    const menuRef = useRef();\n    const menubtnRef = useRef();\n    const [comment, setComment] = useState('');\n    const [show, setShow] = useState('not_liked');\n    const [show2, setShow2] = useState('textforlike');\n    const [commentL, setcommentL] = useState([]);\n    const [likeCount, setLikeCount] = useState(likecount);\n    const [showMoreComment, setShowMoreComment] = useState(true);\n    const [message, setMessage] = useState('');\n    const viewOnly = origuid === undefined ? true : false;\n    const collection = clips ? 'Clips' : 'Feeds';\n    const [openMoreOptions, setOpenMoreOptions] = useState(false);\n    const [showLikeList, setShowLikeList] = useState(false);\n    const [openEditPostModal, setOpenEditPostModal] = useState(false);\n    const [openSinglePost, setOpenSinglePost] = useState(false);\n\n    var sharemodal;\n    if (viewSinglePost === true)\n        sharemodal = document.getElementById(\"shareModal2\");\n    else\n        sharemodal = document.getElementById(\"shareModal\");\n\n    function share() {\n        sharemodal.style.display = \"block\";\n    }\n\n    function closeshare() {\n        sharemodal.style.display = \"none\";\n    }\n\n    window.onclick = function (event) {\n        if (event.target === sharemodal) {\n            sharemodal.style.display = \"none\";\n        }\n    }\n\n    useEffect(() => {\n        let unsubscribe;\n        const lim = viewSinglePost ? 8 : 2;\n        if (postId) {\n\n            unsubscribe = db.collection(collection).doc(postId).collection(\"commentL\").orderBy(\"ts\", \"desc\").limit(lim).onSnapshot((snapshot) => {\n                setcommentL(snapshot.docs.map((doc) => {\n                    return ({\n                        id: doc.id,\n                        data: doc.data(),\n                    });\n                }\n                ));\n            });\n        }\n        return () => {\n            unsubscribe();\n        }\n    }, [postId, collection, viewSinglePost]);\n\n    useEffect(() => {\n\n        db.collection(\"Feeds\").doc(postId).collection(\"flameL\").doc(origuid).get()\n            .then((doc) => {\n                if (doc.exists) {\n                    setShow('red');\n                    setShow2('blue');\n                }\n            });\n\n    }, [postId, origuid]);\n\n    useEffect(() => {\n\n        document.addEventListener(\"mousedown\", (event) => {\n            if ((menuRef.current !== undefined && menuRef.current !== null) && (menubtnRef.current !== undefined && menubtnRef.current !== null)) {\n                if (!menuRef.current.contains(event.target) && !menubtnRef.current.contains(event.target)) {\n                    setOpenMoreOptions(false);\n                }\n            }\n        });\n    });\n\n    function showMore(entries) {\n\n        if (entries[0] && entries[0].isIntersecting) {\n\n            if (commentL[0])\n                updateComments();\n        }\n    }\n\n    let options = {\n        rootMargin: '0px',\n        threshold: 0.5\n    }\n\n    const element = document.getElementById('showMoreComment');\n    if (element) {\n        let observer = new IntersectionObserver(showMore, options);\n        observer.observe(element);\n    }\n\n    function updateComments() {\n        const last = commentL[commentL.length - 1].data.ts;\n        setShowMoreComment(false);\n        setMessage(\"Loading...\");\n        db.collection(collection).doc(postId).collection(\"commentL\").orderBy(\"ts\", \"desc\").startAfter(last).limit(8).get()\n            .then((snapshot) => {\n                const array = snapshot.docs.map(doc => ({\n                    id: doc.id,\n                    post: doc.data(),\n                }));\n                if (array.length === 0) {\n                    setMessage('No more comments to show.')\n                }\n                else {\n                    setcommentL([...commentL, ...array]);\n                    setMessage('');\n                    setShowMoreComment(true);\n                }\n            });\n    }\n\n    const confirmDelete = async () => {\n\n        const r = await swal({\n            title: \"Warning\",\n            text: \"Are you sure that you want to Delete this Post?\",\n            icon: \"warning\",\n            buttons: true,\n            dangerMode: true,\n        })\n\n        return r;\n    }\n\n    const confirmReport = async () => {\n\n        const r = await swal({\n            title: \"Warning\",\n            text: \"Are you sure that you want to Report this Post?\",\n            icon: \"warning\",\n            buttons: true,\n            dangerMode: true,\n        })\n\n        return r;\n    }\n\n    async function deletePost() {\n        const postid = postId;\n        if (await confirmDelete()) {\n\n            const post_ref = db.collection(collection).doc(postid);\n            post_ref.delete();\n\n            swal(\"Deleted!\", \"Your Post has been deleted!\", \"success\");\n        }\n    }\n\n    async function reportPost() {\n        const postid = postId;\n        if (await confirmReport()) {\n\n            const post_ref = db.collection(collection).doc(postid);\n            const data = await post_ref.get();\n            const report_data = data.data().reportL;\n\n            if (report_data.includes(origuid)) {\n                swal(\"Reported!\", \"You have already reported this Post!\", \"success\");\n            }\n            else {\n                post_ref.update({ reportL: firebase.firestore.FieldValue.arrayUnion(origuid) })\n                    .then(() => {\n                        swal(\"Reported!\", \"The Post has been reported!\", \"success\");\n                    });\n\n            }\n        }\n    }\n\n    function EditPostModal() {\n\n        function close() {\n            setOpenEditPostModal(false);\n        }\n\n        return (\n            <Modal open={openEditPostModal}>\n                <div className={editpostClasses.container}>\n                    <EditPost postid={postId} clips={clips} images={img} txt={txt} video={video} closeModal={close} />\n                </div>\n            </Modal>\n        );\n    }\n\n    function editpost() {\n        setOpenEditPostModal(true);\n        setOpenMoreOptions(false);\n    }\n\n    function PostMoreOptions(props) {\n\n        if (props.uid === origuid) {\n            return (\n                <div ref={menuRef} className=\"postMoreOptions\" >\n                    <p onClick={editpost}>Edit</p>\n                    <p onClick={deletePost}>Delete</p>\n                    {viewSinglePost ? null :\n                        <p onClick={viewPost}>View</p>\n                    }\n                </div>\n            );\n        }\n        else {\n            return (\n                <div ref={menuRef} className=\"postMoreOptions\" >\n                    <p onClick={reportPost}>Report</p>\n                    {viewSinglePost ? null :\n                        <p onClick={viewPost}>View</p>\n                    }\n                </div>\n            );\n        }\n    }\n\n\n    const likeHandle = (event) => {\n        event.preventDefault();\n        if (show === 'not_liked') {\n            setShow('red');\n            setShow2('blue');\n            setLikeCount(likeCount + 1);\n            const batch = db.batch();\n\n            const flameL_ref = db.collection(collection).doc(postId).collection(\"flameL\").doc(origuid);\n\n            batch.set(flameL_ref, {\n                postID: postId,\n                postUid: userId,\n                ts: Date.now(),\n                type: origusertype,\n                uid: origuid,\n                username: origusername,\n                userdp: origuserdp\n            })\n\n            const post_ref = db.collection(collection).doc(postId);\n\n            batch.update(post_ref, { likecount: firebase.firestore.FieldValue.increment(1) });\n\n            batch.commit();\n        }\n        else {\n            const batch = db.batch();\n            const like_ref = db.collection(collection).doc(postId).collection('flameL').doc(origuid);\n            const post_ref = db.collection(collection).doc(postId);\n\n            batch.delete(like_ref);\n            batch.update(post_ref, {\n                likecount: firebase.firestore.FieldValue.increment(-1)\n            });\n            batch.commit();\n\n            setLikeCount(likeCount - 1);\n            setShow('not_liked');\n            setShow2('textforlike');\n        }\n    }\n\n    function openLikeListModal() {\n        if (likeCount > 0)\n            setShowLikeList(true);\n    }\n\n    function closeLikeList() {\n        setShowLikeList(false);\n    }\n\n    const handleTogglePostOptions = () => {\n        setOpenMoreOptions(!openMoreOptions);\n    };\n\n    function Comments(comment) {\n\n        return (\n            <Comment\n                key={comment.id}\n                comment={comment}\n                postId={postId}\n                origuid={origuid}\n                origusertype={origusertype}\n                origusername={origusername}\n                origuserdp={origuserdp}\n                clips={clips} />\n        );\n    }\n\n    const postComment = (event) => {\n        event.preventDefault();\n\n        const batch = db.batch();\n        const commentL_ref = db.collection(collection).doc(postId).collection(\"commentL\").doc();\n        const post_ref = db.collection(collection).doc(postId);\n\n        batch.set(commentL_ref, {\n            comment: comment,\n            uid: origuid,\n            username: origusername,\n            userdp: origuserdp,\n            type: origusertype,\n            ts: Date.now(),\n            postID: postId,\n            likecount: 0,\n            cmtNo: 0,\n            reportcount: 0\n        });\n\n        batch.update(post_ref, { cmtNo: firebase.firestore.FieldValue.increment(1) });\n\n        batch.commit();\n\n        setComment('');\n    }\n\n    const viewHashtagPost = (value) => {\n        console.log(value);\n        history.push(\"/hashtag/\"+value.substring(1));\n    }\n\n    function applyHighlights(text) {\n\n        text = text\n            .replace(/#\\w+/g, `<a class=\"tags\" href=\"/hashtag/$&\">$&</a>`);\n\n        return text;\n    }\n\n    //const Hashtag = styled.span`color: \"#4080FF\";`;\n\n    function viewPost() {\n        setOpenMoreOptions(false);\n        setOpenSinglePost(true);\n    }\n\n    function viewProfile() {\n        if (!viewOnly)\n            history.push(\"/profile/\" + userId);\n    }\n\n    function SinglePostView() {\n        return (\n            <Modal open={openSinglePost} >\n                <div className={classes.singlepostContainer} style={{ outline: \"none\" }} >\n                    <div className={\"container \" + classes.singlepost} >\n                        {viewOnly ? null :\n                            <span onClick={() => setOpenSinglePost(false)} className={classes.back_btn}>\n                                <ClearIcon />\n                            </span>\n                        }\n                        <div className=\"row\" style={{ height: \"100%\" }} >\n                            <div className={classes.postLeft} style={{ border: \"none\" }}>\n                                {clips ? <Carouselpost img='' video={video} postId={postId} openPost={viewPost} /> :\n                                    <Carouselpost img={img} video='' postId={postId} full={true} openPost={viewPost} />}\n                            </div>\n                            <div className={classes.postRight}>\n                                <div className=\"post__header post_name_modal\">\n                                    <Avatar\n                                        className=\"post__avatar\"\n                                        alt={postusername}\n                                        src={postuserdp}\n                                        onClick={viewProfile}\n                                    />\n                                    <h3 onClick={viewProfile}>{postusername}</h3>\n                                </div>\n\n                                {txt === \"\" ? '' :\n                                    <>\n                                        <h4 className={classes.postText + \" post_Text_caption\"} dangerouslySetInnerHTML={{ __html: applyHighlights(txt) }}></h4>\n                                    </>\n                                }\n                                <div className=\"post_Options_Container\">\n                                    <div className={classes.postOptions}>\n\n                                        {viewOnly ?\n                                            <>\n                                                <div>\n                                                    <span className=\"blue font-weight-bold\" >{likeCount + \" Like\"}</span>\n                                                </div>\n                                            </> :\n                                            <div>\n                                                <ThumbUp className={show2} onClick={likeHandle} />\n                                                <h3 className={show2} onClick={openLikeListModal} >\n                                                    <span style={{ fontSize: \"small\" }} >{likeCount + (likeCount === 1 ? \" Like\" : \" Likes\")}</span>\n                                                </h3>\n                                            </div>\n                                        }\n                                        <div>\n                                            <ChatIcon style={{ color: 'purple', marginRight: '3px' }} />\n                                            <h3>{commentcount ? (commentcount) + \" \" : \"\"} Comment</h3>\n                                        </div>\n                                        <div className={classes.share}>\n                                            <ShareIcon onClick={share} />\n                                            {/* <button  style={{ border: \"none\", outline: \"none\", background: \"inherit\" }}>Share</button> */}\n                                        </div>\n                                        <div id=\"shareModal2\" className=\"share-modal\" style={{ display: 'none' }}>\n                                            <div className=\"share-modal-content\">\n                                                <span id=\"closeshare\" onClick={closeshare}>&times;</span>\n                                                <div id=\"share-container\">\n                                                    <div className=\"share-via\">\n                                                        <button className=\"share-via-button\" >\n                                                            <WhatsAppIcon />\n                                                        </button>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <small style={{ marginLeft: '10px', color: 'gray' }}>{time_ago(ts)}</small></div>\n                                <div className={classes.comments}>\n                                    {commentL.map(Comments)}\n                                    {showMoreComment && <p id=\"showMoreComment\"></p>}\n                                    {message !== '' ? <p className=\"text-center\"><small>{message}</small></p> : ''}\n                                </div>\n                                {viewOnly ? null :\n                                    <div className={classes.writeComment + \" comment_box_modal\"}>\n                                        <form onSubmit={postComment}>\n                                            <div className=\"commentBox\">\n                                                <input className=\"commentInputBox commentBox_modal\" type=\"text\" placeholder=\" Add a comment ...  \"\n                                                    value={comment} onChange={(e) => setComment(e.target.value)} />\n                                                <a href=\"\" className={classes.anchor_Post}>Post</a>\n                                                <input type=\"submit\" disabled={!comment} className=\"transparent__submit\" />\n                                            </div>\n                                        </form>\n                                    </div>\n                                }\n\n\n                            </div>\n                        </div>\n                        <Modal open={showLikeList}>\n                            <div className={likeListClasses.main}>\n                                <div>\n                                    <div className={likeListClasses.heading}>\n                                        <h6>Who liked the post ?</h6>\n                                        <CancelIcon className={likeListClasses.closeBtn} onClick={closeLikeList} />\n                                    </div>\n                                    <LikeList for=\"post\" postid={postId} clips={clips} />\n                                </div>\n                            </div>\n                        </Modal>\n                        <EditPostModal />\n                    </div>\n                </div>\n            </Modal>\n        )\n    }\n\n    if (viewSinglePost === undefined || viewSinglePost === false) {\n\n        return (\n            <div className=\"post\">\n                <div className=\"post__header\">\n\n                    <Avatar\n                        className=\"post__avatar\"\n                        alt={postusername}\n                        src={postuserdp}\n                        onClick={viewProfile}\n                    />\n                    <h3 onClick={viewProfile}>{postusername}</h3>\n                    <div className=\"post_more_options\">\n                        <MoreHorizIcon ref={menubtnRef} onClick={handleTogglePostOptions} />\n                        {openMoreOptions && <PostMoreOptions uid={userId} postid={postId} />}\n                    </div>\n                </div>\n\n\n                { clips ? <Carouselpost img='' video={video} postId={postId} full={false} openPost={viewPost} /> :\n                    <Carouselpost img={img} video='' postId={postId} full={false} openPost={viewPost} />}\n                {txt === \"\" ? '' :\n                    <h4 className=\"post__text\">\n                        <ReactHashtag renderHashtag={(hashtagValue) => (\n                            <span className=\"hashtag\" onClick={() => viewHashtagPost(hashtagValue)}>{hashtagValue}</span>\n                        )} >\n                            {txt}\n                        </ReactHashtag>\n                    </h4>\n                }\n\n                {(likeCount === 0 && commentcount <= 2) ? '' : <span />}\n                <div className=\"post__options\">\n                    <div className=\"like\">\n                        <FavoriteIcon className={show} fontSize=\"small\" onClick={likeHandle} />\n                        <p style={{ margin: '0 10px', fontWeight: 'bold' }} onClick={openLikeListModal}>\n                            {likeCount}\n                        </p>\n                    </div>\n                    <div className=\"comment\">\n                        <ChatIcon fontSize=\"small\" />\n                        <h3 style={{ margin: '0 5px', fontWeight: 'bold' }}> {commentcount} </h3>\n                    </div>\n                    <div className=\"share\">\n                        <ShareIcon fontSize=\"small\" onClick={share} />\n                        {/* <button onClick={share} style={{ border: \"none\", outline: \"none\", background: \"inherit\" }}>Share</button> */}\n                    </div>\n\n                </div>\n                <div id=\"shareModal\" className=\"share-modal\">\n                    <div className=\"share-modal-content\">\n                        <span id=\"closeshare\" onClick={closeshare}>&times;</span>\n                        <div id=\"share-container\">\n                            <div className=\"share-via\">\n                                <button className=\"share-via-button\" >\n                                    <WhatsAppIcon />\n                                </button>\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <form onSubmit={postComment} id=\"post_form\">\n                    <div className=\"commentBox\">\n                        <Avatar\n                            className=\"post__avatar2\"\n                            alt={origusername}\n                            src={origuserdp}\n                        />\n                        <input className=\"commentInputBox\" type=\"text\" placeholder=\"Write a comment ... \"\n                            value={comment} onChange={(e) => setComment(e.target.value)} />\n                        <input type=\"submit\" disabled={!comment} className=\"transparent__submit\" />\n                    </div>\n                </form>\n\n                {commentL.map(Comments)}\n                <Modal open={showLikeList}>\n                    <div className={likeListClasses.main}>\n                        <div>\n                            <div className={likeListClasses.heading}>\n                                <h6>Who liked the post ?</h6>\n                                <CancelIcon className={likeListClasses.closeBtn} onClick={closeLikeList} />\n                            </div>\n                            <LikeList for=\"post\" postid={postId} clips={clips} />\n                        </div>\n                    </div>\n                </Modal>\n                <EditPostModal />\n                <SinglePostView />\n            </div>\n        );\n    }\n    else if (viewSinglePost === true) {\n\n        return (\n            <>\n                <div className={\"container \" + classes.post}>\n                    {viewOnly ? null :\n                        <span onClick={() => window.history.back()} className=\"back-btn\">\n                            <ArrowBackIcon />\n                        </span>\n                    }\n                    <div className=\"row\">\n                        <div className=\"col-lg-6\">\n                            {clips ? <Carouselpost img='' video={video} postId={postId} /> :\n                                <Carouselpost img={img} video='' postId={postId} full={true} />}\n                        </div>\n                        <div className={\"col-lg-6 \" + classes.postRight}>\n                            <div className=\"post__header\">\n                                <Avatar\n                                    className=\"post__avatar\"\n                                    alt={postusername}\n                                    src={postuserdp}\n                                    onClick={viewProfile}\n                                />\n                                <h3 onClick={viewProfile}>{postusername}</h3>\n                                {viewOnly ? null :\n                                    <div className=\"post_more_options\">\n                                        <MoreHorizIcon fontSize=\"large\" ref={menubtnRef} onClick={handleTogglePostOptions} />\n                                        {openMoreOptions && <PostMoreOptions uid={userId} postid={postId} />}\n                                    </div>\n                                }\n                            </div>\n                            <hr style={{ marginTop: '3px', boxShadow: '0px 3px 4px gray' }} />\n                            {txt === \"\" ? '' :\n                                <>\n                                    <h4 className={classes.postText} dangerouslySetInnerHTML={{ __html: applyHighlights(txt) }}></h4>\n                                    <hr style={{ marginTop: '3px', marginBottom: 0, boxShadow: '0px 2px 4px gray' }} />\n                                </>\n                            }\n                            <div className={classes.postOptions}>\n\n                                {viewOnly ?\n                                    <>\n                                        <div>\n                                            <span className=\"blue font-weight-bold\" >{likeCount + \" Like\"}</span>\n                                        </div>\n                                    </> :\n                                    <div>\n                                        <ThumbUp className={show2} onClick={likeHandle} />\n                                        <h3 className={show2} onClick={openLikeListModal} >\n                                            <span style={{ fontSize: \"small\" }} >{likeCount + (likeCount === 1 ? \" Like\" : \" Likes\")}</span>\n                                        </h3>\n                                    </div>\n                                }\n                                <div>\n                                    <ChatIcon style={{ color: 'purple', marginRight: '3px' }} />\n                                    <h3>{commentcount ? (commentcount) + \" \" : \"\"} Comment</h3>\n                                </div>\n                                <div className={classes.share}>\n                                    <ShareIcon />\n                                    <button onClick={share} style={{ border: \"none\", outline: \"none\", background: \"inherit\" }}>Share</button>\n                                </div>\n                                <div id=\"shareModal2\" className=\"share-modal\" style={{ display: 'none' }}>\n                                    <div className=\"share-modal-content\">\n                                        <span id=\"closeshare\" onClick={closeshare}>&times;</span>\n                                        <div id=\"share-container\">\n                                            <div className=\"share-via\">\n                                                <button className=\"share-via-button\" >\n                                                    <WhatsAppIcon />\n                                                </button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <small style={{ marginLeft: '10px', color: 'gray' }}>{time_ago(ts)}</small>\n                            <hr style={{ marginBottom: '3px', marginTop: 0, boxShadow: '0px 2px 4px gray' }} />\n                            <div className={classes.comments}>\n                                {commentL.map(Comments)}\n                                {showMoreComment && <p id=\"showMoreComment\"></p>}\n                                {message !== '' ? <p className=\"text-center\"><small>{message}</small></p> : ''}\n                            </div>\n                            {viewOnly ? null :\n                                <div className={classes.writeComment}>\n                                    <form onSubmit={postComment}>\n                                        <div className=\"commentBox\">\n                                            <Avatar\n                                                className=\"post__avatar2\"\n                                                alt={origusername}\n                                                src={origuserdp}\n                                            />\n                                            <input className=\"commentInputBox\" type=\"text\" placeholder=\"Write a comment ... \"\n                                                value={comment} onChange={(e) => setComment(e.target.value)} />\n                                            <input type=\"submit\" disabled={!comment} className=\"transparent__submit\" />\n                                        </div>\n                                        <p className=\"pressEnterToPost\">Press Enter to post comment</p>\n                                    </form>\n                                </div>\n                            }\n                        </div>\n                    </div>\n                    <Modal open={showLikeList}>\n                        <div className={likeListClasses.main}>\n                            <div>\n                                <div className={likeListClasses.heading}>\n                                    <h6>Who liked the post ?</h6>\n                                    <CancelIcon className={likeListClasses.closeBtn} onClick={closeLikeList} />\n                                </div>\n                                <LikeList for=\"post\" postid={postId} clips={clips} />\n                            </div>\n                        </div>\n                    </Modal>\n                    <EditPostModal />\n                </div>\n            </>\n        );\n    }\n}\n\n\n\nexport default Post;\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Notification\\SidebarNotification.js",["338","339","340","341","342"],"import React from 'react'\nimport { Avatar } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport Like from \"../images/like.png\";\nimport Chat from \"../images/chat.svg\";\n\nimport Badge from '@material-ui/core/Badge';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\n\nimport Logo from \"../images/logo.png\";\nconst StyledBadge = withStyles((theme) => ({\n  badge: {\n    backgroundColor: '#44b700',\n    color: '#44b700',\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n    '&::after': {\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      width: '100%',\n      height: '100%',\n      borderRadius: '50%',\n      animation: '$ripple 1.2s infinite ease-in-out',\n      border: '1px solid currentColor',\n      content: '\"\"',\n    },\n  },\n  '@keyframes ripple': {\n    '0%': {\n      transform: 'scale(.8)',\n      opacity: 1,\n    },\n    '100%': {\n      transform: 'scale(2.4)',\n      opacity: 0,\n    },\n  },\n}))(Badge);\n\nconst SmallAvatar = withStyles((theme) => ({\n  root: {\n    width: 22,\n    height: 22,\n\n  },\n}))(Avatar);\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\nexport default function SidebarNotification(props) {\n  const [like_pic, setLikepic] = useState(Like);\n  const [chat_pic, setChatpic] = useState(Chat);\n  const [logo,setLogo] = useState(Logo);\n  const history = useHistory();\n  const classes = useStyles();\n  const userId = props.userid;\n  const notifid = props.notifid;\n  //console.log(\"here\"+props.userid);\n  function viewProfile() {\n    // history.push({ pathname: \"/profile\", state: { id: userId } });\n    history.push(\"/profile/\" + userId);\n  }\n\n  function viewNotif() {\n    console.log(\"inside notif\")\n\n    history.push({ pathname: \"/posts/false/\" + props.postid, state: { notifid: notifid } });\n  }\n  return (\n    <>\n      <div className=\"notification-list-items profile-container\">\n        {props.type === \"like\" ? (<div className={classes.root}>\n          <Badge overlap=\"circle\" anchorOrigin={{ vertical: 'bottom', horizontal: 'right', }} badgeContent={<SmallAvatar src={like_pic} />}>\n            <Avatar alt={props.username} src={props.imgsrc} onClick={viewProfile} />\n          </Badge>\n        </div>) : props.type === \"comment\" ? (<div className={classes.root}>\n          <Badge overlap=\"circle\" anchorOrigin={{ vertical: 'bottom', horizontal: 'right', }} badgeContent={<SmallAvatar src={chat_pic} />}>\n            <Avatar alt={props.username} src={props.imgsrc} onClick={viewProfile} />\n          </Badge>\n        </div>) : props.type === \"application\" ? \n      \n      <div className={classes.root}>\n        <Avatar alt=\"Utsav\" src={logo}/>\n      </div>\n      : (<div className={classes.root}>\n\n          <Avatar alt={props.username} src={props.imgsrc} onClick={viewProfile} />\n\n        </div>)}\n        <div style={{ textAlign: \"left\" }}>\n          {props.type === \"application\" ? \n        <span className=\"notification-user\">Utsav</span>\n        : <span className=\"notification-user\" onClick={viewProfile}>{props.username + \" \"}</span>\n      }\n          {props.type === \"share\" ? <span onClick={viewNotif}>shared a post.</span> :\n            props.type === \"like\" ? <span onClick={viewNotif}>liked your post.</span> :\n            props.type === \"application\" ? <span style={{}}> Welcome to utsav start sharing..</span> :\n              props.type === \"comment\" ? <><span onClick={viewNotif}>commented on your post.</span>\n                <br></br><input readOnly type=\"text\" value={\" \" + props.comment.slice(0, 9)} style={{ border: \"none\", borderRadius: \"5px\", width: \"100%\", height: \"1.5rem\", backgroundColor: \"#f1f1f1\", marginBottom: \"5px\" }}></input></> : <p></p>}\n\n          <br></br>\n          {!props.type === \"application\" && <span style={{ fontSize: \"12px\", color: \"darkgrey\" }}>{props.time + \" ago\"}</span>}\n        </div>\n\n\n      </div>\n\n    </>\n\n  )\n}\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Others\\UpvoteFollowList.js",["343","344"],"import React, { useState, useEffect } from 'react';\nimport { db } from \"../config/firebase.js\";\nimport classes from './styles/upvoteFollowList.module.css';\nimport { Avatar } from \"@material-ui/core\";\nimport { useHistory } from 'react-router';\n\nfunction UpvoteFollowList(props) {\n\n    const history = useHistory();\n    const [list, setList] = useState([]);\n    const [message, setMessage] = useState('');\n    const [showMoreUsers, setShowMoreUsers] = useState(false);\n    const [update, setUpdate] = useState(false);\n\n    let query_ref = null;\n    if (props.for === 'upvote')\n        query_ref = db.collection(\"Users\").doc(props.userid).collection(\"Upvoters\");\n    else if (props.for === 'follow')\n        query_ref = db.collection(\"Users\").doc(props.userid).collection(\"Followers\");\n\n    useEffect(() => {\n\n        query_ref.orderBy('ts', 'desc').limit(10).get()\n            .then((snap) => {\n                //console.log(snap);\n                if (snap.empty) {\n                    setMessage(\"No results\");\n                }\n                else {\n                    setList(snap.docs.map((doc) => {\n                        return ({\n                            id: doc.id,\n                            data: doc.data()\n                        });\n                    }));\n                    setUpdate(false);\n                    setShowMoreUsers(true);\n                }\n            });\n\n    }, []);\n\n    useEffect(() => {\n        //console.log(\"UseEffect Update\");\n        function updateList() {\n            setShowMoreUsers(false);\n            setMessage('Loading...');\n            const last = list[list.length - 1];\n\n            query_ref.orderBy('ts', 'desc').startAfter(last.data.ts).limit(10).get()\n                .then((snap) => {\n                    const array = snap.docs.map((doc) => {\n                        return ({\n                            id: doc.id,\n                            data: doc.data()\n                        });\n                    });\n                    if (array.length === 0)\n                        setMessage('');\n                    else {\n                        setList([...list, ...array]);\n                        setMessage('');\n                        setShowMoreUsers(true);\n                    }\n                });\n            setUpdate(false);\n        }\n\n        if (update)\n            updateList();\n\n    }, [update]);\n\n\n    function showMore(entries) {\n\n        if (entries[0] && entries[0].isIntersecting) {\n\n            if (list[0])\n                setUpdate(true);\n        }\n    }\n\n    let options = {\n        rootMargin: '0px',\n        threshold: 0.2\n    }\n\n    const element = document.getElementById('showMoreUsers');\n    if (element) {\n        let observer = new IntersectionObserver(showMore, options);\n        observer.observe(element);\n    }\n\n    function viewProfile(id) {\n        history.push(\"/profile/\" + id);\n    }\n\n    function Row(cvalue) {\n\n        return (\n            <div key={cvalue.id} className={classes.row} onClick={() => viewProfile(cvalue.data.uid)}>\n                <Avatar src={cvalue.data.userdp} alt={cvalue.username} />\n                <p>{cvalue.data.username}</p>\n            </div>\n        );\n    }\n\n    return (\n        <div className={classes.list}>\n            {list.map(Row)}\n            <div>\n                {showMoreUsers && <div id='showMoreUsers'></div>}\n                {message !== '' ? <p className=\"text-center mt-1 mb-0\">{message}</p> : ''}\n            </div>\n        </div>\n    );\n\n}\n\nexport default UpvoteFollowList;","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Profile\\ProfileClips.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Profile\\Grid.js",["345"],"import React, { useState, useEffect } from 'react';\nimport { db } from \"../config/firebase.js\";\nimport Post from '../Posts/Post';\nimport GridView from './GridView';\n\nconst Grid = (props) => {\n    const [Images, setImages] = useState([]);\n    const userID = props.userId;\n    // const userType = props.userType;\n    const [message, setMessage] = useState('Loading...');\n\n    useEffect(() => {\n        function getData() {\n            if (userID) {\n                db.collection(\"Feeds\").where('uid', '==', userID).get()\n                    .then((snapshot) => {\n\n                        if (snapshot.docs.length === 0)\n                            setMessage(\"No posts to show\");\n                        else {\n                                const images = [];\n                                snapshot.docs.forEach((doc) => {\n                                    const data = doc.data().img;\n                                    data.forEach((item) => {\n                                        if(item !== '')\n                                            images.push({ postid: doc.id, image: item });\n                                    });\n                                });\n                                if(images.length === 0)\n                                    setMessage('No images to show.');\n                                else\n                                    setImages([...images]);\n                        }\n                    })\n            }\n        }\n\n        getData();\n\n    }, [userID], []);\n\n    if (Images[0]) {\n\n        return (\n            <>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-sm\">\n                            <GridView\n                                img={Images}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </>\n        );\n    } else {\n        return (<p>{message}</p>);\n    }\n\n}\n\nexport default Grid;","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Profile\\EditProfile.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Posts\\ImageUpload.js",["346","347","348","349","350","351"],"import React, { useState, useCallback, useRef, useEffect } from \"react\";\nimport ReactCrop from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\nimport styles from \"../Utilities/editimage.module.css\";\nimport \"./styles/ImageUpload.css\";\nimport { Avatar } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Button from \"@material-ui/core/Button\";\nimport { storage, db } from \"../config/firebase.js\";\nimport { useHistory } from \"react-router-dom\";\nimport PhotoLibraryIcon from \"@material-ui/icons/PhotoLibrary\";\nimport VideoLibraryIcon from \"@material-ui/icons/VideoLibrary\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\n// import PhotoLibraryIcon from '../images/gallery_icon.png';\nimport swal from \"sweetalert\";\nimport Translate from \"../Translate/Translate\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport createIcon from \"../images/create_pen.png\";\nimport galleryIcon from \"../images/gallery_icon.png\";\nimport photoIcon from \"../images/camera_icon.png\";\nimport recorderIcon from \"../images/recorder_icon.png\";\n\nfunction getModalStyle() {\n  const top = 40;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: \"absolute\",\n    width: \"100%\",\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #DDDFE2\",\n    outline: \"none\",\n    boxShadow: theme.shadows[5],\n    borderRadius: \"5px\",\n    maxWidth: \"500px\",\n  },\n}));\n\nfunction ImageUpload({ usN, dp, uid, type, lang }) {\n  const classes = useStyles();\n  const history = useHistory(\"\");\n  const [modalStyle] = useState(getModalStyle);\n  const [open, setOpen] = useState(false);\n  const [image, setImage] = useState([]);\n  const [video, setVideo] = useState(\"\");\n  const [txt, settxt] = useState(\"\");\n  const [htmlContent, setHtmlContent] = useState();\n  const [tagList, setTagList] = useState([]);\n  const [progress, setProgress] = useState(0);\n\n  const [upImg, setUpImg] = useState();\n  const [openEditModal, setOpenEditModal] = useState(false);\n  const [filename, setFilename] = useState(\"\");\n\n  const startCrop = (file) => {\n    if (file) {\n      const reader = new FileReader();\n      reader.addEventListener(\"load\", () => setUpImg(reader.result));\n      reader.readAsDataURL(file);\n    }\n  };\n\n  function EditModal() {\n    const imgRef = useRef(null);\n    const previewCanvasRef = useRef(null);\n    const [crop, setCrop] = useState({ unit: \"%\", width: 30, aspect: 4 / 3 });\n    const [completedCrop, setCompletedCrop] = useState(null);\n\n    const onLoad = useCallback((img) => {\n      imgRef.current = img;\n    }, []);\n\n    useEffect(() => {\n      if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n        return;\n      }\n\n      const image = imgRef.current;\n      const canvas = previewCanvasRef.current;\n      const crop = completedCrop;\n\n      const scaleX = image.naturalWidth / image.width;\n      const scaleY = image.naturalHeight / image.height;\n      const ctx = canvas.getContext(\"2d\");\n      const pixelRatio = window.devicePixelRatio;\n\n      canvas.width = crop.width * pixelRatio;\n      canvas.height = crop.height * pixelRatio;\n\n      ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n      ctx.imageSmoothingQuality = \"high\";\n\n      ctx.drawImage(\n        image,\n        crop.x * scaleX,\n        crop.y * scaleY,\n        crop.width * scaleX,\n        crop.height * scaleY,\n        0,\n        0,\n        crop.width,\n        crop.height\n      );\n    }, [completedCrop]);\n\n    function finishCrop() {\n      setOpenEditModal(false);\n      handleImageUpload(previewCanvasRef.current);\n    }\n\n    return (\n      <>\n        <Modal open={openEditModal}>\n          <>\n            <div className={styles.main}>\n              <div className={styles.cropper}>\n                <h5>Edit Image</h5>\n\n                <ReactCrop\n                  src={upImg}\n                  onImageLoaded={onLoad}\n                  crop={crop}\n                  keepSelection={true}\n                  onChange={(c) => setCrop(c)}\n                  onComplete={(c) => setCompletedCrop(c)}\n                  style={{ maxWidth: \"60vw\", maxHeight: '60vh' , overflow: 'scroll' }}\n                />\n\n                <div className={styles.buttons}>\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-success\"\n                    disabled={!completedCrop?.width || !completedCrop?.height}\n                    onClick={finishCrop}\n                  >\n                    Done\n                  </button>\n                  <button\n                    className=\"btn btn-warning ml-4\"\n                    onClick={() => setOpenEditModal(false)}\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div className={styles.canvas}>\n              <canvas\n                ref={previewCanvasRef}\n                // Rounding is important so the canvas width and height matches/is a multiple for sharpness.\n                style={{\n                  width: Math.round(completedCrop?.width ?? 0),\n                  height: Math.round(completedCrop?.height ?? 0),\n                }}\n              />\n            </div>\n          </>\n        </Modal>\n      </>\n    );\n  }\n\n  const uploadFileWithClick = () => {\n    document.getElementsByClassName(\"imageFile\")[0].click();\n  };\n\n  const uploadVideoFileWithClick = () => {\n    document.getElementById(\"videoFile\").click();\n  };\n\n  const handleOpen = () => {\n    if (window.innerWidth > 750) setOpen(true);\n    else history.push(\"/createpost\");\n  };\n\n  const handleClose = (e) => {\n    e.preventDefault();\n    setOpen(false);\n  };\n\n  const handleUpload = (event) => {\n    event.preventDefault();\n    if ((image[0] === \"\" || video === \"\") && txt === \"\") {\n      swal(\"Oops!\", \"Empty post!\", \"error\");\n    } else {\n      setOpen(false);\n      if (video === \"\") {\n        db.collection(\"Feeds\").add({\n          ts: Date.now(),\n          txt: txt,\n          tagList: tagList,\n          img: image,\n          likecount: 0,\n          reportcount: 0,\n          cmtNo: 0,\n          uid: uid,\n          type: type,\n          username: usN,\n          userdp: dp,\n        });\n      } else {\n        db.collection(\"Clips\").add({\n          ts: Date.now(),\n          txt: txt,\n          tagList: tagList,\n          video: video,\n          likecount: 0,\n          cmtNo: 0,\n          uid: uid,\n          type: type,\n          username: usN,\n          userdp: dp,\n        });\n      }\n\n      settxt(\"\");\n      setImage([]);\n      setTagList([]);\n      setVideo(\"\");\n    }\n  };\n\n  function getImageData(canvas, fileName) {\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(\n        (blob) => {\n          blob.name = fileName;\n          resolve(blob);\n        },\n        \"image/jpeg\",\n        1\n      );\n    });\n  }\n\n  const handleImageUpload = async (canvas) => {\n    const file = await getImageData(canvas, filename);\n\n    if (filename && file) {\n      const uploadTask = storage.ref(`images/${filename}`).put(file);\n      setProgress(0);\n      const prog = document.getElementById(\"progress\");\n      prog.style.display = \"block\";\n      uploadTask.on(\n        \"state_changed\",\n        (snapshot) => {\n          const progress = Math.round(\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n          );\n          setProgress(progress);\n        },\n        (error) => {\n          console.log(error);\n          alert(error.message);\n        },\n        () => {\n          storage\n            .ref(\"images\")\n            .child(filename)\n            .getDownloadURL()\n            .then((url) => {\n              prog.style.display = \"none\";\n              setImage([...image, url]);\n              //console.log(url);\n            });\n        }\n      );\n    }\n  };\n\n  const handleChange = (e) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const fname = e.target.files[0].name;\n      if (\n        fname.endsWith(\".jpg\") ||\n        fname.endsWith(\".jpeg\") ||\n        fname.endsWith(\".png\")\n      ) {\n        if (image.length > 9) {\n          swal(\"Oops!\", \"You can have maximum 10 photos in post!\", \"error\");\n        } else {\n          let name = e.target.files[0].name;\n          name = name.substring(0, name.lastIndexOf(\".\")) + \".png\";\n          //console.log(name);\n          startCrop(e.target.files[0]);\n          setOpenEditModal(true);\n          setFilename(name);\n        }\n      } else {\n        swal(\"Oops!\", \"Invalid format!\", \"error\");\n      }\n    }\n  };\n\n  function handleVideoInputChange(e) {\n    if (e.target.files[0]) {\n      const filename = e.target.files[0].name;\n      if (filename.endsWith(\".mp4\")) {\n        const uploadTask = storage\n          .ref(`videos/${e.target.files[0].name}`)\n          .put(e.target.files[0]);\n        setProgress(0);\n        const prog = document.getElementById(\"progress\");\n        prog.style.display = \"block\";\n        uploadTask.on(\n          \"state_changed\",\n          (snapshot) => {\n            const progress = Math.round(\n              (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n            );\n            setProgress(progress);\n          },\n          (error) => {\n            console.log(error);\n            alert(error.message);\n          },\n          () => {\n            storage\n              .ref(\"videos\")\n              .child(e.target.files[0].name)\n              .getDownloadURL()\n              .then((url) => {\n                prog.style.display = \"none\";\n                setVideo(url);\n              });\n          }\n        );\n      } else {\n        swal(\"Oops!\", \"Invalid format!\", \"error\");\n      }\n    }\n  }\n\n  function deleteVideo() {\n    setVideo(\"\");\n  }\n\n  function deleteImage(e) {\n    const index = e.currentTarget.attributes.index.nodeValue;\n    let array = image;\n    array.splice(index, 1);\n    setImage([...array]);\n  }\n\n  function Photo(cvalue, index) {\n    return (\n      <div key={index} className=\"imageContainer\">\n        <img src={cvalue} alt=\"demo\" width=\"80\" height=\"60\" />\n        <CancelIcon\n          fontSize=\"inherit\"\n          className=\"delete\"\n          index={index}\n          onClick={deleteImage}\n        />\n      </div>\n    );\n  }\n\n  function ImageGallery() {\n    if (video !== \"\") {\n      return (\n        <div className=\"videoContainer\">\n          <video width=\"100px\" height=\"80px\">\n            <source src={video} type=\"video/mp4\" />\n            Your browser does not support the video tag.\n          </video>\n          <CancelIcon\n            fontSize=\"inherit\"\n            className=\"delete\"\n            onClick={deleteVideo}\n          />\n        </div>\n      );\n    }\n    if (image !== \"\") {\n      return <>{image.map(Photo)}</>;\n    } else {\n      return \"\";\n    }\n  }\n\n  // yeah, browser sniffing sucks, but there are browser-specific quirks to handle that are not a matter of feature detection\n  var ua = window.navigator.userAgent.toLowerCase();\n  var isIE = !!ua.match(/msie|trident\\/7|edge/);\n  var isWinPhone = ua.indexOf('windows phone') !== -1;\n  var isIOS = !isWinPhone && !!ua.match(/ipad|iphone|ipod/);\n\n  function fixIOS() {\n    var $highlights = document.getElementsByClassName(\"highlights\");\n    // iOS adds 3px of (unremovable) padding to the left and right of a textarea, so adjust highlights div to match\n    $highlights.css({\n      'padding-left': '+=3px',\n      'padding-right': '+=3px'\n    });\n  }\n\n  if (isIOS) {\n    fixIOS();\n  }\n\n  function showtags(cvalue, index) {\n    return (\n      <span key={index.toString()} style={{ color: '#4080FF' }}>\n        {\"#\" + cvalue + \" \"}\n      </span>\n    );\n  }\n\n  function handleScroll(e) {\n    const y = e.target.scrollTop;\n    const el = document.getElementsByClassName('highlights')[0];\n    el.scrollTop = y;\n  }\n\n  function applyHighlights(text) {\n    text = text\n      .replace(/#\\w+/g, '<mark>$&</mark>');\n\n    if (isIE) {\n      // IE wraps whitespace differently in a div vs textarea, this fixes it\n      text = text.replace(/ /g, ' <wbr>');\n    }\n\n    return text;\n  }\n\n  function handleInput(e) {\n    const text = e.target.value;\n    const div = document.getElementById(\"highlight\");\n    settxt(text);\n\n    const highlightedText = applyHighlights(text);\n    //console.log(\"highlightedText=> \", highlightedText);\n    //div.innerHTML = highlightedText;\n    setHtmlContent(highlightedText);\n\n    let array = text.match(/#\\w+/g);\n    if (array) {\n      const list = array.map((item) => {\n        return item.substring(1);\n      });\n      setTagList(list);\n    }\n    else\n      setTagList([]);\n  }\n\n\n  return (\n    <div className=\"imageupload\">\n\n      {openEditModal ? <EditModal /> :\n        <Modal\n          open={open}\n        >\n          <div style={modalStyle} className={classes.paper}>\n            <form className=\"imageupload__commentAssign\">\n              <div className=\"imageupload__firstSectionModal\">\n                <h3><Translate lang={lang}>Create Post</Translate></h3>\n                <a href={handleClose} id=\"CrossIcon_create\"><ClearIcon onClick={handleClose}  style={{padding:\"5px\",fontSize:\"30px\"}}/></a>\n              </div>\n              <div className=\"imageupload__secondSectionModal\">\n                <div id=\"imageuploadAvatar_cancel\">\n                  <Avatar\n                    className=\"imageupload__avatar\"\n                    alt={usN}\n                    src={dp}\n                  />\n                  <h4>{usN}</h4></div>\n                {/* <div style={{ padding: '3px 5px' }}>{tagList.map(showtags)}</div> */}\n                <div className=\"backdrop\">\n                  <div className=\"highlightedText\" id=\"highlight\" dangerouslySetInnerHTML={{ __html: htmlContent }}>\n                  </div>\n                  <textarea\n                    className=\"textInput\"\n                    type=\"text\" value={txt} onChange={handleInput} onScroll={handleScroll}\n                    placeholder={`What's on your mind ${usN} ?`}>\n                  </textarea>\n                </div>\n\n              </div>\n\n              <div className=\"postUploadOptions\">\n                <div className=\"imageupload__imageuploadModal\" onClick={uploadFileWithClick} id=\"imageUploadField\">\n                  <img src={galleryIcon} style={{width:\"25px\"}}/>\n                  <input type=\"file\" className=\"imageFile\" onChange={handleChange} accept=\".jpg, .jpeg, .png, .gif\" />\n                  <h3><Translate lang={lang}>Photos</Translate></h3>\n                </div>\n                <div className=\"imageupload__imageuploadModal\" id=\"videoUploadField\" onClick={uploadVideoFileWithClick}>\n                <img src={recorderIcon} style={{width:\"30px\"}} />\n                  <input type=\"file\" id=\"videoFile\" onChange={handleVideoInputChange} accept=\".mp4\" />\n                  <h3><Translate lang={lang}>Video</Translate></h3>\n                </div>\n\n              </div>\n              <br />\n              <div className=\"imageupload__feedModal\">\n                <progress value={progress} max=\"100\" className=\"progress_post_upload\" id=\"progress\" />\n                <div className=\"imageGallery\">\n                  <ImageGallery />\n                </div>\n\n                <Button type=\"submit\" onClick={handleUpload} className=\"imageupload__submitButton\">Post</Button>\n              </div>\n            </form>\n          </div>\n        </Modal>\n      }\n      <div className=\"imageupload__container\">\n        {/* <div className=\"imageupload__firstSection\">\n                    <h3>Create Post</h3>\n                    </div> */}\n\n        <div className=\"imageupload__secondSection\">\n          <Avatar className=\"imageupload__avatar\" alt={usN} src={dp} />\n          <input\n            type=\"text\"\n            onClick={handleOpen}\n            placeholder={`What's on your mind ${usN} ?`}\n            id=\"imageupload_secondinput\"\n          />\n        </div>\n\n        <div className=\"uploadimage__options\" onClick={setOpen}>\n          <div className=\"imageupload__imageupload\">\n            <img\n              src={photoIcon}\n              className=\"imageupload__gallery\"\n              alt=\"\"\n            ></img>\n            <h3>\n              <Translate lang={lang}>Camera</Translate>\n            </h3>\n          </div>\n          <div className=\"imageupload__imageupload\">\n            <img\n                src={recorderIcon}\n              className=\"imageupload__gallery\"\n              alt=\"\"\n            ></img>\n            <h3>\n              <Translate lang={lang}>Recorder</Translate>\n            </h3>\n          </div>\n          <div className=\"imageupload__imageupload\">\n            <img\n                src={galleryIcon}\n              className=\"imageupload__gallery\"\n              alt=\"\"\n            ></img>\n            <h3>\n              <Translate lang={lang}>Gallery</Translate>\n            </h3>\n          </div>\n          <div className=\"imageupload__imageupload\">\n            <img\n              src={createIcon}\n              className=\"imageupload__gallery\"\n              alt=\"\"\n            ></img>\n            <h3>\n              <Translate lang={lang}>Create</Translate>\n            </h3>\n          </div>\n          {/* <div className=\"imageupload__more\">\n\n                        <img src=\"https://image.flaticon.com/icons/svg/860/860760.svg\" className=\"imageupload__dots\" alt=\"\" />\n                    </div> */}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ImageUpload;\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Translate\\Dictionary.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Translate\\ModalSetLanguage.js",["352","353"],"import { yellow } from \"@material-ui/core/colors\";\nimport React from \"react\";\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport './ModalSetLanguage.css';\nclass ModalSetLanguage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      language: \"English\",\n       value:null\n    };\n    if (localStorage.getItem(\"utsavlang\") === \"None\") {\n      localStorage.setItem(\"utsavlang\", \"en\");\n      this.state = {\n        language: \"English\",\n      };\n    }\n    this.handleLangChange = this.handleLangChange.bind(this);\n  }\n\n   handleLangChange(evt) {\n  \n    this.setState({value:evt.target.value});\n    localStorage.setItem(\"utsavlang\", evt.target.value);\n    this.setState({ language: evt.target.value });\n    alert(\"Changes saved successfully\");\n    window.location.href = \"/\";\n  }\n\n  render() {\n    return (\n      <div>\n        <center>\n          <div >\n            <b>Switch to another language: </b> \n            <br></br>\n           <FormControl component=\"fieldset\" >\n              <RadioGroup aria-label=\"language\" name=\"language\" value={this.state.language} onChange={this.handleLangChange}>\n                 <FormControlLabel value=\"en\" control={<Radio />} label=\"English\" />\n                 <FormControlLabel value=\"hi\" control={<Radio />} label=\"Hindi\" />\n                 <FormControlLabel value=\"bn\" control={<Radio />} label=\"Bengali\" />\n              </RadioGroup>\n            </FormControl>\n          </div>\n        </center>\n      </div>\n    );\n  }\n}\n\nexport default ModalSetLanguage;\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Posts\\Comments.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Posts\\LikeList.js",["354","355"],"import React, { useEffect, useState } from 'react';\nimport classes from './styles/likelist.module.css';\nimport { db } from '../config/firebase';\nimport { useHistory } from 'react-router';\nimport { Avatar } from \"@material-ui/core\";\nimport { time_ago } from '../Utilities/timeFunction';\n\nfunction LikeList(props) {\n\n    const history = useHistory();\n    const [list, setList] = useState([]);\n    const [message, setMessage] = useState('');\n    const [showMoreLikes, setShowMoreLikes] = useState(false);\n    const [update, setUpdate] = useState(false);\n    console.log(props.clips);\n    const collection = props.clips ? \"Clips\" : \"Feeds\";\n\n    let queryRef = null;\n    if(props.for === 'post')\n        queryRef = db.collection(collection).doc(props.postid).collection(\"flameL\");\n    else if(props.for === 'comment')\n        queryRef = db.collection(collection).doc(props.postid).collection(\"commentL\").doc(props.comid).collection(\"flameL\");\n    else if(props.for === 'reply')\n        queryRef = db.collection(collection).doc(props.postid).collection(\"commentL\").doc(props.comid).collection(\"commentL\").doc(props.replyid).collection(\"flameL\");\n\n    useEffect(() => {\n        \n        queryRef.orderBy('ts', 'desc').limit(10).get()\n            .then((snap) => {\n                //console.log(snap);\n                if (snap.empty) {\n                    setMessage(\"No likes\");\n                }\n                else {\n                    setList(snap.docs.map((doc) => {\n                        return ({\n                            id: doc.id,\n                            data: doc.data()\n                        });\n                    }));\n                    setShowMoreLikes(true);\n                    setUpdate(false);\n                }\n            });\n        \n    }, [props.postid]);\n\n    useEffect(() => {\n        //console.log(\"UseEffect Update\");\n        function updateList() {\n            setShowMoreLikes(false);\n            setMessage('Loading...');\n            const last = list[list.length - 1];\n\n            queryRef.orderBy('ts', 'desc').startAfter(last.data.ts).limit(10).get()\n                .then((snap) => {\n                    const array = snap.docs.map((doc) => {\n                        return ({\n                            id: doc.id,\n                            data: doc.data()\n                        });\n                    });\n                    if (array.length === 0)\n                        setMessage('');\n                    else {\n                        setList([...list, ...array]);\n                        setMessage('');\n                        setShowMoreLikes(true);\n                    }\n                });\n            setUpdate(false);\n        }\n\n        if (update)\n            updateList();\n\n    }, [update]);\n\n\n    function showMore(entries) {\n\n        if (entries[0] && entries[0].isIntersecting) {\n\n            if (list[0])\n                setUpdate(true);\n        }\n    }\n\n    let options = {\n        rootMargin: '0px',\n        threshold: 0.2\n    }\n\n    const element = document.getElementById('showMoreLikes');\n    if (element) {\n        let observer = new IntersectionObserver(showMore, options);\n        observer.observe(element);\n    }\n\n    function viewProfile(id) {\n        history.push(\"/profile/\" + id);\n    }\n\n    function Row(cvalue) {\n\n        return (\n            <div key={cvalue.id} className={classes.row} onClick={() => viewProfile(cvalue.data.uid)}>\n                <Avatar src={cvalue.data.userdp} alt={cvalue.username} />\n                <p>{cvalue.data.username}</p>\n                <small>{time_ago(cvalue.data.ts)}</small>\n            </div>\n        );\n    }\n\n    return (\n        <div className={classes.list}>\n            {list.map(Row)}\n            <div>\n                {showMoreLikes && <div id='showMoreLikes'></div>}\n                {message !== '' ? <p className=\"text-center mt-1 mb-0\">{message}</p> : ''}\n            </div>\n        </div>\n    );\n\n}\n\nexport default LikeList;","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Posts\\Editpost.js",["356","357","358","359","360","361","362","363"],"\n\nimport React, { useState, useCallback, useRef, useEffect } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport style from './styles/editpost.module.css';\nimport { Avatar } from '@material-ui/core';\nimport { storage, db } from \"../config/firebase.js\";\nimport PhotoLibraryIcon from '@material-ui/icons/PhotoLibrary';\nimport VideoLibraryIcon from '@material-ui/icons/VideoLibrary';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport Modal from '@material-ui/core/Modal';\nimport styles from '../Utilities/editimage.module.css';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport swal from 'sweetalert';\n\nfunction Editpost(props) {\n\n    const postId = props.postid;\n    const clips = props.clips;\n\n    const usN = localStorage.getItem('Username');\n    const dp = localStorage.getItem(\"Dp\");\n    const [image, setImage] = useState([...props.images]);\n    const [video, setVideo] = useState(props.video === undefined ? '' : props.video);\n    const [txt, settxt] = useState(props.txt);\n\n    const [upImg, setUpImg] = useState();\n    const [openEditModal, setOpenEditModal] = useState(false);\n    const [filename, setFilename] = useState('');\n    const [progress, setProgress] = useState(0);\n    const [showProgress, setShowProgress] = useState(false);\n\n\n    const startCrop = (file) => {\n        if (file) {\n            const reader = new FileReader();\n            reader.addEventListener('load', () => setUpImg(reader.result));\n            reader.readAsDataURL(file);\n        }\n    };\n\n\n    function EditModal() {\n\n        const imgRef = useRef(null);\n        const previewCanvasRef = useRef(null);\n        const [crop, setCrop] = useState({ unit: '%', width: 30, aspect: 4 / 3 });\n        const [completedCrop, setCompletedCrop] = useState(null);\n\n        const onLoad = useCallback((img) => {\n            imgRef.current = img;\n        }, []);\n\n        useEffect(() => {\n            if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n                return;\n            }\n\n            const image = imgRef.current;\n            const canvas = previewCanvasRef.current;\n            const crop = completedCrop;\n\n            const scaleX = image.naturalWidth / image.width;\n            const scaleY = image.naturalHeight / image.height;\n            const ctx = canvas.getContext('2d');\n            const pixelRatio = window.devicePixelRatio;\n\n            canvas.width = crop.width * pixelRatio;\n            canvas.height = crop.height * pixelRatio;\n\n            ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n            ctx.imageSmoothingQuality = 'high';\n\n            ctx.drawImage(\n                image,\n                crop.x * scaleX,\n                crop.y * scaleY,\n                crop.width * scaleX,\n                crop.height * scaleY,\n                0,\n                0,\n                crop.width,\n                crop.height\n            );\n\n        }, [completedCrop]);\n\n        function finishCrop() {\n            setOpenEditModal(false);\n            handleImageUpload(previewCanvasRef.current);\n        }\n\n        return (\n            <>\n                <Modal\n                    open={openEditModal}\n                >\n                    <>\n                        <div className={styles.main}>\n\n                            <div className={styles.cropper}>\n                                <h5>Edit Image</h5>\n\n                                <ReactCrop\n                                    src={upImg}\n                                    onImageLoaded={onLoad}\n                                    crop={crop}\n                                    keepSelection={true}\n                                    onChange={(c) => setCrop(c)}\n                                    onComplete={(c) => setCompletedCrop(c)}\n                                    style={{ maxWidth: \"60vw\", maxHeight: '60vh' , overflow: 'scroll' }}\n                                />\n\n\n                                <div className={styles.buttons}>\n                                    <button\n                                        type=\"button\"\n                                        className=\"btn btn-success\"\n                                        disabled={!completedCrop?.width || !completedCrop?.height}\n                                        onClick={finishCrop}\n                                    >\n                                        Done\n                                    </button>\n                                    <button className=\"btn btn-warning ml-4\" onClick={() => setOpenEditModal(false)}>Cancel</button>\n                                </div>\n                            </div>\n                        </div>\n                        <div className={styles.canvas}>\n                            <canvas\n                                ref={previewCanvasRef}\n                                style={{\n                                    width: Math.round(completedCrop?.width ?? 0),\n                                    height: Math.round(completedCrop?.height ?? 0)\n                                }}\n                            />\n                        </div>\n                    </>\n                </Modal>\n            </>\n        );\n    }\n\n    function Progress() {\n        return (\n            <Modal\n                open={showProgress}\n            >\n                <div className={styles.progress}>\n                    <div className={styles.progressBarContainer}>\n                        <progress value={progress} max=\"100\" className={styles.progressBar} />\n                        <p>Uploading...</p>\n                    </div>\n                </div>\n            </Modal>\n        );\n    }\n\n\n    const uploadFileWithClick = () => {\n        document.getElementsByClassName('imageFile')[0].click();\n    }\n\n    const uploadVideoFileWithClick = () => {\n        document.getElementById('videoFile').click();\n    }\n\n    const handleUpload = async (event) => {\n        event.preventDefault()\n        if (!image[0] && !txt) {\n            swal(\"Oops!\", \"Empty post!\", \"error\");\n        }\n        else {\n            if (video === '') {\n\n                await db.collection(\"Feeds\").doc(postId).update({\n                    txt: txt,\n                    img: image,\n                });\n            }\n            else {\n\n                await db.collection(\"Clips\").doc(postId).update({\n                    txt: txt,\n                    video: video,\n                });\n            }\n\n            swal(\"Updated!\", \"Your post has been updated!\", \"success\");\n\n            settxt(\"\")\n            setImage([]);\n            setVideo('');\n            props.closeModal();\n            window.location.reload();\n        }\n    }\n\n    function getImageData(canvas, fileName) {\n        return new Promise((resolve, reject) => {\n            canvas.toBlob(blob => {\n                blob.name = fileName;\n                resolve(blob);\n            }, 'image/jpeg', 1);\n        });\n    }\n\n    const handleImageUpload = async (canvas) => {\n\n        const file = await getImageData(canvas, filename);\n\n        if (filename && file) {\n\n            const uploadTask = storage.ref(`images/${filename}`).put(file);\n            setProgress(0);\n            setShowProgress(true);\n            uploadTask.on(\n                \"state_changed\",\n                (snapshot) => {\n                    const progress = Math.round(\n                        (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n                    );\n                    setProgress(progress);\n                },\n                (error) => {\n                    console.log(error);\n                    alert(error.message);\n                },\n                () => {\n                    storage\n                        .ref(\"images\")\n                        .child(filename)\n                        .getDownloadURL()\n                        .then(url => {\n                            setImage([...image, url]);\n                            setShowProgress(false);\n                            //console.log(url);\n                        })\n                }\n            )\n        }\n    }\n\n    const handleChange = (e) => {\n        if (e.target.files && e.target.files.length > 0) {\n\n            const fname = e.target.files[0].name;\n            if (fname.endsWith('.jpg') || fname.endsWith('.jpeg') || fname.endsWith('.png')) {\n                if (image.length > 9) {\n                    swal(\"Oops!\", \"You can have maximum 10 photos in post!\", \"error\");\n                }\n                else {\n                    let name = e.target.files[0].name;\n                    name = name.substring(0, name.lastIndexOf('.')) + \".png\";\n                    startCrop(e.target.files[0]);\n                    setOpenEditModal(true);\n                    setFilename(name);\n                }\n            }\n            else {\n                swal(\"Oops!\", \"Invalid format!\", \"error\");\n            }\n        }\n    }\n\n    function handleVideoInputChange(e) {\n        if (e.target.files[0]) {\n            const filename = e.target.files[0].name;\n            if (filename.endsWith('.mp4')) {\n                const uploadTask = storage.ref(`videos/${e.target.files[0].name}`).put(e.target.files[0]);\n                setProgress(0);\n                const prog = document.getElementById(\"progress\");\n                prog.style.display = \"block\";\n                uploadTask.on(\n                    \"state_changed\",\n                    (snapshot) => {\n                        const progress = Math.round(\n                            (snapshot.bytesTransferred / snapshot.totalBytes) * 100);\n                        setProgress(progress);\n                    },\n                    (error) => {\n                        console.log(error);\n                        alert(error.message);\n                    },\n                    () => {\n                        storage\n                            .ref(\"videos\")\n                            .child(e.target.files[0].name)\n                            .getDownloadURL()\n                            .then(url => {\n                                prog.style.display = \"none\";\n                                setVideo(url);\n                            })\n                    }\n                )\n            }\n            else {\n                swal(\"Oops!\", \"Invalid format!\", \"error\");\n            }\n        }\n\n    }\n\n    function deleteVideo() {\n        setVideo('');\n        setImage([]);\n    }\n\n    function deleteImage(e) {\n        const index = e.currentTarget.attributes.index.nodeValue;\n        let array = image;\n        array.splice(index, 1);\n        setImage([...array]);\n    }\n\n    function Photo(cvalue, index) {\n\n        return (\n            <div key={index} className={style.imageContainer}>\n                <img src={cvalue} alt=\"demo\" width=\"80\" height=\"60\" />\n                <CancelIcon fontSize=\"inherit\" className={style.delete} index={index} onClick={deleteImage} />\n            </div>\n        );\n    }\n\n    function ImageGallery() {\n\n        if (video !== '') {\n            return (\n                <div className={style.videoContainer}>\n                    <video width=\"100\" height=\"80\">\n                        <source src={video} type=\"video/mp4\" />\n                    Your browser does not support the video tag.\n                </video>\n                    <CancelIcon fontSize=\"inherit\" className={style.delete} onClick={deleteVideo} />\n                </div>\n            );\n        }\n        if (image !== '') {\n            return (\n                <>\n                    {image.map(Photo)}\n                </>\n            );\n        }\n        else {\n            return \"\";\n        }\n\n    }\n\n    return (\n        <div style={{borderRadius:\"5px\",border:\"2px solid #DDDFE2\"}}>\n            <form>\n                <div className={style.heading}>\n                    <h3>Edit Post</h3>\n                    <a href={props.closeModal} className={style.CrossIcon_edit}><ClearIcon onClick={props.closeModal} style={{padding:\"5px\",fontSize:\"30px\"}} /></a>\n                    \n                </div>\n                <div className={style.main}>\n                    <Avatar\n                        className=\"imageupload__avatar\"\n                        alt={usN}\n                        src={dp}\n                    />\n                    <h4 className={style.usN_editpost}>{usN}</h4>\n                    \n                </div>\n                <textarea className={style.textInput} value={txt} onChange={(e) => settxt(e.target.value)}></textarea>\n\n                \n                <div className=\"imageuploadeditpost__feedModal\">\n                    <div className={style.buttons}>\n                        <button type=\"submit\" onClick={handleUpload} className={\"btn \" + style.submitButton}>Post</button>\n                        \n                    </div>\n                </div>\n            </form>\n            <EditModal />\n            <Progress />\n        </div>\n    );\n}\n\nexport default Editpost;\n","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Posts\\Carouselpost.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Profile\\GridView.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Utilities\\timeFunction.js",["364","365"],"\nfunction time_ago(time) {\n\n    switch (typeof time) {\n        case 'number':\n            break;\n        case 'string':\n            time = +new Date(time);\n            break;\n        case 'object':\n            if (time.constructor === Date) time = time.getTime();\n            break;\n        default:\n            time = +new Date();\n    }\n    var time_formats = [\n        [60, 'seconds', 1], // 60\n        [120, '1 minute', '1 minute from now'], // 60*2\n        [3600, 'minutes', 60], // 60*60, 60\n        [7200, '1 hour', '1 hour from now'], // 60*60*2\n        [86400, 'hours', 3600], // 60*60*24, 60*60\n        [172800, 'Yesterday', 'Tomorrow'], // 60*60*24*2\n        [604800, 'days', 86400], // 60*60*24*7, 60*60*24\n        [1209600, '1 week', 'Next week'], // 60*60*24*7*4*2\n        [2419200, 'weeks', 604800], // 60*60*24*7*4, 60*60*24*7\n        [4838400, '1 month', 'Next month'], // 60*60*24*7*4*2\n        [29030400, 'months', 2419200], // 60*60*24*7*4*12, 60*60*24*7*4\n        [58060800, '1 year', 'Next year'], // 60*60*24*7*4*12*2\n        [2903040000, 'years', 29030400], // 60*60*24*7*4*12*100, 60*60*24*7*4*12\n        [5806080000, '1 century', 'Next century'], // 60*60*24*7*4*12*100*2\n        [58060800000, 'centuries', 2903040000] // 60*60*24*7*4*12*100*20, 60*60*24*7*4*12*100\n    ];\n    var seconds = (+new Date() - time) / 1000,\n        token = 'ago',\n        list_choice = 1;\n\n    if (seconds === 0) {\n        return 'Just now'\n    }\n    if (seconds < 0) {\n        seconds = Math.abs(seconds);\n        token = 'from now';\n        list_choice = 2;\n    }\n    var i = 0,\n        format;\n    while (format = time_formats[i++])\n        if (seconds < format[0]) {\n            if (typeof format[2] == 'string')\n                return format[list_choice];\n            else\n                return Math.floor(seconds / format[2]) + ' ' + format[1] + ' ';\n        }\n    return time;\n}\n\nexport { time_ago };","C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Posts\\Replies.js",[],"C:\\Users\\Asus\\Downloads\\utsav-react-app-post\\src\\components\\Carousel\\Carousel.js",[],{"ruleId":"366","severity":1,"message":"367","line":24,"column":10,"nodeType":"368","messageId":"369","endLine":24,"endColumn":18},{"ruleId":"366","severity":1,"message":"370","line":2,"column":26,"nodeType":"368","messageId":"369","endLine":2,"endColumn":47},{"ruleId":"366","severity":1,"message":"371","line":3,"column":10,"nodeType":"368","messageId":"369","endLine":3,"endColumn":14},{"ruleId":"366","severity":1,"message":"372","line":7,"column":8,"nodeType":"368","messageId":"369","endLine":7,"endColumn":21},{"ruleId":"366","severity":1,"message":"373","line":11,"column":8,"nodeType":"368","messageId":"369","endLine":11,"endColumn":23},{"ruleId":"366","severity":1,"message":"374","line":23,"column":8,"nodeType":"368","messageId":"369","endLine":23,"endColumn":13},{"ruleId":"366","severity":1,"message":"375","line":24,"column":8,"nodeType":"368","messageId":"369","endLine":24,"endColumn":13},{"ruleId":"366","severity":1,"message":"376","line":55,"column":7,"nodeType":"368","messageId":"369","endLine":55,"endColumn":16},{"ruleId":"377","severity":1,"message":"378","line":165,"column":37,"nodeType":"379","endLine":165,"endColumn":65},{"ruleId":"377","severity":1,"message":"378","line":180,"column":131,"nodeType":"379","endLine":180,"endColumn":167},{"ruleId":"380","severity":1,"message":"381","line":426,"column":41,"nodeType":"382","messageId":"383","endLine":426,"endColumn":43},{"ruleId":"384","severity":1,"message":"385","line":427,"column":44,"nodeType":"386","messageId":"387","endLine":427,"endColumn":46},{"ruleId":"366","severity":1,"message":"388","line":24,"column":5,"nodeType":"368","messageId":"369","endLine":24,"endColumn":13},{"ruleId":"377","severity":1,"message":"378","line":327,"column":17,"nodeType":"379","endLine":327,"endColumn":50},{"ruleId":"380","severity":1,"message":"381","line":462,"column":41,"nodeType":"382","messageId":"383","endLine":462,"endColumn":43},{"ruleId":"384","severity":1,"message":"385","line":463,"column":44,"nodeType":"386","messageId":"387","endLine":463,"endColumn":46},{"ruleId":"366","severity":1,"message":"389","line":9,"column":8,"nodeType":"368","messageId":"369","endLine":9,"endColumn":16},{"ruleId":"366","severity":1,"message":"389","line":8,"column":8,"nodeType":"368","messageId":"369","endLine":8,"endColumn":16},{"ruleId":"366","severity":1,"message":"390","line":1,"column":38,"nodeType":"368","messageId":"369","endLine":1,"endColumn":47},{"ruleId":"366","severity":1,"message":"391","line":11,"column":8,"nodeType":"368","messageId":"369","endLine":11,"endColumn":16},{"ruleId":"366","severity":1,"message":"392","line":18,"column":12,"nodeType":"368","messageId":"369","endLine":18,"endColumn":25},{"ruleId":"366","severity":1,"message":"370","line":3,"column":10,"nodeType":"368","messageId":"369","endLine":3,"endColumn":31},{"ruleId":"366","severity":1,"message":"393","line":3,"column":33,"nodeType":"368","messageId":"369","endLine":3,"endColumn":47},{"ruleId":"366","severity":1,"message":"394","line":7,"column":7,"nodeType":"368","messageId":"369","endLine":7,"endColumn":12},{"ruleId":"366","severity":1,"message":"395","line":138,"column":11,"nodeType":"368","messageId":"369","endLine":138,"endColumn":22},{"ruleId":"396","severity":1,"message":"397","line":138,"column":49,"nodeType":"398","messageId":"399","endLine":138,"endColumn":50,"suggestions":"400"},{"ruleId":"396","severity":1,"message":"401","line":138,"column":67,"nodeType":"398","messageId":"399","endLine":138,"endColumn":68,"suggestions":"402"},{"ruleId":"403","severity":1,"message":"404","line":35,"column":8,"nodeType":"405","endLine":35,"endColumn":10,"suggestions":"406"},{"ruleId":"366","severity":1,"message":"407","line":7,"column":8,"nodeType":"368","messageId":"369","endLine":7,"endColumn":17},{"ruleId":"366","severity":1,"message":"408","line":35,"column":10,"nodeType":"368","messageId":"369","endLine":35,"endColumn":20},{"ruleId":"366","severity":1,"message":"409","line":16,"column":8,"nodeType":"368","messageId":"369","endLine":16,"endColumn":17},{"ruleId":"366","severity":1,"message":"410","line":20,"column":8,"nodeType":"368","messageId":"369","endLine":20,"endColumn":20},{"ruleId":"366","severity":1,"message":"411","line":35,"column":12,"nodeType":"368","messageId":"369","endLine":35,"endColumn":19},{"ruleId":"366","severity":1,"message":"412","line":35,"column":20,"nodeType":"368","messageId":"369","endLine":35,"endColumn":30},{"ruleId":"366","severity":1,"message":"413","line":36,"column":12,"nodeType":"368","messageId":"369","endLine":36,"endColumn":16},{"ruleId":"366","severity":1,"message":"414","line":36,"column":17,"nodeType":"368","messageId":"369","endLine":36,"endColumn":24},{"ruleId":"366","severity":1,"message":"415","line":215,"column":13,"nodeType":"368","messageId":"369","endLine":215,"endColumn":18},{"ruleId":"416","severity":1,"message":"417","line":220,"column":16,"nodeType":"418","messageId":"419","endLine":220,"endColumn":42},{"ruleId":"366","severity":1,"message":"420","line":9,"column":19,"nodeType":"368","messageId":"369","endLine":9,"endColumn":28},{"ruleId":"366","severity":1,"message":"414","line":7,"column":17,"nodeType":"368","messageId":"369","endLine":7,"endColumn":24},{"ruleId":"366","severity":1,"message":"421","line":1,"column":38,"nodeType":"368","messageId":"369","endLine":1,"endColumn":44},{"ruleId":"366","severity":1,"message":"422","line":10,"column":8,"nodeType":"368","messageId":"369","endLine":10,"endColumn":14},{"ruleId":"366","severity":1,"message":"423","line":11,"column":8,"nodeType":"368","messageId":"369","endLine":11,"endColumn":15},{"ruleId":"366","severity":1,"message":"424","line":12,"column":8,"nodeType":"368","messageId":"369","endLine":12,"endColumn":16},{"ruleId":"366","severity":1,"message":"425","line":13,"column":8,"nodeType":"368","messageId":"369","endLine":13,"endColumn":14},{"ruleId":"366","severity":1,"message":"426","line":14,"column":8,"nodeType":"368","messageId":"369","endLine":14,"endColumn":10},{"ruleId":"366","severity":1,"message":"427","line":15,"column":8,"nodeType":"368","messageId":"369","endLine":15,"endColumn":10},{"ruleId":"366","severity":1,"message":"428","line":16,"column":8,"nodeType":"368","messageId":"369","endLine":16,"endColumn":10},{"ruleId":"366","severity":1,"message":"429","line":17,"column":8,"nodeType":"368","messageId":"369","endLine":17,"endColumn":21},{"ruleId":"366","severity":1,"message":"391","line":18,"column":8,"nodeType":"368","messageId":"369","endLine":18,"endColumn":16},{"ruleId":"366","severity":1,"message":"430","line":19,"column":8,"nodeType":"368","messageId":"369","endLine":19,"endColumn":16},{"ruleId":"366","severity":1,"message":"431","line":20,"column":8,"nodeType":"368","messageId":"369","endLine":20,"endColumn":12},{"ruleId":"366","severity":1,"message":"432","line":21,"column":8,"nodeType":"368","messageId":"369","endLine":21,"endColumn":17},{"ruleId":"366","severity":1,"message":"433","line":22,"column":8,"nodeType":"368","messageId":"369","endLine":22,"endColumn":15},{"ruleId":"366","severity":1,"message":"434","line":23,"column":8,"nodeType":"368","messageId":"369","endLine":23,"endColumn":14},{"ruleId":"366","severity":1,"message":"371","line":31,"column":10,"nodeType":"368","messageId":"369","endLine":31,"endColumn":14},{"ruleId":"366","severity":1,"message":"367","line":31,"column":16,"nodeType":"368","messageId":"369","endLine":31,"endColumn":24},{"ruleId":"366","severity":1,"message":"435","line":59,"column":12,"nodeType":"368","messageId":"369","endLine":59,"endColumn":21},{"ruleId":"366","severity":1,"message":"436","line":62,"column":12,"nodeType":"368","messageId":"369","endLine":62,"endColumn":25},{"ruleId":"437","severity":1,"message":"438","line":282,"column":13,"nodeType":"379","endLine":282,"endColumn":49},{"ruleId":"437","severity":1,"message":"438","line":285,"column":13,"nodeType":"379","endLine":285,"endColumn":49},{"ruleId":"437","severity":1,"message":"438","line":288,"column":13,"nodeType":"379","endLine":288,"endColumn":49},{"ruleId":"437","severity":1,"message":"438","line":341,"column":13,"nodeType":"379","endLine":341,"endColumn":50},{"ruleId":"437","severity":1,"message":"438","line":344,"column":13,"nodeType":"379","endLine":344,"endColumn":50},{"ruleId":"437","severity":1,"message":"438","line":347,"column":13,"nodeType":"379","endLine":347,"endColumn":50},{"ruleId":"366","severity":1,"message":"439","line":3,"column":10,"nodeType":"368","messageId":"369","endLine":3,"endColumn":19},{"ruleId":"366","severity":1,"message":"371","line":4,"column":10,"nodeType":"368","messageId":"369","endLine":4,"endColumn":14},{"ruleId":"366","severity":1,"message":"440","line":6,"column":10,"nodeType":"368","messageId":"369","endLine":6,"endColumn":12},{"ruleId":"366","severity":1,"message":"441","line":7,"column":8,"nodeType":"368","messageId":"369","endLine":7,"endColumn":14},{"ruleId":"366","severity":1,"message":"442","line":15,"column":7,"nodeType":"368","messageId":"369","endLine":15,"endColumn":18},{"ruleId":"366","severity":1,"message":"443","line":61,"column":20,"nodeType":"368","messageId":"369","endLine":61,"endColumn":30},{"ruleId":"366","severity":1,"message":"444","line":62,"column":20,"nodeType":"368","messageId":"369","endLine":62,"endColumn":30},{"ruleId":"366","severity":1,"message":"445","line":70,"column":9,"nodeType":"368","messageId":"369","endLine":70,"endColumn":17},{"ruleId":"366","severity":1,"message":"414","line":71,"column":15,"nodeType":"368","messageId":"369","endLine":71,"endColumn":22},{"ruleId":"366","severity":1,"message":"371","line":2,"column":10,"nodeType":"368","messageId":"369","endLine":2,"endColumn":14},{"ruleId":"366","severity":1,"message":"446","line":12,"column":8,"nodeType":"368","messageId":"369","endLine":12,"endColumn":21},{"ruleId":"366","severity":1,"message":"447","line":16,"column":8,"nodeType":"368","messageId":"369","endLine":16,"endColumn":17},{"ruleId":"366","severity":1,"message":"448","line":34,"column":11,"nodeType":"368","messageId":"369","endLine":34,"endColumn":15},{"ruleId":"366","severity":1,"message":"449","line":37,"column":11,"nodeType":"368","messageId":"369","endLine":37,"endColumn":17},{"ruleId":"366","severity":1,"message":"450","line":27,"column":8,"nodeType":"368","messageId":"369","endLine":27,"endColumn":14},{"ruleId":"366","severity":1,"message":"451","line":54,"column":26,"nodeType":"368","messageId":"369","endLine":54,"endColumn":43},{"ruleId":"403","severity":1,"message":"452","line":108,"column":6,"nodeType":"405","endLine":108,"endColumn":14,"suggestions":"453"},{"ruleId":"366","severity":1,"message":"415","line":56,"column":9,"nodeType":"368","messageId":"369","endLine":56,"endColumn":14},{"ruleId":"416","severity":1,"message":"417","line":61,"column":12,"nodeType":"418","messageId":"419","endLine":61,"endColumn":38},{"ruleId":"366","severity":1,"message":"411","line":76,"column":12,"nodeType":"368","messageId":"369","endLine":76,"endColumn":19},{"ruleId":"366","severity":1,"message":"412","line":76,"column":20,"nodeType":"368","messageId":"369","endLine":76,"endColumn":30},{"ruleId":"437","severity":1,"message":"438","line":457,"column":49,"nodeType":"379","endLine":457,"endColumn":92},{"ruleId":"366","severity":1,"message":"371","line":4,"column":10,"nodeType":"368","messageId":"369","endLine":4,"endColumn":14},{"ruleId":"366","severity":1,"message":"442","line":13,"column":7,"nodeType":"368","messageId":"369","endLine":13,"endColumn":18},{"ruleId":"366","severity":1,"message":"443","line":59,"column":20,"nodeType":"368","messageId":"369","endLine":59,"endColumn":30},{"ruleId":"366","severity":1,"message":"444","line":60,"column":20,"nodeType":"368","messageId":"369","endLine":60,"endColumn":30},{"ruleId":"366","severity":1,"message":"414","line":61,"column":15,"nodeType":"368","messageId":"369","endLine":61,"endColumn":22},{"ruleId":"403","severity":1,"message":"454","line":41,"column":8,"nodeType":"405","endLine":41,"endColumn":10,"suggestions":"455"},{"ruleId":"403","severity":1,"message":"456","line":72,"column":8,"nodeType":"405","endLine":72,"endColumn":16,"suggestions":"457"},{"ruleId":"366","severity":1,"message":"458","line":3,"column":8,"nodeType":"368","messageId":"369","endLine":3,"endColumn":12},{"ruleId":"366","severity":1,"message":"459","line":12,"column":8,"nodeType":"368","messageId":"369","endLine":12,"endColumn":24},{"ruleId":"366","severity":1,"message":"460","line":13,"column":8,"nodeType":"368","messageId":"369","endLine":13,"endColumn":24},{"ruleId":"366","severity":1,"message":"461","line":410,"column":12,"nodeType":"368","messageId":"369","endLine":410,"endColumn":20},{"ruleId":"366","severity":1,"message":"462","line":438,"column":11,"nodeType":"368","messageId":"369","endLine":438,"endColumn":14},{"ruleId":"377","severity":1,"message":"378","line":494,"column":19,"nodeType":"379","endLine":494,"endColumn":66},{"ruleId":"377","severity":1,"message":"378","line":499,"column":17,"nodeType":"379","endLine":499,"endColumn":66},{"ruleId":"366","severity":1,"message":"463","line":1,"column":10,"nodeType":"368","messageId":"369","endLine":1,"endColumn":16},{"ruleId":"366","severity":1,"message":"407","line":8,"column":8,"nodeType":"368","messageId":"369","endLine":8,"endColumn":17},{"ruleId":"403","severity":1,"message":"464","line":46,"column":8,"nodeType":"405","endLine":46,"endColumn":22,"suggestions":"465"},{"ruleId":"403","severity":1,"message":"466","line":77,"column":8,"nodeType":"405","endLine":77,"endColumn":16,"suggestions":"467"},{"ruleId":"366","severity":1,"message":"459","line":9,"column":8,"nodeType":"368","messageId":"369","endLine":9,"endColumn":24},{"ruleId":"366","severity":1,"message":"460","line":10,"column":8,"nodeType":"368","messageId":"369","endLine":10,"endColumn":24},{"ruleId":"366","severity":1,"message":"468","line":20,"column":11,"nodeType":"368","messageId":"369","endLine":20,"endColumn":16},{"ruleId":"366","severity":1,"message":"469","line":160,"column":11,"nodeType":"368","messageId":"369","endLine":160,"endColumn":30},{"ruleId":"366","severity":1,"message":"470","line":164,"column":11,"nodeType":"368","messageId":"369","endLine":164,"endColumn":35},{"ruleId":"366","severity":1,"message":"471","line":244,"column":11,"nodeType":"368","messageId":"369","endLine":244,"endColumn":23},{"ruleId":"366","severity":1,"message":"472","line":266,"column":14,"nodeType":"368","messageId":"369","endLine":266,"endColumn":36},{"ruleId":"366","severity":1,"message":"473","line":326,"column":14,"nodeType":"368","messageId":"369","endLine":326,"endColumn":26},{"ruleId":"366","severity":1,"message":"415","line":42,"column":9,"nodeType":"368","messageId":"369","endLine":42,"endColumn":14},{"ruleId":"416","severity":1,"message":"417","line":47,"column":12,"nodeType":"418","messageId":"419","endLine":47,"endColumn":38},"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'getPreviewFromContent' is defined but never used.","'Link' is defined but never used.","'AddCircleIcon' is defined but never used.","'visibility_icon' is defined but never used.","'harsh' is defined but never used.","'mehul' is defined but never used.","'LoginCard' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'id_fetch' is assigned a value but never used.","'Trending' is defined but never used.","'Component' is defined but never used.","'Carousel' is defined but never used.","'splashVisible' is assigned a value but never used.","'getLinkPreview' is defined but never used.","'axios' is assigned a value but never used.","'detectedUrl' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\:.","Literal","unnecessaryEscape",["474","475"],"Unnecessary escape character: \\..",["476","477"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'hashtag'. Either include it or remove the dependency array.","ArrayExpression",["478"],"'FormLabel' is defined but never used.","'makeStyles' is defined but never used.","'Preloader' is defined but never used.","'SplashScreen' is defined but never used.","'noNotif' is assigned a value but never used.","'setNoNotif' is assigned a value but never used.","'logo' is assigned a value but never used.","'setLogo' is assigned a value but never used.","'token' is assigned a value but never used.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'setCandle' is assigned a value but never used.","'useRef' is defined but never used.","'applex' is defined but never used.","'explore' is defined but never used.","'download' is defined but never used.","'slices' is defined but never used.","'s1' is defined but never used.","'s2' is defined but never used.","'s3' is defined but never used.","'useScrollSnap' is defined but never used.","'tirupati' is defined but never used.","'holi' is defined but never used.","'durgapuja' is defined but never used.","'ganpati' is defined but never used.","'diwali' is defined but never used.","'next_page' is defined but never used.","'register_page' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useEffect' is defined but never used.","'db' is defined but never used.","'Navbar' is defined but never used.","'StyledBadge' is assigned a value but never used.","'setLikepic' is assigned a value but never used.","'setChatpic' is assigned a value but never used.","'viewOnly' is assigned a value but never used.","'ExitToAppIcon' is defined but never used.","'Translate' is defined but never used.","'lang' is assigned a value but never used.","'logout' is assigned a value but never used.","'Button' is defined but never used.","'setRecentSearches' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'filtervalues' and 'searchOption'. Either include them or remove the dependency array. You can also do a functional update 'setFilterValues(f => ...)' if you only need 'filtervalues' in the 'setFilterValues' call.",["479"],"React Hook useEffect has a missing dependency: 'query_ref'. Either include it or remove the dependency array.",["480"],"React Hook useEffect has missing dependencies: 'list' and 'query_ref'. Either include them or remove the dependency array. You can also do a functional update 'setList(l => ...)' if you only need 'list' in the 'setList' call.",["481"],"'Post' is defined but never used.","'PhotoLibraryIcon' is defined but never used.","'VideoLibraryIcon' is defined but never used.","'showtags' is defined but never used.","'div' is assigned a value but never used.","'yellow' is defined but never used.","React Hook useEffect has a missing dependency: 'queryRef'. Either include it or remove the dependency array.",["482"],"React Hook useEffect has missing dependencies: 'list' and 'queryRef'. Either include them or remove the dependency array. You can also do a functional update 'setList(l => ...)' if you only need 'list' in the 'setList' call.",["483"],"'clips' is assigned a value but never used.","'uploadFileWithClick' is assigned a value but never used.","'uploadVideoFileWithClick' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'handleVideoInputChange' is defined but never used.","'ImageGallery' is defined but never used.",{"messageId":"484","fix":"485","desc":"486"},{"messageId":"487","fix":"488","desc":"489"},{"messageId":"484","fix":"490","desc":"486"},{"messageId":"487","fix":"491","desc":"489"},{"desc":"492","fix":"493"},{"desc":"494","fix":"495"},{"desc":"496","fix":"497"},{"desc":"498","fix":"499"},{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},"removeEscape",{"range":"504","text":"505"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"506","text":"507"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"508","text":"505"},{"range":"509","text":"507"},"Update the dependencies array to be: [hashtag]",{"range":"510","text":"511"},"Update the dependencies array to be: [filtervalues, searchOption, update]",{"range":"512","text":"513"},"Update the dependencies array to be: [query_ref]",{"range":"514","text":"515"},"Update the dependencies array to be: [list, query_ref, update]",{"range":"516","text":"517"},"Update the dependencies array to be: [props.postid, queryRef]",{"range":"518","text":"519"},"Update the dependencies array to be: [list, queryRef, update]",{"range":"520","text":"521"},[4867,4868],"",[4867,4867],"\\",[4885,4886],[4885,4885],[1197,1199],"[hashtag]",[4010,4018],"[filtervalues, searchOption, update]",[1400,1402],"[query_ref]",[2366,2374],"[list, query_ref, update]",[1771,1785],"[props.postid, queryRef]",[2748,2756],"[list, queryRef, update]"]